
AeroPendulum_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800edc8  0800edc8  0001edc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f634  0800f634  0002036c  2**0
                  CONTENTS
  4 .ARM          00000000  0800f634  0800f634  0002036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f634  0800f634  0002036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f634  0800f634  0001f634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f638  0800f638  0001f638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0800f63c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000165c  20000370  0800f9a8  00020370  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  200019cc  0800f9a8  000219cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001932a  00000000  00000000  00020395  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cd5  00000000  00000000  000396bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0003e820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001890d  00000000  00000000  0003fad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128a9  00000000  00000000  000583dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007970c  00000000  00000000  0006ac86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006678  00000000  00000000  000e4410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000370 	.word	0x20000370
 800012c:	00000000 	.word	0x00000000
 8000130:	0800edb0 	.word	0x0800edb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000374 	.word	0x20000374
 800014c:	0800edb0 	.word	0x0800edb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 800102a:	2306      	movs	r3, #6
 800102c:	847b      	strh	r3, [r7, #34]	; 0x22
 800102e:	2306      	movs	r3, #6
 8001030:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	83fb      	strh	r3, [r7, #30]
 800103a:	2300      	movs	r3, #0
 800103c:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800103e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001042:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001048:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <EE_Init+0x2a4>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800104e:	4b9f      	ldr	r3, [pc, #636]	; (80012cc <EE_Init+0x2a8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8001058:	4b9d      	ldr	r3, [pc, #628]	; (80012d0 <EE_Init+0x2ac>)
 800105a:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8001060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001062:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001066:	4293      	cmp	r3, r2
 8001068:	d057      	beq.n	800111a <EE_Init+0xf6>
 800106a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106e:	4293      	cmp	r3, r2
 8001070:	d003      	beq.n	800107a <EE_Init+0x56>
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80f4 	beq.w	8001260 <EE_Init+0x23c>
 8001078:	e193      	b.n	80013a2 <EE_Init+0x37e>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800107a:	8c3b      	ldrh	r3, [r7, #32]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d116      	bne.n	80010ae <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001080:	4891      	ldr	r0, [pc, #580]	; (80012c8 <EE_Init+0x2a4>)
 8001082:	f000 f9b1 	bl	80013e8 <EE_VerifyPageFullyErased>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8194 	bne.w	80013b6 <EE_Init+0x392>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800108e:	f107 0214 	add.w	r2, r7, #20
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fc96 	bl	80049c8 <HAL_FLASHEx_Erase>
 800109c:	4603      	mov	r3, r0
 800109e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80010a0:	7efb      	ldrb	r3, [r7, #27]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8187 	beq.w	80013b6 <EE_Init+0x392>
          {
            return flashstatus;
 80010a8:	7efb      	ldrb	r3, [r7, #27]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	e18b      	b.n	80013c6 <EE_Init+0x3a2>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80010ae:	8c3b      	ldrh	r3, [r7, #32]
 80010b0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d125      	bne.n	8001104 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80010b8:	4883      	ldr	r0, [pc, #524]	; (80012c8 <EE_Init+0x2a4>)
 80010ba:	f000 f995 	bl	80013e8 <EE_VerifyPageFullyErased>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10e      	bne.n	80010e2 <EE_Init+0xbe>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80010c4:	f107 0214 	add.w	r2, r7, #20
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fc7b 	bl	80049c8 <HAL_FLASHEx_Erase>
 80010d2:	4603      	mov	r3, r0
 80010d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80010d6:	7efb      	ldrb	r3, [r7, #27]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <EE_Init+0xbe>
          {
            return flashstatus;
 80010dc:	7efb      	ldrb	r3, [r7, #27]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	e171      	b.n	80013c6 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	4978      	ldr	r1, [pc, #480]	; (80012cc <EE_Init+0x2a8>)
 80010ec:	2001      	movs	r0, #1
 80010ee:	f003 fb13 	bl	8004718 <HAL_FLASH_Program>
 80010f2:	4603      	mov	r3, r0
 80010f4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80010f6:	7efb      	ldrb	r3, [r7, #27]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 815c 	beq.w	80013b6 <EE_Init+0x392>
        {
          return flashstatus;
 80010fe:	7efb      	ldrb	r3, [r7, #27]
 8001100:	b29b      	uxth	r3, r3
 8001102:	e160      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001104:	f000 fa02 	bl	800150c <EE_Format>
 8001108:	4603      	mov	r3, r0
 800110a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800110c:	7efb      	ldrb	r3, [r7, #27]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8151 	beq.w	80013b6 <EE_Init+0x392>
        {
          return flashstatus;
 8001114:	7efb      	ldrb	r3, [r7, #27]
 8001116:	b29b      	uxth	r3, r3
 8001118:	e155      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800111a:	8c3b      	ldrh	r3, [r7, #32]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d163      	bne.n	80011e8 <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001120:	2300      	movs	r3, #0
 8001122:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001124:	e030      	b.n	8001188 <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001126:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <EE_Init+0x2b0>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b29a      	uxth	r2, r3
 800112c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800112e:	496a      	ldr	r1, [pc, #424]	; (80012d8 <EE_Init+0x2b4>)
 8001130:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001134:	429a      	cmp	r2, r3
 8001136:	d101      	bne.n	800113c <EE_Init+0x118>
          {
            x = varidx;
 8001138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 800113c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800113e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001142:	429a      	cmp	r2, r3
 8001144:	d01d      	beq.n	8001182 <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001146:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001148:	4a63      	ldr	r2, [pc, #396]	; (80012d8 <EE_Init+0x2b4>)
 800114a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114e:	4963      	ldr	r1, [pc, #396]	; (80012dc <EE_Init+0x2b8>)
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f96f 	bl	8001434 <EE_ReadVariable>
 8001156:	4603      	mov	r3, r0
 8001158:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 800115a:	8bbb      	ldrh	r3, [r7, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d010      	beq.n	8001182 <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001162:	4a5d      	ldr	r2, [pc, #372]	; (80012d8 <EE_Init+0x2b4>)
 8001164:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001168:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <EE_Init+0x2b8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f000 fa64 	bl	800163c <EE_VerifyPageFullWriteVariable>
 8001174:	4603      	mov	r3, r0
 8001176:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001178:	8bfb      	ldrh	r3, [r7, #30]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <EE_Init+0x15e>
              {
                return eepromstatus;
 800117e:	8bfb      	ldrh	r3, [r7, #30]
 8001180:	e121      	b.n	80013c6 <EE_Init+0x3a2>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001182:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001184:	3301      	adds	r3, #1
 8001186:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800118a:	2b02      	cmp	r3, #2
 800118c:	d9cb      	bls.n	8001126 <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	494c      	ldr	r1, [pc, #304]	; (80012c8 <EE_Init+0x2a4>)
 8001198:	2001      	movs	r0, #1
 800119a:	f003 fabd 	bl	8004718 <HAL_FLASH_Program>
 800119e:	4603      	mov	r3, r0
 80011a0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80011a2:	7efb      	ldrb	r3, [r7, #27]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <EE_Init+0x18a>
        {
          return flashstatus;
 80011a8:	7efb      	ldrb	r3, [r7, #27]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	e10b      	b.n	80013c6 <EE_Init+0x3a2>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80011b2:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <EE_Init+0x2bc>)
 80011b4:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80011ba:	4844      	ldr	r0, [pc, #272]	; (80012cc <EE_Init+0x2a8>)
 80011bc:	f000 f914 	bl	80013e8 <EE_VerifyPageFullyErased>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 80f9 	bne.w	80013ba <EE_Init+0x396>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80011c8:	f107 0214 	add.w	r2, r7, #20
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fbf9 	bl	80049c8 <HAL_FLASHEx_Erase>
 80011d6:	4603      	mov	r3, r0
 80011d8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80ec 	beq.w	80013ba <EE_Init+0x396>
          {
            return flashstatus;
 80011e2:	7efb      	ldrb	r3, [r7, #27]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	e0ee      	b.n	80013c6 <EE_Init+0x3a2>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 80011e8:	8c3b      	ldrh	r3, [r7, #32]
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12b      	bne.n	800124a <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <EE_Init+0x2bc>)
 80011f8:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80011fe:	4833      	ldr	r0, [pc, #204]	; (80012cc <EE_Init+0x2a8>)
 8001200:	f000 f8f2 	bl	80013e8 <EE_VerifyPageFullyErased>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10e      	bne.n	8001228 <EE_Init+0x204>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800120a:	f107 0214 	add.w	r2, r7, #20
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fbd8 	bl	80049c8 <HAL_FLASHEx_Erase>
 8001218:	4603      	mov	r3, r0
 800121a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800121c:	7efb      	ldrb	r3, [r7, #27]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <EE_Init+0x204>
          {
            return flashstatus;
 8001222:	7efb      	ldrb	r3, [r7, #27]
 8001224:	b29b      	uxth	r3, r3
 8001226:	e0ce      	b.n	80013c6 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	4925      	ldr	r1, [pc, #148]	; (80012c8 <EE_Init+0x2a4>)
 8001232:	2001      	movs	r0, #1
 8001234:	f003 fa70 	bl	8004718 <HAL_FLASH_Program>
 8001238:	4603      	mov	r3, r0
 800123a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800123c:	7efb      	ldrb	r3, [r7, #27]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80bb 	beq.w	80013ba <EE_Init+0x396>
        {
          return flashstatus;
 8001244:	7efb      	ldrb	r3, [r7, #27]
 8001246:	b29b      	uxth	r3, r3
 8001248:	e0bd      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800124a:	f000 f95f 	bl	800150c <EE_Format>
 800124e:	4603      	mov	r3, r0
 8001250:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001252:	7efb      	ldrb	r3, [r7, #27]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80b0 	beq.w	80013ba <EE_Init+0x396>
        {
          return flashstatus;
 800125a:	7efb      	ldrb	r3, [r7, #27]
 800125c:	b29b      	uxth	r3, r3
 800125e:	e0b2      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8001260:	8c3b      	ldrh	r3, [r7, #32]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10a      	bne.n	800127c <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001266:	f000 f951 	bl	800150c <EE_Format>
 800126a:	4603      	mov	r3, r0
 800126c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800126e:	7efb      	ldrb	r3, [r7, #27]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a4 	beq.w	80013be <EE_Init+0x39a>
        {
          return flashstatus;
 8001276:	7efb      	ldrb	r3, [r7, #27]
 8001278:	b29b      	uxth	r3, r3
 800127a:	e0a4      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 800127c:	8c3b      	ldrh	r3, [r7, #32]
 800127e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001282:	4293      	cmp	r3, r2
 8001284:	d11c      	bne.n	80012c0 <EE_Init+0x29c>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <EE_Init+0x2bc>)
 800128c:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <EE_Init+0x2a8>)
 8001294:	f000 f8a8 	bl	80013e8 <EE_VerifyPageFullyErased>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 808f 	bne.w	80013be <EE_Init+0x39a>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80012a0:	f107 0214 	add.w	r2, r7, #20
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fb8d 	bl	80049c8 <HAL_FLASHEx_Erase>
 80012ae:	4603      	mov	r3, r0
 80012b0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80012b2:	7efb      	ldrb	r3, [r7, #27]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8082 	beq.w	80013be <EE_Init+0x39a>
          {
            return flashstatus;
 80012ba:	7efb      	ldrb	r3, [r7, #27]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	e082      	b.n	80013c6 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80012c4:	e03f      	b.n	8001346 <EE_Init+0x322>
 80012c6:	bf00      	nop
 80012c8:	0800fc00 	.word	0x0800fc00
 80012cc:	0801fc00 	.word	0x0801fc00
 80012d0:	08008000 	.word	0x08008000
 80012d4:	0800fc06 	.word	0x0800fc06
 80012d8:	200005c4 	.word	0x200005c4
 80012dc:	2000038c 	.word	0x2000038c
 80012e0:	08018000 	.word	0x08018000
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <EE_Init+0x3ac>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012ec:	4939      	ldr	r1, [pc, #228]	; (80013d4 <EE_Init+0x3b0>)
 80012ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d101      	bne.n	80012fa <EE_Init+0x2d6>
          {
            x = varidx;
 80012f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012f8:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 80012fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001300:	429a      	cmp	r2, r3
 8001302:	d01d      	beq.n	8001340 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001304:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <EE_Init+0x3b0>)
 8001308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130c:	4932      	ldr	r1, [pc, #200]	; (80013d8 <EE_Init+0x3b4>)
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f890 	bl	8001434 <EE_ReadVariable>
 8001314:	4603      	mov	r3, r0
 8001316:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001318:	8bbb      	ldrh	r3, [r7, #28]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d010      	beq.n	8001340 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <EE_Init+0x3b0>)
 8001322:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <EE_Init+0x3b4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f000 f985 	bl	800163c <EE_VerifyPageFullWriteVariable>
 8001332:	4603      	mov	r3, r0
 8001334:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001336:	8bfb      	ldrh	r3, [r7, #30]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <EE_Init+0x31c>
              {
                return eepromstatus;
 800133c:	8bfb      	ldrh	r3, [r7, #30]
 800133e:	e042      	b.n	80013c6 <EE_Init+0x3a2>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001340:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001342:	3301      	adds	r3, #1
 8001344:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001346:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001348:	2b02      	cmp	r3, #2
 800134a:	d9cb      	bls.n	80012e4 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	4921      	ldr	r1, [pc, #132]	; (80013dc <EE_Init+0x3b8>)
 8001356:	2001      	movs	r0, #1
 8001358:	f003 f9de 	bl	8004718 <HAL_FLASH_Program>
 800135c:	4603      	mov	r3, r0
 800135e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001360:	7efb      	ldrb	r3, [r7, #27]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <EE_Init+0x348>
        {
          return flashstatus;
 8001366:	7efb      	ldrb	r3, [r7, #27]
 8001368:	b29b      	uxth	r3, r3
 800136a:	e02c      	b.n	80013c6 <EE_Init+0x3a2>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800136c:	2300      	movs	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <EE_Init+0x3bc>)
 8001372:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <EE_Init+0x3c0>)
 800137a:	f000 f835 	bl	80013e8 <EE_VerifyPageFullyErased>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d11c      	bne.n	80013be <EE_Init+0x39a>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001384:	f107 0214 	add.w	r2, r7, #20
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fb1b 	bl	80049c8 <HAL_FLASHEx_Erase>
 8001392:	4603      	mov	r3, r0
 8001394:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001396:	7efb      	ldrb	r3, [r7, #27]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d010      	beq.n	80013be <EE_Init+0x39a>
          {
            return flashstatus;
 800139c:	7efb      	ldrb	r3, [r7, #27]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e011      	b.n	80013c6 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 80013a2:	f000 f8b3 	bl	800150c <EE_Format>
 80013a6:	4603      	mov	r3, r0
 80013a8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80013aa:	7efb      	ldrb	r3, [r7, #27]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <EE_Init+0x39e>
      {
        return flashstatus;
 80013b0:	7efb      	ldrb	r3, [r7, #27]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	e007      	b.n	80013c6 <EE_Init+0x3a2>
      break;
 80013b6:	bf00      	nop
 80013b8:	e004      	b.n	80013c4 <EE_Init+0x3a0>
      break;
 80013ba:	bf00      	nop
 80013bc:	e002      	b.n	80013c4 <EE_Init+0x3a0>
      break;
 80013be:	bf00      	nop
 80013c0:	e000      	b.n	80013c4 <EE_Init+0x3a0>
      }
      break;
 80013c2:	bf00      	nop
  }

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	0801fc06 	.word	0x0801fc06
 80013d4:	200005c4 	.word	0x200005c4
 80013d8:	2000038c 	.word	0x2000038c
 80013dc:	0801fc00 	.word	0x0801fc00
 80013e0:	08008000 	.word	0x08008000
 80013e4:	0800fc00 	.word	0x0800fc00

080013e8 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 80013f4:	f245 5355 	movw	r3, #21845	; 0x5555
 80013f8:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80013fa:	e00d      	b.n	8001418 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001408:	4293      	cmp	r3, r2
 800140a:	d002      	beq.n	8001412 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

      break;
 8001410:	e006      	b.n	8001420 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <EE_VerifyPageFullyErased+0x48>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d9ed      	bls.n	80013fc <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	b29b      	uxth	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	0800ffff 	.word	0x0800ffff

08001434 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8001440:	2300      	movs	r3, #0
 8001442:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8001444:	f245 5355 	movw	r3, #21845	; 0x5555
 8001448:	81bb      	strh	r3, [r7, #12]
 800144a:	2301      	movs	r3, #1
 800144c:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <EE_ReadVariable+0x8c>)
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <EE_ReadVariable+0x8c>)
 8001454:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f8ac 	bl	80015b4 <EE_FindValidPage>
 800145c:	4603      	mov	r3, r0
 800145e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	2bab      	cmp	r3, #171	; 0xab
 8001464:	d101      	bne.n	800146a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8001466:	23ab      	movs	r3, #171	; 0xab
 8001468:	e025      	b.n	80014b6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001470:	333f      	adds	r3, #63	; 0x3f
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	3301      	adds	r3, #1
 800147a:	029a      	lsls	r2, r3, #10
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <EE_ReadVariable+0x90>)
 800147e:	4413      	add	r3, r2
 8001480:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 8001482:	e012      	b.n	80014aa <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 800148a:	89ba      	ldrh	r2, [r7, #12]
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	429a      	cmp	r2, r3
 8001490:	d108      	bne.n	80014a4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3b02      	subs	r3, #2
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	82fb      	strh	r3, [r7, #22]

      break;
 80014a2:	e007      	b.n	80014b4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	3b04      	subs	r3, #4
 80014a8:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3302      	adds	r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8e7      	bhi.n	8001484 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80014b4:	8afb      	ldrh	r3, [r7, #22]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	0800fc00 	.word	0x0800fc00
 80014c4:	0800fbfe 	.word	0x0800fbfe

080014c8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	4613      	mov	r3, r2
 80014d6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80014dc:	88ba      	ldrh	r2, [r7, #4]
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f8aa 	bl	800163c <EE_VerifyPageFullWriteVariable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	2b80      	cmp	r3, #128	; 0x80
 80014f0:	d107      	bne.n	8001502 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f8fd 	bl	80016f8 <EE_PageTransfer>
 80014fe:	4603      	mov	r3, r0
 8001500:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8001502:	89fb      	ldrh	r3, [r7, #14]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <EE_Format+0x98>)
 8001520:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001526:	4820      	ldr	r0, [pc, #128]	; (80015a8 <EE_Format+0x9c>)
 8001528:	f7ff ff5e 	bl	80013e8 <EE_VerifyPageFullyErased>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8001532:	f107 0210 	add.w	r2, r7, #16
 8001536:	463b      	mov	r3, r7
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fa44 	bl	80049c8 <HAL_FLASHEx_Erase>
 8001540:	4603      	mov	r3, r0
 8001542:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <EE_Format+0x42>
    {
      return flashstatus;
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	e025      	b.n	800159a <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	4914      	ldr	r1, [pc, #80]	; (80015a8 <EE_Format+0x9c>)
 8001558:	2001      	movs	r0, #1
 800155a:	f003 f8dd 	bl	8004718 <HAL_FLASH_Program>
 800155e:	4603      	mov	r3, r0
 8001560:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <EE_Format+0x60>
  {
    return flashstatus;
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	e016      	b.n	800159a <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <EE_Format+0xa0>)
 800156e:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <EE_Format+0xa4>)
 8001572:	f7ff ff39 	bl	80013e8 <EE_VerifyPageFullyErased>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10d      	bne.n	8001598 <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800157c:	f107 0210 	add.w	r2, r7, #16
 8001580:	463b      	mov	r3, r7
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 fa1f 	bl	80049c8 <HAL_FLASHEx_Erase>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 800158e:	7dfb      	ldrb	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <EE_Format+0x8c>
    {
      return flashstatus;
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	e000      	b.n	800159a <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08008000 	.word	0x08008000
 80015a8:	0800fc00 	.word	0x0800fc00
 80015ac:	08018000 	.word	0x08018000
 80015b0:	0801fc00 	.word	0x0801fc00

080015b4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80015be:	2306      	movs	r3, #6
 80015c0:	81fb      	strh	r3, [r7, #14]
 80015c2:	2306      	movs	r3, #6
 80015c4:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <EE_FindValidPage+0x80>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <EE_FindValidPage+0x84>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <EE_FindValidPage+0x5c>
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d125      	bne.n	8001628 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80015dc:	89bb      	ldrh	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d108      	bne.n	80015f4 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80015ec:	2300      	movs	r3, #0
 80015ee:	e01c      	b.n	800162a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	e01a      	b.n	800162a <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d108      	bne.n	800160c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 80015fa:	89bb      	ldrh	r3, [r7, #12]
 80015fc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	e010      	b.n	800162a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001608:	2300      	movs	r3, #0
 800160a:	e00e      	b.n	800162a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800160c:	23ab      	movs	r3, #171	; 0xab
 800160e:	e00c      	b.n	800162a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001616:	2300      	movs	r3, #0
 8001618:	e007      	b.n	800162a <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 800161a:	89bb      	ldrh	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	e002      	b.n	800162a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001624:	23ab      	movs	r3, #171	; 0xab
 8001626:	e000      	b.n	800162a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001628:	2300      	movs	r3, #0
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	0800fc00 	.word	0x0800fc00
 8001638:	0801fc00 	.word	0x0801fc00

0800163c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	4613      	mov	r3, r2
 800164a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 8001650:	2300      	movs	r3, #0
 8001652:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <EE_VerifyPageFullWriteVariable+0xb0>)
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <EE_VerifyPageFullWriteVariable+0xb4>)
 800165a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff ffa9 	bl	80015b4 <EE_FindValidPage>
 8001662:	4603      	mov	r3, r0
 8001664:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8001666:	8a3b      	ldrh	r3, [r7, #16]
 8001668:	2bab      	cmp	r3, #171	; 0xab
 800166a:	d101      	bne.n	8001670 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 800166c:	23ab      	movs	r3, #171	; 0xab
 800166e:	e039      	b.n	80016e4 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8001670:	8a3b      	ldrh	r3, [r7, #16]
 8001672:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001676:	333f      	adds	r3, #63	; 0x3f
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800167c:	8a3b      	ldrh	r3, [r7, #16]
 800167e:	3301      	adds	r3, #1
 8001680:	029a      	lsls	r2, r3, #10
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8001688:	e027      	b.n	80016da <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001692:	d11f      	bne.n	80016d4 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	461a      	mov	r2, r3
 800169c:	4623      	mov	r3, r4
 800169e:	6979      	ldr	r1, [r7, #20]
 80016a0:	2001      	movs	r0, #1
 80016a2:	f003 f839 	bl	8004718 <HAL_FLASH_Program>
 80016a6:	4603      	mov	r3, r0
 80016a8:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	e016      	b.n	80016e4 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	1c99      	adds	r1, r3, #2
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	2001      	movs	r0, #1
 80016c6:	f003 f827 	bl	8004718 <HAL_FLASH_Program>
 80016ca:	4603      	mov	r3, r0
 80016cc:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 80016ce:	7cfb      	ldrb	r3, [r7, #19]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	e007      	b.n	80016e4 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3304      	adds	r3, #4
 80016d8:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3d3      	bcc.n	800168a <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80016e2:	2380      	movs	r3, #128	; 0x80
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd90      	pop	{r4, r7, pc}
 80016ec:	0800fc00 	.word	0x0800fc00
 80016f0:	08010000 	.word	0x08010000
 80016f4:	0800fbff 	.word	0x0800fbff

080016f8 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	80fb      	strh	r3, [r7, #6]
 8001704:	4613      	mov	r3, r2
 8001706:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <EE_PageTransfer+0x164>)
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	847b      	strh	r3, [r7, #34]	; 0x22
 800171a:	2300      	movs	r3, #0
 800171c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	843b      	strh	r3, [r7, #32]
 8001722:	2300      	movs	r3, #0
 8001724:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ff42 	bl	80015b4 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8001734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001736:	2b40      	cmp	r3, #64	; 0x40
 8001738:	d104      	bne.n	8001744 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <EE_PageTransfer+0x164>)
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <EE_PageTransfer+0x168>)
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
 8001742:	e009      	b.n	8001758 <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8001744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001746:	2b00      	cmp	r3, #0
 8001748:	d104      	bne.n	8001754 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <EE_PageTransfer+0x16c>)
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <EE_PageTransfer+0x170>)
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
 8001752:	e001      	b.n	8001758 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001754:	23ab      	movs	r3, #171	; 0xab
 8001756:	e07c      	b.n	8001852 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8001758:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001762:	2001      	movs	r0, #1
 8001764:	f002 ffd8 	bl	8004718 <HAL_FLASH_Program>
 8001768:	4603      	mov	r3, r0
 800176a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800176e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8001776:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800177a:	b29b      	uxth	r3, r3
 800177c:	e069      	b.n	8001852 <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800177e:	88ba      	ldrh	r2, [r7, #4]
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff59 	bl	800163c <EE_VerifyPageFullWriteVariable>
 800178a:	4603      	mov	r3, r0
 800178c:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 800178e:	8c3b      	ldrh	r3, [r7, #32]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 8001794:	8c3b      	ldrh	r3, [r7, #32]
 8001796:	e05c      	b.n	8001852 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001798:	2300      	movs	r3, #0
 800179a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800179c:	e027      	b.n	80017ee <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800179e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <EE_PageTransfer+0x174>)
 80017a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d01d      	beq.n	80017e8 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80017ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <EE_PageTransfer+0x174>)
 80017b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017b4:	492e      	ldr	r1, [pc, #184]	; (8001870 <EE_PageTransfer+0x178>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe3c 	bl	8001434 <EE_ReadVariable>
 80017bc:	4603      	mov	r3, r0
 80017be:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d010      	beq.n	80017e8 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80017c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017c8:	4a28      	ldr	r2, [pc, #160]	; (800186c <EE_PageTransfer+0x174>)
 80017ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <EE_PageTransfer+0x178>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f7ff ff31 	bl	800163c <EE_VerifyPageFullWriteVariable>
 80017da:	4603      	mov	r3, r0
 80017dc:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 80017de:	8c3b      	ldrh	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 80017e4:	8c3b      	ldrh	r3, [r7, #32]
 80017e6:	e034      	b.n	8001852 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80017e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ea:	3301      	adds	r3, #1
 80017ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d9d4      	bls.n	800179e <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8001800:	f107 0218 	add.w	r2, r7, #24
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f8dc 	bl	80049c8 <HAL_FLASHEx_Erase>
 8001810:	4603      	mov	r3, r0
 8001812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001816:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 800181e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001822:	b29b      	uxth	r3, r3
 8001824:	e015      	b.n	8001852 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001830:	2001      	movs	r0, #1
 8001832:	f002 ff71 	bl	8004718 <HAL_FLASH_Program>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800183c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8001844:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001848:	b29b      	uxth	r3, r3
 800184a:	e002      	b.n	8001852 <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 800184c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001850:	b29b      	uxth	r3, r3
}
 8001852:	4618      	mov	r0, r3
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800fc00 	.word	0x0800fc00
 8001860:	08018000 	.word	0x08018000
 8001864:	0801fc00 	.word	0x0801fc00
 8001868:	08008000 	.word	0x08008000
 800186c:	200005c4 	.word	0x200005c4
 8001870:	2000038c 	.word	0x2000038c

08001874 <LCD_STROBE>:
	else	ClrLcdRW;
#endif
}*/

void LCD_STROBE(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	SetLcdEN;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <LCD_STROBE+0x24>)
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	611a      	str	r2, [r3, #16]
	_delay_us(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f000 f94c 	bl	8001b1c <_delay_us>
	ClrLcdEN;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <LCD_STROBE+0x24>)
 8001886:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800188a:	611a      	str	r2, [r3, #16]
	_delay_us(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f000 f945 	bl	8001b1c <_delay_us>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010c00 	.word	0x40010c00

0800189c <LCD_out>:

void LCD_out(unsigned char data)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	if(data & 0x01) SetLcdD4;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <LCD_out+0x1e>
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <LCD_out+0x84>)
 80018b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	e003      	b.n	80018c2 <LCD_out+0x26>
	else ClrLcdD4; 
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <LCD_out+0x84>)
 80018bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018c0:	611a      	str	r2, [r3, #16]
	if(data & 0x02) SetLcdD5;
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <LCD_out+0x3a>
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <LCD_out+0x84>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	e003      	b.n	80018de <LCD_out+0x42>
	else ClrLcdD5;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <LCD_out+0x84>)
 80018d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018dc:	611a      	str	r2, [r3, #16]
	if(data & 0x04) SetLcdD6;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <LCD_out+0x56>
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <LCD_out+0x84>)
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	e003      	b.n	80018fa <LCD_out+0x5e>
	else ClrLcdD6;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <LCD_out+0x84>)
 80018f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018f8:	611a      	str	r2, [r3, #16]
	if(data & 0x08) SetLcdD7;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <LCD_out+0x72>
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <LCD_out+0x84>)
 8001906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190a:	611a      	str	r2, [r3, #16]
	else ClrLcdD7;

}
 800190c:	e003      	b.n	8001916 <LCD_out+0x7a>
	else ClrLcdD7;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <LCD_out+0x84>)
 8001910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001914:	611a      	str	r2, [r3, #16]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40010c00 	.word	0x40010c00

08001924 <lcd_write>:


/* write a byte to the LCD in 4 bit mode */
void lcd_write(unsigned char c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	LCD_out(c >> 4);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ffb1 	bl	800189c <LCD_out>
	LCD_STROBE();
 800193a:	f7ff ff9b 	bl	8001874 <LCD_STROBE>
	_delay_us(50);
 800193e:	2032      	movs	r0, #50	; 0x32
 8001940:	f000 f8ec 	bl	8001b1c <_delay_us>
	LCD_out(c & 0x0F);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ffa5 	bl	800189c <LCD_out>
	LCD_STROBE();
 8001952:	f7ff ff8f 	bl	8001874 <LCD_STROBE>
	_delay_us(50);
 8001956:	2032      	movs	r0, #50	; 0x32
 8001958:	f000 f8e0 	bl	8001b1c <_delay_us>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lcd_clear>:

// Clear and home the LCD
void lcd_clear(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	ClrLcdRS;
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <lcd_clear+0x1c>)
 800196a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196e:	611a      	str	r2, [r3, #16]
	lcd_write(0x1);
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff ffd7 	bl	8001924 <lcd_write>
	_delay_ms(2);
 8001976:	2002      	movs	r0, #2
 8001978:	f002 fd28 	bl	80043cc <HAL_Delay>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010c00 	.word	0x40010c00

08001984 <lcd_puts>:

/* write a string of chars to the LCD */
void lcd_puts(const char* s)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	SetLcdRS; /*// write characters*/
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <lcd_puts+0x30>)
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	611a      	str	r2, [r3, #16]
	while(*s)
 8001994:	e006      	b.n	80019a4 <lcd_puts+0x20>
	{
		lcd_write(*s++);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffc0 	bl	8001924 <lcd_write>
	while(*s)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f4      	bne.n	8001996 <lcd_puts+0x12>
	}
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <lcd_putch>:

/* write one character to the LCD */
void lcd_putch(unsigned char c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	SetLcdRS; /*// write characters*/
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <lcd_putch+0x24>)
 80019c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c8:	611a      	str	r2, [r3, #16]
	lcd_write(c);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffa9 	bl	8001924 <lcd_write>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40010c00 	.word	0x40010c00

080019e0 <lcd_gotoxy>:

//Go to the specified position
void lcd_gotoxy(unsigned char x,unsigned char y)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	460a      	mov	r2, r1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71bb      	strb	r3, [r7, #6]
	ClrLcdRS;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <lcd_gotoxy+0x68>)
 80019f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f6:	611a      	str	r2, [r3, #16]

	switch(y)
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d817      	bhi.n	8001a2e <lcd_gotoxy+0x4e>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <lcd_gotoxy+0x24>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a2f 	.word	0x08001a2f
 8001a08:	08001a15 	.word	0x08001a15
 8001a0c:	08001a1f 	.word	0x08001a1f
 8001a10:	08001a27 	.word	0x08001a27
	{
		case 0:
			break;
		case 1:
			x|=0x40;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1a:	71fb      	strb	r3, [r7, #7]
			break;
 8001a1c:	e007      	b.n	8001a2e <lcd_gotoxy+0x4e>
		case 2:
			x+=0x14;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	3314      	adds	r3, #20
 8001a22:	71fb      	strb	r3, [r7, #7]
			break;
 8001a24:	e003      	b.n	8001a2e <lcd_gotoxy+0x4e>
		case 3:
			x+=0x54;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	3354      	adds	r3, #84	; 0x54
 8001a2a:	71fb      	strb	r3, [r7, #7]
			break;
 8001a2c:	bf00      	nop
	}

	x|=0x80;//0b10000000;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a34:	71fb      	strb	r3, [r7, #7]
	lcd_write(x);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff73 	bl	8001924 <lcd_write>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40010c00 	.word	0x40010c00

08001a4c <lcd_hide_cursor>:

void lcd_hide_cursor()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	ClrLcdRS;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <lcd_hide_cursor+0x18>)
 8001a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a56:	611a      	str	r2, [r3, #16]
	lcd_write(0x0C);
 8001a58:	200c      	movs	r0, #12
 8001a5a:	f7ff ff63 	bl	8001924 <lcd_write>
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40010c00 	.word	0x40010c00

08001a68 <lcd_init>:
	lcd_write(0x0F);
}

/* initialise the LCD - put into 4 bit mode */
void lcd_init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	ClrLcdRS;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <lcd_init+0xb0>)
 8001a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a72:	611a      	str	r2, [r3, #16]
	ClrLcdEN;
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <lcd_init+0xb0>)
 8001a76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a7a:	611a      	str	r2, [r3, #16]

	ClrLcdD4;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <lcd_init+0xb0>)
 8001a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a82:	611a      	str	r2, [r3, #16]
	ClrLcdD5;
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <lcd_init+0xb0>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8a:	611a      	str	r2, [r3, #16]
	ClrLcdD6;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <lcd_init+0xb0>)
 8001a8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a92:	611a      	str	r2, [r3, #16]
	ClrLcdD7;
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <lcd_init+0xb0>)
 8001a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9a:	611a      	str	r2, [r3, #16]

	ClrLcdRS; // write control bytes
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <lcd_init+0xb0>)
 8001a9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa2:	611a      	str	r2, [r3, #16]
	_delay_ms(100); // power on delay
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	f002 fc91 	bl	80043cc <HAL_Delay>

	LCD_out(0x3); // attention!
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f7ff fef6 	bl	800189c <LCD_out>
	LCD_STROBE();
 8001ab0:	f7ff fee0 	bl	8001874 <LCD_STROBE>
	_delay_ms(5);
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f002 fc89 	bl	80043cc <HAL_Delay>
	LCD_out(0x3); // attention!
 8001aba:	2003      	movs	r0, #3
 8001abc:	f7ff feee 	bl	800189c <LCD_out>
	LCD_STROBE();
 8001ac0:	f7ff fed8 	bl	8001874 <LCD_STROBE>
	_delay_ms(5);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f002 fc81 	bl	80043cc <HAL_Delay>
	LCD_out(0x3); // attention!
 8001aca:	2003      	movs	r0, #3
 8001acc:	f7ff fee6 	bl	800189c <LCD_out>
	LCD_STROBE();
 8001ad0:	f7ff fed0 	bl	8001874 <LCD_STROBE>
	_delay_ms(5);
 8001ad4:	2005      	movs	r0, #5
 8001ad6:	f002 fc79 	bl	80043cc <HAL_Delay>

	LCD_out(0x2); // attention!
 8001ada:	2002      	movs	r0, #2
 8001adc:	f7ff fede 	bl	800189c <LCD_out>
	LCD_STROBE();
 8001ae0:	f7ff fec8 	bl	8001874 <LCD_STROBE>
	_delay_ms(5);
 8001ae4:	2005      	movs	r0, #5
 8001ae6:	f002 fc71 	bl	80043cc <HAL_Delay>

	lcd_write(0x28); // 4 bit mode, 1/16 duty, 5x8 font
 8001aea:	2028      	movs	r0, #40	; 0x28
 8001aec:	f7ff ff1a 	bl	8001924 <lcd_write>
	_delay_ms(5);
 8001af0:	2005      	movs	r0, #5
 8001af2:	f002 fc6b 	bl	80043cc <HAL_Delay>
	lcd_write(0x0F);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f7ff ff14 	bl	8001924 <lcd_write>

	_delay_ms(5);
 8001afc:	2005      	movs	r0, #5
 8001afe:	f002 fc65 	bl	80043cc <HAL_Delay>
	lcd_write(0x01);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7ff ff0e 	bl	8001924 <lcd_write>
	_delay_ms(5);
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f002 fc5f 	bl	80043cc <HAL_Delay>
	lcd_clear();
 8001b0e:	f7ff ff29 	bl	8001964 <lcd_clear>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010c00 	.word	0x40010c00

08001b1c <_delay_us>:

void _delay_us(unsigned int Delay)
{
 8001b1c:	b490      	push	{r4, r7}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	long long i,k;
	k = (FCLK/21000000)*Delay;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f04f 0400 	mov.w	r4, #0
 8001b30:	e9c7 3402 	strd	r3, r4, [r7, #8]
	for(i=0 ; i<k ; i++);
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	f04f 0400 	mov.w	r4, #0
 8001b3c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001b40:	e006      	b.n	8001b50 <_delay_us+0x34>
 8001b42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	f144 0200 	adc.w	r2, r4, #0
 8001b4c:	e9c7 1204 	strd	r1, r2, [r7, #16]
 8001b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001b54:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b58:	4299      	cmp	r1, r3
 8001b5a:	eb72 0304 	sbcs.w	r3, r2, r4
 8001b5e:	dbf0      	blt.n	8001b42 <_delay_us+0x26>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc90      	pop	{r4, r7}
 8001b68:	4770      	bx	lr

08001b6a <Log>:
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

void Log(char* log)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)log,strlen(log));
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe faec 	bl	8000150 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f008 fb58 	bl	800a234 <CDC_Transmit_FS>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <USART_log>:

void USART_log(char* log)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)log,strlen(log),100);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fadb 	bl	8000150 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <USART_log+0x24>)
 8001ba4:	f005 f951 	bl	8006e4a <HAL_UART_Transmit>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000a00 	.word	0x20000a00

08001bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	USARTbuffer[UsartRXBufferCount++]=NewDataInt;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	b2d1      	uxtb	r1, r2
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001bc6:	7011      	strb	r1, [r2, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_UART_RxCpltCallback+0x58>)
 8001bcc:	7819      	ldrb	r1, [r3, #0]
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_UART_RxCpltCallback+0x5c>)
 8001bd0:	5499      	strb	r1, [r3, r2]
	USARTbuffer[UsartRXBufferCount]=0;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_UART_RxCpltCallback+0x5c>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	5499      	strb	r1, [r3, r2]
	if(NewDataInt=='\n')
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_UART_RxCpltCallback+0x58>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d106      	bne.n	8001bf4 <HAL_UART_RxCpltCallback+0x40>
	{
		//USART_log(USARTbuffer);
		UsartNewDataLineCount=UsartRXBufferCount;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_UART_RxCpltCallback+0x60>)
 8001bec:	701a      	strb	r2, [r3, #0]
		UsartRXBufferCount=0;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart1,&NewDataInt,1);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4905      	ldr	r1, [pc, #20]	; (8001c0c <HAL_UART_RxCpltCallback+0x58>)
 8001bf8:	4807      	ldr	r0, [pc, #28]	; (8001c18 <HAL_UART_RxCpltCallback+0x64>)
 8001bfa:	f005 f9bf 	bl	8006f7c <HAL_UART_Receive_IT>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000390 	.word	0x20000390
 8001c0c:	200009fc 	.word	0x200009fc
 8001c10:	200005d0 	.word	0x200005d0
 8001c14:	2000038f 	.word	0x2000038f
 8001c18:	20000a00 	.word	0x20000a00

08001c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int8_t Num;
	Status.matlab = 0;
 8001c22:	4a5d      	ldr	r2, [pc, #372]	; (8001d98 <main+0x17c>)
 8001c24:	7813      	ldrb	r3, [r2, #0]
 8001c26:	f36f 0341 	bfc	r3, #1, #1
 8001c2a:	7013      	strb	r3, [r2, #0]
	Status.Online = 0;
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <main+0x17c>)
 8001c2e:	7813      	ldrb	r3, [r2, #0]
 8001c30:	f36f 13c7 	bfc	r3, #7, #1
 8001c34:	7013      	strb	r3, [r2, #0]
	Status.exe = 0;
 8001c36:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <main+0x17c>)
 8001c38:	7853      	ldrb	r3, [r2, #1]
 8001c3a:	f36f 0300 	bfc	r3, #0, #1
 8001c3e:	7053      	strb	r3, [r2, #1]
	Status.get_data = 0;
 8001c40:	4a55      	ldr	r2, [pc, #340]	; (8001d98 <main+0x17c>)
 8001c42:	7813      	ldrb	r3, [r2, #0]
 8001c44:	f36f 1386 	bfc	r3, #6, #1
 8001c48:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4a:	f002 fb5d 	bl	8004308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4e:	f000 f8b9 	bl	8001dc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_FLASH_Unlock();
 8001c52:	f002 fdd1 	bl	80047f8 <HAL_FLASH_Unlock>
	EE_Init();
 8001c56:	f7ff f9e5 	bl	8001024 <EE_Init>
	EE_ReadVariable(0,&Min_Throttle);
 8001c5a:	4950      	ldr	r1, [pc, #320]	; (8001d9c <main+0x180>)
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fbe9 	bl	8001434 <EE_ReadVariable>
	EE_ReadVariable(1,&Max_Throttle);
 8001c62:	494f      	ldr	r1, [pc, #316]	; (8001da0 <main+0x184>)
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff fbe5 	bl	8001434 <EE_ReadVariable>
	HAL_FLASH_Lock();
 8001c6a:	f002 fdeb 	bl	8004844 <HAL_FLASH_Lock>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6e:	f000 f9db 	bl	8002028 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c72:	f000 f901 	bl	8001e78 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c76:	f000 f953 	bl	8001f20 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001c7a:	f000 f9ab 	bl	8001fd4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001c7e:	f008 f9d9 	bl	800a034 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001c82:	4848      	ldr	r0, [pc, #288]	; (8001da4 <main+0x188>)
 8001c84:	f004 fc6e 	bl	8006564 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4847      	ldr	r0, [pc, #284]	; (8001da8 <main+0x18c>)
 8001c8c:	f004 fcb8 	bl	8006600 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <main+0x18c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34

  lcd_init();
 8001c9a:	f7ff fee5 	bl	8001a68 <lcd_init>
  lcd_hide_cursor();
 8001c9e:	f7ff fed5 	bl	8001a4c <lcd_hide_cursor>
  startup();
 8001ca2:	f000 fa0d 	bl	80020c0 <startup>
  Verify_Unique();
 8001ca6:	f000 fb2b 	bl	8002300 <Verify_Unique>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_clear();
 8001caa:	f7ff fe5b 	bl	8001964 <lcd_clear>
  Num = 20;
 8001cae:	2314      	movs	r3, #20
 8001cb0:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
	if((Num >= 0 && Num <= 9 ) || Num == 20)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db03      	blt.n	8001cc2 <main+0xa6>
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	dd03      	ble.n	8001cca <main+0xae>
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b14      	cmp	r3, #20
 8001cc8:	d157      	bne.n	8001d7a <main+0x15e>
	{
			lcd_clear();
 8001cca:	f7ff fe4b 	bl	8001964 <lcd_clear>
			Status.whiles=1;
 8001cce:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <main+0x17c>)
 8001cd0:	7813      	ldrb	r3, [r2, #0]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	7013      	strb	r3, [r2, #0]
				 if(Num == 2)	Matlab();
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <main+0xca>
 8001ce0:	f000 fc00 	bl	80024e4 <Matlab>
 8001ce4:	e02b      	b.n	8001d3e <main+0x122>
			else if(Num == 3)	KeyPad();
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d102      	bne.n	8001cf4 <main+0xd8>
 8001cee:	f000 fd27 	bl	8002740 <KeyPad>
 8001cf2:	e024      	b.n	8001d3e <main+0x122>
			else if(Num == 8)	Volume();
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d102      	bne.n	8001d02 <main+0xe6>
 8001cfc:	f001 fbd8 	bl	80034b0 <Volume>
 8001d00:	e01d      	b.n	8001d3e <main+0x122>
			else if(Num == 4)	WinApp();
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d102      	bne.n	8001d10 <main+0xf4>
 8001d0a:	f001 f91b 	bl	8002f44 <WinApp>
 8001d0e:	e016      	b.n	8001d3e <main+0x122>
			else if(Num == 0)	WiFi_Setting();
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <main+0x102>
 8001d18:	f002 f88a 	bl	8003e30 <WiFi_Setting>
 8001d1c:	e00f      	b.n	8001d3e <main+0x122>
			else if(Num == 1)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10b      	bne.n	8001d3e <main+0x122>
			{
				Status.Online = 1;
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <main+0x17c>)
 8001d28:	7813      	ldrb	r3, [r2, #0]
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2e:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&huart1,&NewDataInt,1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	491e      	ldr	r1, [pc, #120]	; (8001dac <main+0x190>)
 8001d34:	481e      	ldr	r0, [pc, #120]	; (8001db0 <main+0x194>)
 8001d36:	f005 f921 	bl	8006f7c <HAL_UART_Receive_IT>
				KeyPad();
 8001d3a:	f000 fd01 	bl	8002740 <KeyPad>
			}
			lcd_clear();
 8001d3e:	f7ff fe11 	bl	8001964 <lcd_clear>
			lcd_puts_XY(0,0,"1> Online");
 8001d42:	2100      	movs	r1, #0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fe4b 	bl	80019e0 <lcd_gotoxy>
 8001d4a:	481a      	ldr	r0, [pc, #104]	; (8001db4 <main+0x198>)
 8001d4c:	f7ff fe1a 	bl	8001984 <lcd_puts>
			lcd_puts_XY(0,1,"2> Matlab");
 8001d50:	2101      	movs	r1, #1
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fe44 	bl	80019e0 <lcd_gotoxy>
 8001d58:	4817      	ldr	r0, [pc, #92]	; (8001db8 <main+0x19c>)
 8001d5a:	f7ff fe13 	bl	8001984 <lcd_puts>
			lcd_puts_XY(0,2,"3> Micro Controller");
 8001d5e:	2102      	movs	r1, #2
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fe3d 	bl	80019e0 <lcd_gotoxy>
 8001d66:	4815      	ldr	r0, [pc, #84]	; (8001dbc <main+0x1a0>)
 8001d68:	f7ff fe0c 	bl	8001984 <lcd_puts>
			lcd_puts_XY(0,3,"4> Windows app");
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fe36 	bl	80019e0 <lcd_gotoxy>
 8001d74:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <main+0x1a4>)
 8001d76:	f7ff fe05 	bl	8001984 <lcd_puts>
			//lcd_puts_XY(0,3,"8> Manual adjustment");

	}
	Num = GET_KEY();
 8001d7a:	f000 fb1b 	bl	80023b4 <GET_KEY>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	if (Num==cls)__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d193      	bne.n	8001cb2 <main+0x96>
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <main+0x18c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
	if((Num >= 0 && Num <= 9 ) || Num == 20)
 8001d94:	e78d      	b.n	8001cb2 <main+0x96>
 8001d96:	bf00      	nop
 8001d98:	200009f8 	.word	0x200009f8
 8001d9c:	20000a94 	.word	0x20000a94
 8001da0:	200005cc 	.word	0x200005cc
 8001da4:	20000a54 	.word	0x20000a54
 8001da8:	200009b8 	.word	0x200009b8
 8001dac:	200009fc 	.word	0x200009fc
 8001db0:	20000a00 	.word	0x20000a00
 8001db4:	0800edc8 	.word	0x0800edc8
 8001db8:	0800edd4 	.word	0x0800edd4
 8001dbc:	0800ede0 	.word	0x0800ede0
 8001dc0:	0800edf4 	.word	0x0800edf4

08001dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	; 0x50
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f008 fe32 	bl	800aa3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e02:	2301      	movs	r3, #1
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fed0 	bl	8005bc0 <HAL_RCC_OscConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e26:	f002 f863 	bl	8003ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f93a 	bl	80060c0 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e52:	f002 f84d 	bl	8003ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e56:	2310      	movs	r3, #16
 8001e58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fac9 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e6c:	f002 f840 	bl	8003ef0 <Error_Handler>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3750      	adds	r7, #80	; 0x50
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	2224      	movs	r2, #36	; 0x24
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f008 fdd8 	bl	800aa3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ecc:	230a      	movs	r3, #10
 8001ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001edc:	230a      	movs	r3, #10
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480d      	ldr	r0, [pc, #52]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001ee8:	f004 fbbc 	bl	8006664 <HAL_TIM_Encoder_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ef2:	f001 fffd 	bl	8003ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_TIM2_Init+0xa4>)
 8001f04:	f004 ff10 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f0e:	f001 ffef 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000a54 	.word	0x20000a54

08001f20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <MX_TIM4_Init+0xb0>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21;
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f4a:	2215      	movs	r2, #21
 8001f4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65453;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f56:	f64f 72ad 	movw	r2, #65453	; 0xffad
 8001f5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f68:	4818      	ldr	r0, [pc, #96]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f6a:	f004 fb1e 	bl	80065aa <HAL_TIM_PWM_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001f74:	f001 ffbc 	bl	8003ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	4619      	mov	r1, r3
 8001f86:	4811      	ldr	r0, [pc, #68]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001f88:	f004 fece 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f92:	f001 ffad 	bl	8003ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	2360      	movs	r3, #96	; 0x60
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001fae:	f004 fbe7 	bl	8006780 <HAL_TIM_PWM_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001fb8:	f001 ff9a 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM4_Init+0xac>)
 8001fbe:	f002 f859 	bl	8004074 <HAL_TIM_MspPostInit>

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200009b8 	.word	0x200009b8
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART1_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART1_UART_Init+0x4c>)
 800200c:	f004 fed0 	bl	8006db0 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f001 ff6b 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000a00 	.word	0x20000a00
 8002024:	40013800 	.word	0x40013800

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <MX_GPIO_Init+0x90>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <MX_GPIO_Init+0x90>)
 8002042:	f043 0320 	orr.w	r3, r3, #32
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <MX_GPIO_Init+0x90>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <MX_GPIO_Init+0x90>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <MX_GPIO_Init+0x90>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <MX_GPIO_Init+0x90>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_GPIO_Init+0x90>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <MX_GPIO_Init+0x90>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_GPIO_Init+0x90>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8002084:	2200      	movs	r2, #0
 8002086:	f24f 11b0 	movw	r1, #61872	; 0xf1b0
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <MX_GPIO_Init+0x94>)
 800208c:	f002 fe9e 	bl	8004dcc <HAL_GPIO_WritePin>
                          |Trigger_Pin|Reset_Pin|LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           Trigger_Pin Reset_Pin LCD_E_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8002090:	f24f 13b0 	movw	r3, #61872	; 0xf1b0
 8002094:	613b      	str	r3, [r7, #16]
                          |Trigger_Pin|Reset_Pin|LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <MX_GPIO_Init+0x94>)
 80020aa:	f002 fd35 	bl	8004b18 <HAL_GPIO_Init>

}
 80020ae:	bf00      	nop
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010c00 	.word	0x40010c00

080020c0 <startup>:

/* USER CODE BEGIN 4 */
void startup(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

	lcd_clear();
 80020c6:	f7ff fc4d 	bl	8001964 <lcd_clear>
	uint8_t Num = GET_KEY();
 80020ca:	f000 f973 	bl	80023b4 <GET_KEY>
 80020ce:	4603      	mov	r3, r0
 80020d0:	71bb      	strb	r3, [r7, #6]

	if(Num!=16)
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d020      	beq.n	800211a <startup+0x5a>
	{
	  lcd_puts_XY(0,0,"SeyyedAmirAliMasoumi");
 80020d8:	2100      	movs	r1, #0
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fc80 	bl	80019e0 <lcd_gotoxy>
 80020e0:	4828      	ldr	r0, [pc, #160]	; (8002184 <startup+0xc4>)
 80020e2:	f7ff fc4f 	bl	8001984 <lcd_puts>
	  lcd_puts_XY(0,1,"Telegram : @Mashroti");
 80020e6:	2101      	movs	r1, #1
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fc79 	bl	80019e0 <lcd_gotoxy>
 80020ee:	4826      	ldr	r0, [pc, #152]	; (8002188 <startup+0xc8>)
 80020f0:	f7ff fc48 	bl	8001984 <lcd_puts>
	  lcd_puts_XY(2,2,"+98 930 927 1137");
 80020f4:	2102      	movs	r1, #2
 80020f6:	2002      	movs	r0, #2
 80020f8:	f7ff fc72 	bl	80019e0 <lcd_gotoxy>
 80020fc:	4823      	ldr	r0, [pc, #140]	; (800218c <startup+0xcc>)
 80020fe:	f7ff fc41 	bl	8001984 <lcd_puts>
	  lcd_puts_XY(4,3,"AeroPendulum");
 8002102:	2103      	movs	r1, #3
 8002104:	2004      	movs	r0, #4
 8002106:	f7ff fc6b 	bl	80019e0 <lcd_gotoxy>
 800210a:	4821      	ldr	r0, [pc, #132]	; (8002190 <startup+0xd0>)
 800210c:	f7ff fc3a 	bl	8001984 <lcd_puts>
	  HAL_Delay(6000);
 8002110:	f241 7070 	movw	r0, #6000	; 0x1770
 8002114:	f002 f95a 	bl	80043cc <HAL_Delay>
 8002118:	e029      	b.n	800216e <startup+0xae>
	}
	else
	{
	  lcd_puts_XY(4,0,"AeroPendulum");
 800211a:	2100      	movs	r1, #0
 800211c:	2004      	movs	r0, #4
 800211e:	f7ff fc5f 	bl	80019e0 <lcd_gotoxy>
 8002122:	481b      	ldr	r0, [pc, #108]	; (8002190 <startup+0xd0>)
 8002124:	f7ff fc2e 	bl	8001984 <lcd_puts>
	  lcd_puts_XY(1,1,"Motor Initializing");
 8002128:	2101      	movs	r1, #1
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff fc58 	bl	80019e0 <lcd_gotoxy>
 8002130:	4818      	ldr	r0, [pc, #96]	; (8002194 <startup+0xd4>)
 8002132:	f7ff fc27 	bl	8001984 <lcd_puts>
	  lcd_puts_XY(4,2,"Please Wait");
 8002136:	2102      	movs	r1, #2
 8002138:	2004      	movs	r0, #4
 800213a:	f7ff fc51 	bl	80019e0 <lcd_gotoxy>
 800213e:	4816      	ldr	r0, [pc, #88]	; (8002198 <startup+0xd8>)
 8002140:	f7ff fc20 	bl	8001984 <lcd_puts>
	  for(uint8_t i=0 ;i<19 ;i++)
 8002144:	2300      	movs	r3, #0
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	e00e      	b.n	8002168 <startup+0xa8>
	  {
		  lcd_puts_XY(i,3,"\xff>");
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2103      	movs	r1, #3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc46 	bl	80019e0 <lcd_gotoxy>
 8002154:	4811      	ldr	r0, [pc, #68]	; (800219c <startup+0xdc>)
 8002156:	f7ff fc15 	bl	8001984 <lcd_puts>
		  HAL_Delay(300);
 800215a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800215e:	f002 f935 	bl	80043cc <HAL_Delay>
	  for(uint8_t i=0 ;i<19 ;i++)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	3301      	adds	r3, #1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b12      	cmp	r3, #18
 800216c:	d9ed      	bls.n	800214a <startup+0x8a>
	  }
	}
	Log((char*)info);
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <startup+0xe0>)
 8002170:	f7ff fcfb 	bl	8001b6a <Log>
	USART_log((char*)info);
 8002174:	480a      	ldr	r0, [pc, #40]	; (80021a0 <startup+0xe0>)
 8002176:	f7ff fd09 	bl	8001b8c <USART_log>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	0800ee04 	.word	0x0800ee04
 8002188:	0800ee1c 	.word	0x0800ee1c
 800218c:	0800ee34 	.word	0x0800ee34
 8002190:	0800ee48 	.word	0x0800ee48
 8002194:	0800ee58 	.word	0x0800ee58
 8002198:	0800ee6c 	.word	0x0800ee6c
 800219c:	0800ee78 	.word	0x0800ee78
 80021a0:	0800f1c8 	.word	0x0800f1c8

080021a4 <Process_UART_Data>:
 ***********************************************                **************************************************
 ***********************************************   Usart Data   **************************************************
 ***********************************************                **************************************************
 *****************************************************************************************************************/
void Process_UART_Data(char* Data)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b093      	sub	sp, #76	; 0x4c
 80021a8:	af04      	add	r7, sp, #16
 80021aa:	6078      	str	r0, [r7, #4]
	char buffer[20];
	float p,i,d;
	int sp,time;
	NewDataLineCount=0;
 80021ac:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <Process_UART_Data+0x134>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]

	if(strstr(Data,"Angle?")!=0)
 80021b2:	494a      	ldr	r1, [pc, #296]	; (80022dc <Process_UART_Data+0x138>)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f009 fac9 	bl	800b74c <strstr>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d016      	beq.n	80021ee <Process_UART_Data+0x4a>
	{
		int16_t Angle = ((int16_t)TIM2->CNT)/4;
 80021c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da00      	bge.n	80021ce <Process_UART_Data+0x2a>
 80021cc:	3303      	adds	r3, #3
 80021ce:	109b      	asrs	r3, r3, #2
 80021d0:	863b      	strh	r3, [r7, #48]	; 0x30
	    sprintf(buffer,"Angle:%04d\r\n",Angle);
 80021d2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4941      	ldr	r1, [pc, #260]	; (80022e0 <Process_UART_Data+0x13c>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f009 fa69 	bl	800b6b4 <siprintf>
	    Log(buffer);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fcbf 	bl	8001b6a <Log>
					Status.motor = 0;
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
				}
		}
	}
}
 80021ec:	e06f      	b.n	80022ce <Process_UART_Data+0x12a>
	else if(strstr(Data,"zenc")!=0)
 80021ee:	493d      	ldr	r1, [pc, #244]	; (80022e4 <Process_UART_Data+0x140>)
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f009 faab 	bl	800b74c <strstr>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <Process_UART_Data+0x62>
		TIM2->CNT = 0;
 80021fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002204:	e063      	b.n	80022ce <Process_UART_Data+0x12a>
	else if(strstr(Data,"PWM")!=0)
 8002206:	4938      	ldr	r1, [pc, #224]	; (80022e8 <Process_UART_Data+0x144>)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f009 fa9f 	bl	800b74c <strstr>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <Process_UART_Data+0x90>
		uint16_t track = atoi(strstr(Data,"PWM:")+4);
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <Process_UART_Data+0x148>)
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f009 fa98 	bl	800b74c <strstr>
 800221c:	4603      	mov	r3, r0
 800221e:	3304      	adds	r3, #4
 8002220:	4618      	mov	r0, r3
 8002222:	f008 fbdc 	bl	800a9de <atoi>
 8002226:	4603      	mov	r3, r0
 8002228:	867b      	strh	r3, [r7, #50]	; 0x32
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,track);
 800222a:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <Process_UART_Data+0x14c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002232:	e04c      	b.n	80022ce <Process_UART_Data+0x12a>
		int x = sscanf(Data,"kp%fki%fkd%fsp%dtime%d",&p,&i,&d,&sp,&time);
 8002234:	f107 0114 	add.w	r1, r7, #20
 8002238:	f107 0218 	add.w	r2, r7, #24
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	460b      	mov	r3, r1
 8002250:	4928      	ldr	r1, [pc, #160]	; (80022f4 <Process_UART_Data+0x150>)
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f009 fa4e 	bl	800b6f4 <siscanf>
 8002258:	6378      	str	r0, [r7, #52]	; 0x34
		if(x == 5)
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	2b05      	cmp	r3, #5
 800225e:	d136      	bne.n	80022ce <Process_UART_Data+0x12a>
			PID.Kp = p;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f8e0 	bl	8000428 <__aeabi_f2d>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <Process_UART_Data+0x154>)
 800226e:	e9c2 3402 	strd	r3, r4, [r2, #8]
			PID.Ki = i;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f8d7 	bl	8000428 <__aeabi_f2d>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <Process_UART_Data+0x154>)
 8002280:	e9c2 3404 	strd	r3, r4, [r2, #16]
			PID.Kd = d;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f8ce 	bl	8000428 <__aeabi_f2d>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <Process_UART_Data+0x154>)
 8002292:	e9c2 3406 	strd	r3, r4, [r2, #24]
			PID.SetPoint = sp;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b25a      	sxtb	r2, r3
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <Process_UART_Data+0x154>)
 800229c:	701a      	strb	r2, [r3, #0]
			if(time == 555) Status.motor = 1;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f240 222b 	movw	r2, #555	; 0x22b
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d104      	bne.n	80022b2 <Process_UART_Data+0x10e>
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <Process_UART_Data+0x158>)
 80022aa:	7813      	ldrb	r3, [r2, #0]
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	7013      	strb	r3, [r2, #0]
			if(time == 444)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80022b8:	d109      	bne.n	80022ce <Process_UART_Data+0x12a>
					Status.motor = 0;
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <Process_UART_Data+0x158>)
 80022bc:	7813      	ldrb	r3, [r2, #0]
 80022be:	f36f 0300 	bfc	r3, #0, #1
 80022c2:	7013      	strb	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <Process_UART_Data+0x14c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f640 42c8 	movw	r2, #3272	; 0xcc8
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022ce:	bf00      	nop
 80022d0:	373c      	adds	r7, #60	; 0x3c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000038e 	.word	0x2000038e
 80022dc:	0800ee7c 	.word	0x0800ee7c
 80022e0:	0800ee84 	.word	0x0800ee84
 80022e4:	0800ee94 	.word	0x0800ee94
 80022e8:	0800ee9c 	.word	0x0800ee9c
 80022ec:	0800eea0 	.word	0x0800eea0
 80022f0:	200009b8 	.word	0x200009b8
 80022f4:	0800eea8 	.word	0x0800eea8
 80022f8:	20000000 	.word	0x20000000
 80022fc:	200009f8 	.word	0x200009f8

08002300 <Verify_Unique>:
 ***********************************************                **************************************************
 ***********************************************  VerifyUnique  **************************************************
 ***********************************************                **************************************************
 *****************************************************************************************************************/
void Verify_Unique(void)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ERROR[13] = {75,111,115,32,78,97,78,97,116,32,58,41,0};
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <Verify_Unique+0xa8>)
 8002308:	f107 0418 	add.w	r4, r7, #24
 800230c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800230e:	c407      	stmia	r4!, {r0, r1, r2}
 8002310:	7023      	strb	r3, [r4, #0]

	uint32_t unique_id1[3] = {0X44EDD34, 0X350E3756, 0X2202021E};
 8002312:	4a26      	ldr	r2, [pc, #152]	; (80023ac <Verify_Unique+0xac>)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	ca07      	ldmia	r2, {r0, r1, r2}
 800231a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t unique_id2[3] = {0x21A2203, 0xfd2a18f7, 0x21013535};
 800231e:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <Verify_Unique+0xb0>)
 8002320:	463b      	mov	r3, r7
 8002322:	ca07      	ldmia	r2, {r0, r1, r2}
 8002324:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		unique_id2[i] = unique_id[i] - unique_id1[i];
	}
*/
/********************** GET ID **********************/

	for(i=0 ; i<3 ;i++)
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800232e:	e033      	b.n	8002398 <Verify_Unique+0x98>
	{
		if((uint32_t)(unique_id1[i]+unique_id2[i]) != *(__IO uint32_t*)(UID_BASE+i*4))
 8002330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800233a:	4413      	add	r3, r2
 800233c:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8002340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800234a:	440b      	add	r3, r1
 800234c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002350:	441a      	add	r2, r3
 8002352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800235c:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d013      	beq.n	800238e <Verify_Unique+0x8e>
		{
		  while(1)
		  {
			  lcd_gotoxy(4, 2);
 8002366:	2102      	movs	r1, #2
 8002368:	2004      	movs	r0, #4
 800236a:	f7ff fb39 	bl	80019e0 <lcd_gotoxy>
			  lcd_puts((char*)ERROR);
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fb06 	bl	8001984 <lcd_puts>
			  HAL_Delay(1000);
 8002378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237c:	f002 f826 	bl	80043cc <HAL_Delay>
			  lcd_clear();
 8002380:	f7ff faf0 	bl	8001964 <lcd_clear>
			  HAL_Delay(500);
 8002384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002388:	f002 f820 	bl	80043cc <HAL_Delay>
			  lcd_gotoxy(4, 2);
 800238c:	e7eb      	b.n	8002366 <Verify_Unique+0x66>
	for(i=0 ; i<3 ;i++)
 800238e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002392:	3301      	adds	r3, #1
 8002394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800239c:	2b02      	cmp	r3, #2
 800239e:	d9c7      	bls.n	8002330 <Verify_Unique+0x30>
		  }
		}
	}
}
 80023a0:	bf00      	nop
 80023a2:	372c      	adds	r7, #44	; 0x2c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	0800eec0 	.word	0x0800eec0
 80023ac:	0800eed0 	.word	0x0800eed0
 80023b0:	0800eedc 	.word	0x0800eedc

080023b4 <GET_KEY>:
 ***********************************************               **************************************************
 ***********************************************  Read KeyPad  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
char GET_KEY(void)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
	unsigned char Num=16;
 80023ba:	2310      	movs	r3, #16
 80023bc:	75fb      	strb	r3, [r7, #23]
    char code[17]={ 1, 2, 3, 10,
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <GET_KEY+0x128>)
 80023c0:	1d3c      	adds	r4, r7, #4
 80023c2:	461d      	mov	r5, r3
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	7023      	strb	r3, [r4, #0]
                    4, 5, 6, 11,
                    7, 8, 9, 12,
                   15, 0,14, 13, 16};

    GPIOA->CRL = 0x88888888;
 80023cc:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <GET_KEY+0x12c>)
 80023ce:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80023d2:	601a      	str	r2, [r3, #0]
    GPIOA->ODR |= 0xFF;
 80023d4:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <GET_KEY+0x12c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <GET_KEY+0x12c>)
 80023da:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80023de:	60d3      	str	r3, [r2, #12]

    for(char i=0;i<4;i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	75bb      	strb	r3, [r7, #22]
 80023e4:	e06d      	b.n	80024c2 <GET_KEY+0x10e>
    {
    	GPIOA->ODR &= ~(0x0001<<i);				//Pin reset (0)
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <GET_KEY+0x12c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	7dba      	ldrb	r2, [r7, #22]
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	43d2      	mvns	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <GET_KEY+0x12c>)
 80023f8:	400b      	ands	r3, r1
 80023fa:	60d3      	str	r3, [r2, #12]
        GPIOA->CRL &= ~(0x0000000f << (i*4));
 80023fc:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <GET_KEY+0x12c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	7dba      	ldrb	r2, [r7, #22]
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	210f      	movs	r1, #15
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	43d2      	mvns	r2, r2
 800240c:	4611      	mov	r1, r2
 800240e:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <GET_KEY+0x12c>)
 8002410:	400b      	ands	r3, r1
 8002412:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |=  (0x00000002 << (i*4));	//Pin output
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <GET_KEY+0x12c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	7dba      	ldrb	r2, [r7, #22]
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	2102      	movs	r1, #2
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <GET_KEY+0x12c>)
 8002426:	430b      	orrs	r3, r1
 8002428:	6013      	str	r3, [r2, #0]

        HAL_Delay(2);
 800242a:	2002      	movs	r0, #2
 800242c:	f001 ffce 	bl	80043cc <HAL_Delay>

        if(((GPIOA->IDR & 0x000000FF) & 0xF0)!=0xF0)
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <GET_KEY+0x12c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	2bf0      	cmp	r3, #240	; 0xf0
 800243a:	d01e      	beq.n	800247a <GET_KEY+0xc6>
        {
        	for(char x=0;x<4;x++)
 800243c:	2300      	movs	r3, #0
 800243e:	757b      	strb	r3, [r7, #21]
 8002440:	e018      	b.n	8002474 <GET_KEY+0xc0>
        	{
        		if(((GPIOA->IDR & 0x000000FF) & 1<<(4+x)) != 1<<(4+x)) Num = i*4+x;
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <GET_KEY+0x12c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	7d7a      	ldrb	r2, [r7, #21]
 8002448:	3204      	adds	r2, #4
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	b2db      	uxtb	r3, r3
 8002454:	7d7a      	ldrb	r2, [r7, #21]
 8002456:	3204      	adds	r2, #4
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4293      	cmp	r3, r2
 8002460:	d005      	beq.n	800246e <GET_KEY+0xba>
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	b2da      	uxtb	r2, r3
 8002468:	7d7b      	ldrb	r3, [r7, #21]
 800246a:	4413      	add	r3, r2
 800246c:	75fb      	strb	r3, [r7, #23]
        	for(char x=0;x<4;x++)
 800246e:	7d7b      	ldrb	r3, [r7, #21]
 8002470:	3301      	adds	r3, #1
 8002472:	757b      	strb	r3, [r7, #21]
 8002474:	7d7b      	ldrb	r3, [r7, #21]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d9e3      	bls.n	8002442 <GET_KEY+0x8e>
        	}
        }

        GPIOA->CRL &= ~(0x0000000f << (i*4));
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <GET_KEY+0x12c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	7dba      	ldrb	r2, [r7, #22]
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	210f      	movs	r1, #15
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	43d2      	mvns	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <GET_KEY+0x12c>)
 800248e:	400b      	ands	r3, r1
 8002490:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |=  (0x00000008 << (i*4));	//Pin input
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <GET_KEY+0x12c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	7dba      	ldrb	r2, [r7, #22]
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	2108      	movs	r1, #8
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <GET_KEY+0x12c>)
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6013      	str	r3, [r2, #0]
        GPIOA->ODR |=  (0x0001<<i);				//Pin set (1)
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <GET_KEY+0x12c>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	7dba      	ldrb	r2, [r7, #22]
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <GET_KEY+0x12c>)
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]
    for(char i=0;i<4;i++)
 80024bc:	7dbb      	ldrb	r3, [r7, #22]
 80024be:	3301      	adds	r3, #1
 80024c0:	75bb      	strb	r3, [r7, #22]
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d98e      	bls.n	80023e6 <GET_KEY+0x32>
    }
    return code[Num];
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	f107 0218 	add.w	r2, r7, #24
 80024ce:	4413      	add	r3, r2
 80024d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	0800eee8 	.word	0x0800eee8
 80024e0:	40010800 	.word	0x40010800

080024e4 <Matlab>:
 ***********************************************               **************************************************
 ***********************************************  Matlab Mode  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void Matlab(void)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
	union u_type{
		double pid_exit;
		uint8_t u[8];
	}var;

	Status.motor=1;
 80024ea:	4a88      	ldr	r2, [pc, #544]	; (800270c <Matlab+0x228>)
 80024ec:	7813      	ldrb	r3, [r2, #0]
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	7013      	strb	r3, [r2, #0]
	Status.matlab=1;
 80024f4:	4a85      	ldr	r2, [pc, #532]	; (800270c <Matlab+0x228>)
 80024f6:	7813      	ldrb	r3, [r2, #0]
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	7013      	strb	r3, [r2, #0]
	NewDataLineCount = 1;
 80024fe:	4b84      	ldr	r3, [pc, #528]	; (8002710 <Matlab+0x22c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]

	while(Status.whiles)
 8002504:	e0eb      	b.n	80026de <Matlab+0x1fa>
	{

	    Angle = TIM2->CNT;	//get data from encoder
 8002506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	847b      	strh	r3, [r7, #34]	; 0x22
	    Angle /= 4;			//calculation Angle
 800250e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002512:	2b00      	cmp	r3, #0
 8002514:	da00      	bge.n	8002518 <Matlab+0x34>
 8002516:	3303      	adds	r3, #3
 8002518:	109b      	asrs	r3, r3, #2
 800251a:	847b      	strh	r3, [r7, #34]	; 0x22

		if(NewDataLineCount != 0)	//wait for new data
 800251c:	4b7c      	ldr	r3, [pc, #496]	; (8002710 <Matlab+0x22c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d063      	beq.n	80025ec <Matlab+0x108>
		{
			if(strstr(RXBuffer,"Angle?")!=0)
 8002524:	497b      	ldr	r1, [pc, #492]	; (8002714 <Matlab+0x230>)
 8002526:	487c      	ldr	r0, [pc, #496]	; (8002718 <Matlab+0x234>)
 8002528:	f009 f910 	bl	800b74c <strstr>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <Matlab+0x6c>
			{
				sprintf((char*)Buffer,"%04d\r\n",(int8_t)Angle);
 8002532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002534:	b25b      	sxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4977      	ldr	r1, [pc, #476]	; (800271c <Matlab+0x238>)
 800253e:	4618      	mov	r0, r3
 8002540:	f009 f8b8 	bl	800b6b4 <siprintf>
				Log((char*)Buffer);
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb0e 	bl	8001b6a <Log>
 800254e:	e04a      	b.n	80025e6 <Matlab+0x102>
			}
			else
			{
				var.u[0] = RXBuffer[0];
 8002550:	4b71      	ldr	r3, [pc, #452]	; (8002718 <Matlab+0x234>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	703b      	strb	r3, [r7, #0]
				var.u[1] = RXBuffer[1];
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <Matlab+0x234>)
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	707b      	strb	r3, [r7, #1]
				var.u[2] = RXBuffer[2];
 800255c:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <Matlab+0x234>)
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	70bb      	strb	r3, [r7, #2]
				var.u[3] = RXBuffer[3];
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <Matlab+0x234>)
 8002564:	78db      	ldrb	r3, [r3, #3]
 8002566:	70fb      	strb	r3, [r7, #3]
				var.u[4] = RXBuffer[4];
 8002568:	4b6b      	ldr	r3, [pc, #428]	; (8002718 <Matlab+0x234>)
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	713b      	strb	r3, [r7, #4]
				var.u[5] = RXBuffer[5];
 800256e:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <Matlab+0x234>)
 8002570:	795b      	ldrb	r3, [r3, #5]
 8002572:	717b      	strb	r3, [r7, #5]
				var.u[6] = RXBuffer[6];
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <Matlab+0x234>)
 8002576:	799b      	ldrb	r3, [r3, #6]
 8002578:	71bb      	strb	r3, [r7, #6]
				var.u[7] = RXBuffer[7];	//change received data to int16_t
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <Matlab+0x234>)
 800257c:	79db      	ldrb	r3, [r3, #7]
 800257e:	71fb      	strb	r3, [r7, #7]

				pwm = var.pid_exit + Min_Throttle;	//calculation PWM
 8002580:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002584:	4b66      	ldr	r3, [pc, #408]	; (8002720 <Matlab+0x23c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ff3b 	bl	8000404 <__aeabi_i2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd fde9 	bl	800016c <__adddf3>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	4618      	mov	r0, r3
 80025a0:	4621      	mov	r1, r4
 80025a2:	f7fe fa49 	bl	8000a38 <__aeabi_d2iz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	84fb      	strh	r3, [r7, #38]	; 0x26

				if(pwm > Max_Throttle) pwm = Max_Throttle;	//Limit Maximum pulse
 80025aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80025ae:	4a5d      	ldr	r2, [pc, #372]	; (8002724 <Matlab+0x240>)
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	4293      	cmp	r3, r2
 80025b4:	dd02      	ble.n	80025bc <Matlab+0xd8>
 80025b6:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <Matlab+0x240>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(pwm < Min_Throttle) pwm = Min_Throttle;	//Limit Minimum pulse
 80025bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <Matlab+0x23c>)
 80025c2:	8812      	ldrh	r2, [r2, #0]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	da02      	bge.n	80025ce <Matlab+0xea>
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <Matlab+0x23c>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(Status.motor) __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm);
 80025ce:	4b4f      	ldr	r3, [pc, #316]	; (800270c <Matlab+0x228>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <Matlab+0x102>
 80025dc:	4b52      	ldr	r3, [pc, #328]	; (8002728 <Matlab+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
			}

			NewDataLineCount = 0;		//clear flag
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <Matlab+0x22c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
		}

		sprintf((char*)Buffer,"Angle= %d  ",(int8_t)Angle);
 80025ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	494d      	ldr	r1, [pc, #308]	; (800272c <Matlab+0x248>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f009 f85b 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,0,(char*)Buffer);
 80025fe:	2100      	movs	r1, #0
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff f9ed 	bl	80019e0 <lcd_gotoxy>
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9ba 	bl	8001984 <lcd_puts>

		darsad = (((pwm-Min_Real_Throttle)*100)/(Max_Real_Throttle - Min_Real_Throttle));
 8002610:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002614:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4a44      	ldr	r2, [pc, #272]	; (8002730 <Matlab+0x24c>)
 8002620:	fb82 1203 	smull	r1, r2, r2, r3
 8002624:	1292      	asrs	r2, r2, #10
 8002626:	17db      	asrs	r3, r3, #31
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	843b      	strh	r3, [r7, #32]
		sprintf((char*)Buffer,"Puls=%%%03d ",darsad);
 800262c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	493f      	ldr	r1, [pc, #252]	; (8002734 <Matlab+0x250>)
 8002636:	4618      	mov	r0, r3
 8002638:	f009 f83c 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,2,(char*)Buffer);
 800263c:	2102      	movs	r1, #2
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff f9ce 	bl	80019e0 <lcd_gotoxy>
 8002644:	f107 0308 	add.w	r3, r7, #8
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f99b 	bl	8001984 <lcd_puts>


		Num = GET_KEY();
 800264e:	f7ff feb1 	bl	80023b4 <GET_KEY>
 8002652:	4603      	mov	r3, r0
 8002654:	77fb      	strb	r3, [r7, #31]
		if(Num != Prev_Num)
 8002656:	7ffa      	ldrb	r2, [r7, #31]
 8002658:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800265c:	429a      	cmp	r2, r3
 800265e:	d023      	beq.n	80026a8 <Matlab+0x1c4>
		{
			switch (Num)
 8002660:	7ffb      	ldrb	r3, [r7, #31]
 8002662:	2b0a      	cmp	r3, #10
 8002664:	d00f      	beq.n	8002686 <Matlab+0x1a2>
 8002666:	2b0d      	cmp	r3, #13
 8002668:	d002      	beq.n	8002670 <Matlab+0x18c>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <Matlab+0x198>
 800266e:	e018      	b.n	80026a2 <Matlab+0x1be>
			{
				case exit:
					Status.whiles=0;
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <Matlab+0x228>)
 8002672:	7813      	ldrb	r3, [r2, #0]
 8002674:	f36f 0382 	bfc	r3, #2, #1
 8002678:	7013      	strb	r3, [r2, #0]
					break;
 800267a:	e012      	b.n	80026a2 <Matlab+0x1be>
				case 0:
					TIM2->CNT = 0;
 800267c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8002684:	e00d      	b.n	80026a2 <Matlab+0x1be>
				case cls:
					Status.motor ^= 1;
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <Matlab+0x228>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2d9      	uxtb	r1, r3
 8002696:	4a1d      	ldr	r2, [pc, #116]	; (800270c <Matlab+0x228>)
 8002698:	7813      	ldrb	r3, [r2, #0]
 800269a:	f361 0300 	bfi	r3, r1, #0, #1
 800269e:	7013      	strb	r3, [r2, #0]
					break;
 80026a0:	bf00      	nop
			}
			Prev_Num = Num;
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
 80026a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		if(!Status.motor)
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <Matlab+0x228>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <Matlab+0x1ec>
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <Matlab+0x244>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f640 42c8 	movw	r2, #3272	; 0xcc8
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
			lcd_puts_XY(11,2,"Motor OFF");
 80026c0:	2102      	movs	r1, #2
 80026c2:	200b      	movs	r0, #11
 80026c4:	f7ff f98c 	bl	80019e0 <lcd_gotoxy>
 80026c8:	481b      	ldr	r0, [pc, #108]	; (8002738 <Matlab+0x254>)
 80026ca:	f7ff f95b 	bl	8001984 <lcd_puts>
 80026ce:	e006      	b.n	80026de <Matlab+0x1fa>
		}
		else lcd_puts_XY(11,2,"Motor ON ");
 80026d0:	2102      	movs	r1, #2
 80026d2:	200b      	movs	r0, #11
 80026d4:	f7ff f984 	bl	80019e0 <lcd_gotoxy>
 80026d8:	4818      	ldr	r0, [pc, #96]	; (800273c <Matlab+0x258>)
 80026da:	f7ff f953 	bl	8001984 <lcd_puts>
	while(Status.whiles)
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <Matlab+0x228>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f af0c 	bne.w	8002506 <Matlab+0x22>
	}
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <Matlab+0x244>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f640 42c8 	movw	r2, #3272	; 0xcc8
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
	Status.matlab=0;
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <Matlab+0x228>)
 80026fa:	7813      	ldrb	r3, [r2, #0]
 80026fc:	f36f 0341 	bfc	r3, #1, #1
 8002700:	7013      	strb	r3, [r2, #0]
}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	bf00      	nop
 800270c:	200009f8 	.word	0x200009f8
 8002710:	2000038e 	.word	0x2000038e
 8002714:	0800ee7c 	.word	0x0800ee7c
 8002718:	20000a40 	.word	0x20000a40
 800271c:	0800eefc 	.word	0x0800eefc
 8002720:	20000a94 	.word	0x20000a94
 8002724:	200005cc 	.word	0x200005cc
 8002728:	200009b8 	.word	0x200009b8
 800272c:	0800ef04 	.word	0x0800ef04
 8002730:	501183d5 	.word	0x501183d5
 8002734:	0800ef10 	.word	0x0800ef10
 8002738:	0800ef20 	.word	0x0800ef20
 800273c:	0800ef2c 	.word	0x0800ef2c

08002740 <KeyPad>:
 ***********************************************               **************************************************
 ***********************************************  KeyPad Mode  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void KeyPad(void)
{
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 8002746:	af02      	add	r7, sp, #8
	double Error=0, Previous_error=0;
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f04f 0400 	mov.w	r4, #0
 8002750:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8002754:	e9c2 3400 	strd	r3, r4, [r2]
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	f04f 0400 	mov.w	r4, #0
 8002760:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002764:	e9c2 3400 	strd	r3, r4, [r2]
	double p_term=0, d_term=0, i_term=0, dt=0;
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	f04f 0400 	mov.w	r4, #0
 8002770:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002774:	e9c2 3400 	strd	r3, r4, [r2]
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	f04f 0400 	mov.w	r4, #0
 8002780:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002784:	e9c2 3400 	strd	r3, r4, [r2]
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002794:	e9c2 3400 	strd	r3, r4, [r2]
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80027a4:	e9c2 3400 	strd	r3, r4, [r2]

	int16_t Value=0, PWM=0, Angle=0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e
	uint32_t online_time,timePrev, TickStart = HAL_GetTick();
 80027ba:	f001 fdfd 	bl	80043b8 <HAL_GetTick>
 80027be:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
	uint16_t darsad;

	char Num, Prev_Num=ok;
 80027c2:	230e      	movs	r3, #14
 80027c4:	f887 335b 	strb.w	r3, [r7, #859]	; 0x35b
	uint8_t Buffer[21],i;
	int16_t angle_send[200];
	uint16_t time_send[200];

	Status.motor = 0;
 80027c8:	4aaf      	ldr	r2, [pc, #700]	; (8002a88 <KeyPad+0x348>)
 80027ca:	7813      	ldrb	r3, [r2, #0]
 80027cc:	f36f 0300 	bfc	r3, #0, #1
 80027d0:	7013      	strb	r3, [r2, #0]
	throttle =  Max_Throttle - Min_Throttle;
 80027d2:	4bae      	ldr	r3, [pc, #696]	; (8002a8c <KeyPad+0x34c>)
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	4bae      	ldr	r3, [pc, #696]	; (8002a90 <KeyPad+0x350>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4bad      	ldr	r3, [pc, #692]	; (8002a94 <KeyPad+0x354>)
 80027e0:	801a      	strh	r2, [r3, #0]

	while(Status.whiles)
 80027e2:	e380      	b.n	8002ee6 <KeyPad+0x7a6>
	{
		Num = GET_KEY();
 80027e4:	f7ff fde6 	bl	80023b4 <GET_KEY>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 333d 	strb.w	r3, [r7, #829]	; 0x33d
		if(Num != Prev_Num)
 80027ee:	f897 233d 	ldrb.w	r2, [r7, #829]	; 0x33d
 80027f2:	f897 335b 	ldrb.w	r3, [r7, #859]	; 0x35b
 80027f6:	429a      	cmp	r2, r3
 80027f8:	f000 8097 	beq.w	800292a <KeyPad+0x1ea>
		{
			switch (Num)
 80027fc:	f897 333d 	ldrb.w	r3, [r7, #829]	; 0x33d
 8002800:	2b0e      	cmp	r3, #14
 8002802:	f200 8086 	bhi.w	8002912 <KeyPad+0x1d2>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <KeyPad+0xcc>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	08002855 	.word	0x08002855
 8002810:	08002913 	.word	0x08002913
 8002814:	08002913 	.word	0x08002913
 8002818:	08002913 	.word	0x08002913
 800281c:	08002913 	.word	0x08002913
 8002820:	08002913 	.word	0x08002913
 8002824:	08002913 	.word	0x08002913
 8002828:	08002913 	.word	0x08002913
 800282c:	08002913 	.word	0x08002913
 8002830:	08002913 	.word	0x08002913
 8002834:	080028c1 	.word	0x080028c1
 8002838:	0800285f 	.word	0x0800285f
 800283c:	08002873 	.word	0x08002873
 8002840:	08002849 	.word	0x08002849
 8002844:	08002887 	.word	0x08002887
			{
				case exit:
					Status.whiles=0;
 8002848:	4a8f      	ldr	r2, [pc, #572]	; (8002a88 <KeyPad+0x348>)
 800284a:	7813      	ldrb	r3, [r2, #0]
 800284c:	f36f 0382 	bfc	r3, #2, #1
 8002850:	7013      	strb	r3, [r2, #0]
					break;
 8002852:	e05e      	b.n	8002912 <KeyPad+0x1d2>
				case 0:
					TIM2->CNT = 0;
 8002854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 800285c:	e059      	b.n	8002912 <KeyPad+0x1d2>
				case up:
					PID.SetPoint++;
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <KeyPad+0x358>)
 8002860:	f993 3000 	ldrsb.w	r3, [r3]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	3301      	adds	r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	b25a      	sxtb	r2, r3
 800286c:	4b8a      	ldr	r3, [pc, #552]	; (8002a98 <KeyPad+0x358>)
 800286e:	701a      	strb	r2, [r3, #0]
					break;
 8002870:	e04f      	b.n	8002912 <KeyPad+0x1d2>
				case down:
					PID.SetPoint--;
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <KeyPad+0x358>)
 8002874:	f993 3000 	ldrsb.w	r3, [r3]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	b25a      	sxtb	r2, r3
 8002880:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <KeyPad+0x358>)
 8002882:	701a      	strb	r2, [r3, #0]
					break;
 8002884:	e045      	b.n	8002912 <KeyPad+0x1d2>
				case ok:
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <KeyPad+0x35c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f640 42c8 	movw	r2, #3272	; 0xcc8
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
					Status.motor = 0;i_term=0;d_term=0;
 8002890:	4a7d      	ldr	r2, [pc, #500]	; (8002a88 <KeyPad+0x348>)
 8002892:	7813      	ldrb	r3, [r2, #0]
 8002894:	f36f 0300 	bfc	r3, #0, #1
 8002898:	7013      	strb	r3, [r2, #0]
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f04f 0400 	mov.w	r4, #0
 80028a2:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80028a6:	e9c2 3400 	strd	r3, r4, [r2]
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f04f 0400 	mov.w	r4, #0
 80028b2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80028b6:	e9c2 3400 	strd	r3, r4, [r2]
					PID_setting();
 80028ba:	f000 ff69 	bl	8003790 <PID_setting>
					break;
 80028be:	e028      	b.n	8002912 <KeyPad+0x1d2>
				case cls:
					Status.motor ^= 1;
 80028c0:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <KeyPad+0x348>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2d9      	uxtb	r1, r3
 80028d0:	4a6d      	ldr	r2, [pc, #436]	; (8002a88 <KeyPad+0x348>)
 80028d2:	7813      	ldrb	r3, [r2, #0]
 80028d4:	f361 0300 	bfi	r3, r1, #0, #1
 80028d8:	7013      	strb	r3, [r2, #0]
					if(Status.motor == 0)
 80028da:	4b6b      	ldr	r3, [pc, #428]	; (8002a88 <KeyPad+0x348>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <KeyPad+0x1c8>
					{
						if(Status.Online)
 80028e8:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <KeyPad+0x348>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <KeyPad+0x1c8>
						{
							HAL_UART_Transmit(&huart1,(uint8_t*) "D", 1, 20);
 80028f6:	2314      	movs	r3, #20
 80028f8:	2201      	movs	r2, #1
 80028fa:	4969      	ldr	r1, [pc, #420]	; (8002aa0 <KeyPad+0x360>)
 80028fc:	4869      	ldr	r0, [pc, #420]	; (8002aa4 <KeyPad+0x364>)
 80028fe:	f004 faa4 	bl	8006e4a <HAL_UART_Transmit>
							PID.time = 0;
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <KeyPad+0x358>)
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
						}
					}
					TickStart = HAL_GetTick();
 8002908:	f001 fd56 	bl	80043b8 <HAL_GetTick>
 800290c:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
					break;
 8002910:	bf00      	nop
			}
			if(Num == ok)Prev_Num = exit;
 8002912:	f897 333d 	ldrb.w	r3, [r7, #829]	; 0x33d
 8002916:	2b0e      	cmp	r3, #14
 8002918:	d103      	bne.n	8002922 <KeyPad+0x1e2>
 800291a:	230d      	movs	r3, #13
 800291c:	f887 335b 	strb.w	r3, [r7, #859]	; 0x35b
 8002920:	e003      	b.n	800292a <KeyPad+0x1ea>
			else Prev_Num = Num;
 8002922:	f897 333d 	ldrb.w	r3, [r7, #829]	; 0x33d
 8002926:	f887 335b 	strb.w	r3, [r7, #859]	; 0x35b
		}

	    Angle = ((int16_t)TIM2->CNT)/4;
 800292a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b21b      	sxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	da00      	bge.n	8002938 <KeyPad+0x1f8>
 8002936:	3303      	adds	r3, #3
 8002938:	109b      	asrs	r3, r3, #2
 800293a:	f8a7 333e 	strh.w	r3, [r7, #830]	; 0x33e

		if(Status.Online)
 800293e:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <KeyPad+0x348>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01d      	beq.n	8002988 <KeyPad+0x248>
		{
			if(UsartNewDataLineCount!=0)
 800294c:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <KeyPad+0x368>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d019      	beq.n	8002988 <KeyPad+0x248>
			{
				USART_Process_Data();
 8002954:	f001 f9d8 	bl	8003d08 <USART_Process_Data>
				if(Status.get_data==0)
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <KeyPad+0x348>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d110      	bne.n	8002988 <KeyPad+0x248>
				{
					Status.get_data = 1;
 8002966:	4a48      	ldr	r2, [pc, #288]	; (8002a88 <KeyPad+0x348>)
 8002968:	7813      	ldrb	r3, [r2, #0]
 800296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296e:	7013      	strb	r3, [r2, #0]
					Status.motor = 1;
 8002970:	4a45      	ldr	r2, [pc, #276]	; (8002a88 <KeyPad+0x348>)
 8002972:	7813      	ldrb	r3, [r2, #0]
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	7013      	strb	r3, [r2, #0]
					online_time = HAL_GetTick();
 800297a:	f001 fd1d 	bl	80043b8 <HAL_GetTick>
 800297e:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
					i=0;
 8002982:	2300      	movs	r3, #0
 8002984:	f887 335a 	strb.w	r3, [r7, #858]	; 0x35a
				}
			}
		}

		if(Status.motor)
 8002988:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <KeyPad+0x348>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 81ff 	beq.w	8002d96 <KeyPad+0x656>
		{
		    timePrev	=	TickStart;
 8002998:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800299c:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
		    TickStart	=	HAL_GetTick();
 80029a0:	f001 fd0a 	bl	80043b8 <HAL_GetTick>
 80029a4:	f8c7 035c 	str.w	r0, [r7, #860]	; 0x35c
		    dt			= 	((float)(TickStart - timePrev) / 1000.00);
 80029a8:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80029ac:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f98e 	bl	8000cd4 <__aeabi_ui2f>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd34 	bl	8000428 <__aeabi_f2d>
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <KeyPad+0x36c>)
 80029c6:	f7fd feb1 	bl	800072c <__aeabi_ddiv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	460c      	mov	r4, r1
 80029ce:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80029d2:	e9c2 3400 	strd	r3, r4, [r2]

			Error		=	PID.SetPoint - Angle;
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <KeyPad+0x358>)
 80029d8:	f993 3000 	ldrsb.w	r3, [r3]
 80029dc:	461a      	mov	r2, r3
 80029de:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd0d 	bl	8000404 <__aeabi_i2d>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80029f2:	e9c2 3400 	strd	r3, r4, [r2]


			if(Status.Online)
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <KeyPad+0x348>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8096 	beq.w	8002b32 <KeyPad+0x3f2>
			{
				angle_send[i] = (int16_t)Angle;
 8002a06:	f897 235a 	ldrb.w	r2, [r7, #858]	; 0x35a
 8002a0a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002a0e:	f8b7 133e 	ldrh.w	r1, [r7, #830]	; 0x33e
 8002a12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				time_send[i] = HAL_GetTick() - online_time;
 8002a16:	f001 fccf 	bl	80043b8 <HAL_GetTick>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b299      	uxth	r1, r3
 8002a1e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f897 235a 	ldrb.w	r2, [r7, #858]	; 0x35a
 8002a28:	1acb      	subs	r3, r1, r3
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if(time_send[i] >= PID.time*1000)
 8002a32:	f897 235a 	ldrb.w	r2, [r7, #858]	; 0x35a
 8002a36:	463b      	mov	r3, r7
 8002a38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <KeyPad+0x358>)
 8002a40:	785b      	ldrb	r3, [r3, #1]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a48:	fb03 f301 	mul.w	r3, r3, r1
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	db07      	blt.n	8002a60 <KeyPad+0x320>
				{
					Status.motor = 0;
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <KeyPad+0x348>)
 8002a52:	7813      	ldrb	r3, [r2, #0]
 8002a54:	f36f 0300 	bfc	r3, #0, #1
 8002a58:	7013      	strb	r3, [r2, #0]
					PID.time = 0;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <KeyPad+0x358>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	705a      	strb	r2, [r3, #1]
				}

				i++;
 8002a60:	f897 335a 	ldrb.w	r3, [r7, #858]	; 0x35a
 8002a64:	3301      	adds	r3, #1
 8002a66:	f887 335a 	strb.w	r3, [r7, #858]	; 0x35a
				if(i >= tedad_ersal || Status.motor == 0)
 8002a6a:	f897 335a 	ldrb.w	r3, [r7, #858]	; 0x35a
 8002a6e:	2b4a      	cmp	r3, #74	; 0x4a
 8002a70:	d806      	bhi.n	8002a80 <KeyPad+0x340>
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <KeyPad+0x348>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d158      	bne.n	8002b32 <KeyPad+0x3f2>
				{
					for(uint8_t x=0 ; x<i ; x++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3359 	strb.w	r3, [r7, #857]	; 0x359
 8002a86:	e037      	b.n	8002af8 <KeyPad+0x3b8>
 8002a88:	200009f8 	.word	0x200009f8
 8002a8c:	200005cc 	.word	0x200005cc
 8002a90:	20000a94 	.word	0x20000a94
 8002a94:	200009fa 	.word	0x200009fa
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	200009b8 	.word	0x200009b8
 8002aa0:	0800ef38 	.word	0x0800ef38
 8002aa4:	20000a00 	.word	0x20000a00
 8002aa8:	2000038f 	.word	0x2000038f
 8002aac:	408f4000 	.word	0x408f4000
					{
						sprintf((char*)Buffer,"%d@%d,",angle_send[x],(uint16_t)time_send[x]);
 8002ab0:	f897 2359 	ldrb.w	r2, [r7, #857]	; 0x359
 8002ab4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002ab8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f897 2359 	ldrb.w	r2, [r7, #857]	; 0x359
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ac8:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8002acc:	460a      	mov	r2, r1
 8002ace:	49b9      	ldr	r1, [pc, #740]	; (8002db4 <KeyPad+0x674>)
 8002ad0:	f008 fdf0 	bl	800b6b4 <siprintf>
						HAL_UART_Transmit(&huart1,(uint8_t*)Buffer, strlen((char*)Buffer), 50);
 8002ad4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fb39 	bl	8000150 <strlen>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8002ae6:	2332      	movs	r3, #50	; 0x32
 8002ae8:	48b3      	ldr	r0, [pc, #716]	; (8002db8 <KeyPad+0x678>)
 8002aea:	f004 f9ae 	bl	8006e4a <HAL_UART_Transmit>
					for(uint8_t x=0 ; x<i ; x++)
 8002aee:	f897 3359 	ldrb.w	r3, [r7, #857]	; 0x359
 8002af2:	3301      	adds	r3, #1
 8002af4:	f887 3359 	strb.w	r3, [r7, #857]	; 0x359
 8002af8:	f897 2359 	ldrb.w	r2, [r7, #857]	; 0x359
 8002afc:	f897 335a 	ldrb.w	r3, [r7, #858]	; 0x35a
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3d5      	bcc.n	8002ab0 <KeyPad+0x370>
					}
					if(Status.motor == 0)HAL_UART_Transmit(&huart1,(uint8_t*) "D", 1, 20);
 8002b04:	4bad      	ldr	r3, [pc, #692]	; (8002dbc <KeyPad+0x67c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <KeyPad+0x3e0>
 8002b12:	2314      	movs	r3, #20
 8002b14:	2201      	movs	r2, #1
 8002b16:	49aa      	ldr	r1, [pc, #680]	; (8002dc0 <KeyPad+0x680>)
 8002b18:	48a7      	ldr	r0, [pc, #668]	; (8002db8 <KeyPad+0x678>)
 8002b1a:	f004 f996 	bl	8006e4a <HAL_UART_Transmit>
 8002b1e:	e005      	b.n	8002b2c <KeyPad+0x3ec>
					else HAL_UART_Transmit(&huart1,(uint8_t*) "E", 1, 20);
 8002b20:	2314      	movs	r3, #20
 8002b22:	2201      	movs	r2, #1
 8002b24:	49a7      	ldr	r1, [pc, #668]	; (8002dc4 <KeyPad+0x684>)
 8002b26:	48a4      	ldr	r0, [pc, #656]	; (8002db8 <KeyPad+0x678>)
 8002b28:	f004 f98f 	bl	8006e4a <HAL_UART_Transmit>
					i=0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 335a 	strb.w	r3, [r7, #858]	; 0x35a
			}




			p_term = PID.Kp * Error;
 8002b32:	4ba5      	ldr	r3, [pc, #660]	; (8002dc8 <KeyPad+0x688>)
 8002b34:	f103 0408 	add.w	r4, r3, #8
 8002b38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8002b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b48:	f7fd fcc6 	bl	80004d8 <__aeabi_dmul>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002b54:	e9c2 3400 	strd	r3, r4, [r2]

			i_term		=	(PID.Ki * (Error + Previous_error) * dt / 2) + i_term ;
 8002b58:	4b9b      	ldr	r3, [pc, #620]	; (8002dc8 <KeyPad+0x688>)
 8002b5a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002b5e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8002b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b6e:	f7fd fafd 	bl	800016c <__adddf3>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd fcad 	bl	80004d8 <__aeabi_dmul>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460c      	mov	r4, r1
 8002b82:	4618      	mov	r0, r3
 8002b84:	4621      	mov	r1, r4
 8002b86:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fca3 	bl	80004d8 <__aeabi_dmul>
 8002b92:	4603      	mov	r3, r0
 8002b94:	460c      	mov	r4, r1
 8002b96:	4618      	mov	r0, r3
 8002b98:	4621      	mov	r1, r4
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba2:	f7fd fdc3 	bl	800072c <__aeabi_ddiv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	461a      	mov	r2, r3
 8002bac:	4623      	mov	r3, r4
 8002bae:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb6:	f7fd fad9 	bl	800016c <__adddf3>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002bc2:	e9c2 3400 	strd	r3, r4, [r2]
			if(i_term > throttle) i_term = throttle;
 8002bc6:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <KeyPad+0x68c>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc1a 	bl	8000404 <__aeabi_i2d>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002be0:	f7fd ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <KeyPad+0x4c0>
 8002bea:	4b78      	ldr	r3, [pc, #480]	; (8002dcc <KeyPad+0x68c>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fbf8 	bl	80003e4 <__aeabi_ui2d>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002bfc:	e9c2 3400 	strd	r3, r4, [r2]
			if(i_term <-throttle) i_term = -throttle;
 8002c00:	4b72      	ldr	r3, [pc, #456]	; (8002dcc <KeyPad+0x68c>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	425b      	negs	r3, r3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fbfc 	bl	8000404 <__aeabi_i2d>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c1c:	f7fd fece 	bl	80009bc <__aeabi_dcmplt>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <KeyPad+0x4fe>
 8002c26:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <KeyPad+0x68c>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	425b      	negs	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fbe9 	bl	8000404 <__aeabi_i2d>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002c3a:	e9c2 3400 	strd	r3, r4, [r2]

            /*N 			=	(1.0 / dt) * 0.9 ;
            filter		+=	dt * d_term;
            d_term 		= 	(PID.Kd * Error - filter) * N;*/

			d_term = (Error - Previous_error) / dt * PID.Kd;
 8002c3e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8002c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c4e:	f7fd fa8b 	bl	8000168 <__aeabi_dsub>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	4618      	mov	r0, r3
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fd63 	bl	800072c <__aeabi_ddiv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <KeyPad+0x688>)
 8002c70:	f103 0418 	add.w	r4, r3, #24
 8002c74:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	f7fd fc2c 	bl	80004d8 <__aeabi_dmul>
 8002c80:	4603      	mov	r3, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c88:	e9c2 3400 	strd	r3, r4, [r2]
            if(d_term > throttle)	d_term = throttle;
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <KeyPad+0x68c>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fbb7 	bl	8000404 <__aeabi_i2d>
 8002c96:	4603      	mov	r3, r0
 8002c98:	460c      	mov	r4, r1
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8002ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ca6:	f7fd fea7 	bl	80009f8 <__aeabi_dcmpgt>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <KeyPad+0x586>
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <KeyPad+0x68c>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fb95 	bl	80003e4 <__aeabi_ui2d>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002cc2:	e9c2 3400 	strd	r3, r4, [r2]
            if(d_term <-throttle)	d_term = -throttle;
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <KeyPad+0x68c>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	425b      	negs	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fb99 	bl	8000404 <__aeabi_i2d>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4623      	mov	r3, r4
 8002cda:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8002cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ce2:	f7fd fe6b 	bl	80009bc <__aeabi_dcmplt>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <KeyPad+0x5c4>
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <KeyPad+0x68c>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fb86 	bl	8000404 <__aeabi_i2d>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002d00:	e9c2 3400 	strd	r3, r4, [r2]

			PWM			=	(int16_t)(p_term + i_term + d_term);
 8002d04:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f507 7152 	add.w	r1, r7, #840	; 0x348
 8002d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d14:	f7fd fa2a 	bl	800016c <__adddf3>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	4621      	mov	r1, r4
 8002d20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fa20 	bl	800016c <__adddf3>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4618      	mov	r0, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	f7fd fe80 	bl	8000a38 <__aeabi_d2iz>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364

			if (PWM > throttle)	PWM = throttle;
 8002d3e:	f9b7 3364 	ldrsh.w	r3, [r7, #868]	; 0x364
 8002d42:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <KeyPad+0x68c>)
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	dd03      	ble.n	8002d52 <KeyPad+0x612>
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <KeyPad+0x68c>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364
			if (PWM < 0)		PWM = 0;
 8002d52:	f9b7 3364 	ldrsh.w	r3, [r7, #868]	; 0x364
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	da02      	bge.n	8002d60 <KeyPad+0x620>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364

			Value = PWM + Min_Throttle;
 8002d60:	f8b7 2364 	ldrh.w	r2, [r7, #868]	; 0x364
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <KeyPad+0x690>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
			if(Status.motor)__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Value);
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <KeyPad+0x67c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <KeyPad+0x648>
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <KeyPad+0x694>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f9b7 2366 	ldrsh.w	r2, [r7, #870]	; 0x366
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34

			Previous_error = Error;
 8002d88:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002d8c:	cb18      	ldmia	r3, {r3, r4}
 8002d8e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002d92:	e9c2 3400 	strd	r3, r4, [r2]
		}

		if(Status.motor) {lcd_puts_XY(11,3,"Motor ON ");}
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <KeyPad+0x67c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <KeyPad+0x69c>
 8002da4:	2103      	movs	r1, #3
 8002da6:	200b      	movs	r0, #11
 8002da8:	f7fe fe1a 	bl	80019e0 <lcd_gotoxy>
 8002dac:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <KeyPad+0x698>)
 8002dae:	f7fe fde9 	bl	8001984 <lcd_puts>
 8002db2:	e033      	b.n	8002e1c <KeyPad+0x6dc>
 8002db4:	0800ef3c 	.word	0x0800ef3c
 8002db8:	20000a00 	.word	0x20000a00
 8002dbc:	200009f8 	.word	0x200009f8
 8002dc0:	0800ef38 	.word	0x0800ef38
 8002dc4:	0800ef44 	.word	0x0800ef44
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	200009fa 	.word	0x200009fa
 8002dd0:	20000a94 	.word	0x20000a94
 8002dd4:	200009b8 	.word	0x200009b8
 8002dd8:	0800ef2c 	.word	0x0800ef2c
		else
		{
			lcd_puts_XY(11,3,"Motor OFF");
 8002ddc:	2103      	movs	r1, #3
 8002dde:	200b      	movs	r0, #11
 8002de0:	f7fe fdfe 	bl	80019e0 <lcd_gotoxy>
 8002de4:	484e      	ldr	r0, [pc, #312]	; (8002f20 <KeyPad+0x7e0>)
 8002de6:	f7fe fdcd 	bl	8001984 <lcd_puts>
			Value = Min_Real_Throttle;
 8002dea:	f640 43c8 	movw	r3, #3272	; 0xcc8
 8002dee:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
			i_term = 0;d_term=0;
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	f04f 0400 	mov.w	r4, #0
 8002dfa:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002dfe:	e9c2 3400 	strd	r3, r4, [r2]
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f04f 0400 	mov.w	r4, #0
 8002e0a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002e0e:	e9c2 3400 	strd	r3, r4, [r2]
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8002e12:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <KeyPad+0x7e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
		}
		sprintf((char*)Buffer,"SP= %03d    PV= %03d ",PID.SetPoint,Angle);
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <KeyPad+0x7e8>)
 8002e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f9b7 333e 	ldrsh.w	r3, [r7, #830]	; 0x33e
 8002e28:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8002e2c:	493f      	ldr	r1, [pc, #252]	; (8002f2c <KeyPad+0x7ec>)
 8002e2e:	f008 fc41 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,0,(char*)Buffer);
 8002e32:	2100      	movs	r1, #0
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fe fdd3 	bl	80019e0 <lcd_gotoxy>
 8002e3a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fda0 	bl	8001984 <lcd_puts>

		darsad = (((Value-Min_Real_Throttle)*100)/(Max_Real_Throttle - Min_Real_Throttle));
 8002e44:	f9b7 3366 	ldrsh.w	r3, [r7, #870]	; 0x366
 8002e48:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8002e4c:	2264      	movs	r2, #100	; 0x64
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <KeyPad+0x7f0>)
 8002e54:	fb82 1203 	smull	r1, r2, r2, r3
 8002e58:	1292      	asrs	r2, r2, #10
 8002e5a:	17db      	asrs	r3, r3, #31
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		sprintf((char*)Buffer,"P=%07.3f  Puls=%%%03d",PID.Kp,darsad);
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <KeyPad+0x7e8>)
 8002e64:	f103 0408 	add.w	r4, r3, #8
 8002e68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e6c:	f8b7 2336 	ldrh.w	r2, [r7, #822]	; 0x336
 8002e70:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8002e74:	9200      	str	r2, [sp, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	4623      	mov	r3, r4
 8002e7a:	492e      	ldr	r1, [pc, #184]	; (8002f34 <KeyPad+0x7f4>)
 8002e7c:	f008 fc1a 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,1,(char*)Buffer);
 8002e80:	2101      	movs	r1, #1
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fe fdac 	bl	80019e0 <lcd_gotoxy>
 8002e88:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fd79 	bl	8001984 <lcd_puts>

		sprintf((char*)Buffer,"I=%07.3f",PID.Ki);
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <KeyPad+0x7e8>)
 8002e94:	f103 0410 	add.w	r4, r3, #16
 8002e98:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002e9c:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	4924      	ldr	r1, [pc, #144]	; (8002f38 <KeyPad+0x7f8>)
 8002ea6:	f008 fc05 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,2,(char*)Buffer);
 8002eaa:	2102      	movs	r1, #2
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fd97 	bl	80019e0 <lcd_gotoxy>
 8002eb2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fd64 	bl	8001984 <lcd_puts>
		sprintf((char*)Buffer,"D=%07.3f",PID.Kd);
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <KeyPad+0x7e8>)
 8002ebe:	f103 0418 	add.w	r4, r3, #24
 8002ec2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ec6:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4623      	mov	r3, r4
 8002ece:	491b      	ldr	r1, [pc, #108]	; (8002f3c <KeyPad+0x7fc>)
 8002ed0:	f008 fbf0 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,3,(char*)Buffer);
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fe fd82 	bl	80019e0 <lcd_gotoxy>
 8002edc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fd4f 	bl	8001984 <lcd_puts>
	while(Status.whiles)
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <KeyPad+0x800>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f ac77 	bne.w	80027e4 <KeyPad+0xa4>
	}

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <KeyPad+0x7e4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34
	Status.motor=0;Status.Online=0;
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <KeyPad+0x800>)
 8002f02:	7813      	ldrb	r3, [r2, #0]
 8002f04:	f36f 0300 	bfc	r3, #0, #1
 8002f08:	7013      	strb	r3, [r2, #0]
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <KeyPad+0x800>)
 8002f0c:	7813      	ldrb	r3, [r2, #0]
 8002f0e:	f36f 13c7 	bfc	r3, #7, #1
 8002f12:	7013      	strb	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	f507 7760 	add.w	r7, r7, #896	; 0x380
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0800ef20 	.word	0x0800ef20
 8002f24:	200009b8 	.word	0x200009b8
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	0800ef48 	.word	0x0800ef48
 8002f30:	501183d5 	.word	0x501183d5
 8002f34:	0800ef60 	.word	0x0800ef60
 8002f38:	0800ef78 	.word	0x0800ef78
 8002f3c:	0800ef84 	.word	0x0800ef84
 8002f40:	200009f8 	.word	0x200009f8

08002f44 <WinApp>:
 ***********************************************               **************************************************
 ***********************************************  Windows app  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void WinApp(void)
{
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	b09a      	sub	sp, #104	; 0x68
 8002f48:	af02      	add	r7, sp, #8
	double Error=0, Previous_error=0;
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f04f 0400 	mov.w	r4, #0
 8002f52:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f04f 0400 	mov.w	r4, #0
 8002f5e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double p_term=0, d_term=0, i_term=0, dt=0;
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	f04f 0400 	mov.w	r4, #0
 8002f76:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	f04f 0400 	mov.w	r4, #0
 8002f82:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f04f 0400 	mov.w	r4, #0
 8002f8e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	int16_t Value=0, PWM=0, Angle=0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	83fb      	strh	r3, [r7, #30]
	uint32_t timePrev, TickStart = HAL_GetTick();
 8002fa2:	f001 fa09 	bl	80043b8 <HAL_GetTick>
 8002fa6:	6438      	str	r0, [r7, #64]	; 0x40
	uint16_t darsad,time;

	char Num, Prev_Num=ok;
 8002fa8:	230e      	movs	r3, #14
 8002faa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t Buffer[21];

	Status.motor = 0;
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <WinApp+0x110>)
 8002fb0:	7813      	ldrb	r3, [r2, #0]
 8002fb2:	f36f 0300 	bfc	r3, #0, #1
 8002fb6:	7013      	strb	r3, [r2, #0]
	throttle =  Max_Throttle - Min_Throttle;
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <WinApp+0x114>)
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <WinApp+0x118>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <WinApp+0x11c>)
 8002fc6:	801a      	strh	r2, [r3, #0]

	while(Status.whiles)
 8002fc8:	e24a      	b.n	8003460 <WinApp+0x51c>
	{
		Num = GET_KEY();
 8002fca:	f7ff f9f3 	bl	80023b4 <GET_KEY>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	777b      	strb	r3, [r7, #29]
		if(Num != Prev_Num)
 8002fd2:	7f7a      	ldrb	r2, [r7, #29]
 8002fd4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d046      	beq.n	800306a <WinApp+0x126>
		{
			switch (Num)
 8002fdc:	7f7b      	ldrb	r3, [r7, #29]
 8002fde:	2b0e      	cmp	r3, #14
 8002fe0:	d831      	bhi.n	8003046 <WinApp+0x102>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <WinApp+0xa4>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08003031 	.word	0x08003031
 8002fec:	08003047 	.word	0x08003047
 8002ff0:	08003047 	.word	0x08003047
 8002ff4:	08003047 	.word	0x08003047
 8002ff8:	08003047 	.word	0x08003047
 8002ffc:	08003047 	.word	0x08003047
 8003000:	08003047 	.word	0x08003047
 8003004:	08003047 	.word	0x08003047
 8003008:	08003047 	.word	0x08003047
 800300c:	08003047 	.word	0x08003047
 8003010:	0800303b 	.word	0x0800303b
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	08003025 	.word	0x08003025
 8003020:	08003047 	.word	0x08003047
			{
				case exit:
					Status.whiles=0;
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <WinApp+0x110>)
 8003026:	7813      	ldrb	r3, [r2, #0]
 8003028:	f36f 0382 	bfc	r3, #2, #1
 800302c:	7013      	strb	r3, [r2, #0]
					break;
 800302e:	e00a      	b.n	8003046 <WinApp+0x102>
				case 0:
					TIM2->CNT = 0;
 8003030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
					break;
 8003038:	e005      	b.n	8003046 <WinApp+0x102>
				case down:
					break;
				case ok:
					break;
				case cls:
					Status.motor = 0;
 800303a:	4a06      	ldr	r2, [pc, #24]	; (8003054 <WinApp+0x110>)
 800303c:	7813      	ldrb	r3, [r2, #0]
 800303e:	f36f 0300 	bfc	r3, #0, #1
 8003042:	7013      	strb	r3, [r2, #0]
					break;
 8003044:	bf00      	nop
			}
			if(Num == ok)	Prev_Num = exit;
 8003046:	7f7b      	ldrb	r3, [r7, #29]
 8003048:	2b0e      	cmp	r3, #14
 800304a:	d10b      	bne.n	8003064 <WinApp+0x120>
 800304c:	230d      	movs	r3, #13
 800304e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003052:	e00a      	b.n	800306a <WinApp+0x126>
 8003054:	200009f8 	.word	0x200009f8
 8003058:	200005cc 	.word	0x200005cc
 800305c:	20000a94 	.word	0x20000a94
 8003060:	200009fa 	.word	0x200009fa
			else Prev_Num = Num;
 8003064:	7f7b      	ldrb	r3, [r7, #29]
 8003066:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		}

	    Angle = ((int16_t)TIM2->CNT)/4;
 800306a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	b21b      	sxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	da00      	bge.n	8003078 <WinApp+0x134>
 8003076:	3303      	adds	r3, #3
 8003078:	109b      	asrs	r3, r3, #2
 800307a:	83fb      	strh	r3, [r7, #30]


		if(NewDataLineCount != 0)
 800307c:	4bb5      	ldr	r3, [pc, #724]	; (8003354 <WinApp+0x410>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <WinApp+0x156>
		{
		  Process_UART_Data(RXBuffer);
 8003084:	48b4      	ldr	r0, [pc, #720]	; (8003358 <WinApp+0x414>)
 8003086:	f7ff f88d 	bl	80021a4 <Process_UART_Data>
		  i_term = 0;
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		  time = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	87fb      	strh	r3, [r7, #62]	; 0x3e
		}

		if(Status.motor)
 800309a:	4bb0      	ldr	r3, [pc, #704]	; (800335c <WinApp+0x418>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8146 	beq.w	8003336 <WinApp+0x3f2>
		{
		    timePrev	=	TickStart;
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	61bb      	str	r3, [r7, #24]
		    TickStart	=	HAL_GetTick();
 80030ae:	f001 f983 	bl	80043b8 <HAL_GetTick>
 80030b2:	6438      	str	r0, [r7, #64]	; 0x40
		    //dt		= 	((float)(TickStart - timePrev) / 1000.00);
		    dt 			= 	TickStart - timePrev;
 80030b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f992 	bl	80003e4 <__aeabi_ui2d>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	e9c7 3408 	strd	r3, r4, [r7, #32]
		    time += dt;
 80030c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd f99a 	bl	8000404 <__aeabi_i2d>
 80030d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030d4:	f7fd f84a 	bl	800016c <__adddf3>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	4618      	mov	r0, r3
 80030de:	4621      	mov	r1, r4
 80030e0:	f7fd fcd2 	bl	8000a88 <__aeabi_d2uiz>
 80030e4:	4603      	mov	r3, r0
 80030e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
		    dt /= 1000.00;
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	4b9c      	ldr	r3, [pc, #624]	; (8003360 <WinApp+0x41c>)
 80030ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030f2:	f7fd fb1b 	bl	800072c <__aeabi_ddiv>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	e9c7 3408 	strd	r3, r4, [r7, #32]

			Error		=	PID.SetPoint - Angle;
 80030fe:	4b99      	ldr	r3, [pc, #612]	; (8003364 <WinApp+0x420>)
 8003100:	f993 3000 	ldrsb.w	r3, [r3]
 8003104:	461a      	mov	r2, r3
 8003106:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd f979 	bl	8000404 <__aeabi_i2d>
 8003112:	4603      	mov	r3, r0
 8003114:	460c      	mov	r4, r1
 8003116:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

			p_term = PID.Kp * Error;
 800311a:	4b92      	ldr	r3, [pc, #584]	; (8003364 <WinApp+0x420>)
 800311c:	f103 0408 	add.w	r4, r3, #8
 8003120:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003124:	461a      	mov	r2, r3
 8003126:	4623      	mov	r3, r4
 8003128:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800312c:	f7fd f9d4 	bl	80004d8 <__aeabi_dmul>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

			i_term		=	(PID.Ki * (Error + Previous_error) * dt / 2) + i_term ;
 8003138:	4b8a      	ldr	r3, [pc, #552]	; (8003364 <WinApp+0x420>)
 800313a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800313e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003142:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003146:	f7fd f811 	bl	800016c <__adddf3>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4620      	mov	r0, r4
 8003150:	4629      	mov	r1, r5
 8003152:	f7fd f9c1 	bl	80004d8 <__aeabi_dmul>
 8003156:	4603      	mov	r3, r0
 8003158:	460c      	mov	r4, r1
 800315a:	4618      	mov	r0, r3
 800315c:	4621      	mov	r1, r4
 800315e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003162:	f7fd f9b9 	bl	80004d8 <__aeabi_dmul>
 8003166:	4603      	mov	r3, r0
 8003168:	460c      	mov	r4, r1
 800316a:	4618      	mov	r0, r3
 800316c:	4621      	mov	r1, r4
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003176:	f7fd fad9 	bl	800072c <__aeabi_ddiv>
 800317a:	4603      	mov	r3, r0
 800317c:	460c      	mov	r4, r1
 800317e:	461a      	mov	r2, r3
 8003180:	4623      	mov	r3, r4
 8003182:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003186:	f7fc fff1 	bl	800016c <__adddf3>
 800318a:	4603      	mov	r3, r0
 800318c:	460c      	mov	r4, r1
 800318e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			if(i_term > throttle) i_term = throttle;
 8003192:	4b75      	ldr	r3, [pc, #468]	; (8003368 <WinApp+0x424>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f934 	bl	8000404 <__aeabi_i2d>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	461a      	mov	r2, r3
 80031a2:	4623      	mov	r3, r4
 80031a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031a8:	f7fd fc26 	bl	80009f8 <__aeabi_dcmpgt>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <WinApp+0x280>
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <WinApp+0x424>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f914 	bl	80003e4 <__aeabi_ui2d>
 80031bc:	4603      	mov	r3, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			if(i_term <-throttle) i_term = -throttle;
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <WinApp+0x424>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	425b      	negs	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f91a 	bl	8000404 <__aeabi_i2d>
 80031d0:	4603      	mov	r3, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031dc:	f7fd fbee 	bl	80009bc <__aeabi_dcmplt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <WinApp+0x2b6>
 80031e6:	4b60      	ldr	r3, [pc, #384]	; (8003368 <WinApp+0x424>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	425b      	negs	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f909 	bl	8000404 <__aeabi_i2d>
 80031f2:	4603      	mov	r3, r0
 80031f4:	460c      	mov	r4, r1
 80031f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

            /*N 			=	(1.0 / dt) * 0.9 ;
            filter		+=	dt * d_term;
            d_term 		= 	(PID.Kd * Error - filter) * N;*/

			d_term = (Error - Previous_error) / dt * PID.Kd;
 80031fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003202:	f7fc ffb1 	bl	8000168 <__aeabi_dsub>
 8003206:	4603      	mov	r3, r0
 8003208:	460c      	mov	r4, r1
 800320a:	4618      	mov	r0, r3
 800320c:	4621      	mov	r1, r4
 800320e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003212:	f7fd fa8b 	bl	800072c <__aeabi_ddiv>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	4618      	mov	r0, r3
 800321c:	4621      	mov	r1, r4
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <WinApp+0x420>)
 8003220:	f103 0418 	add.w	r4, r3, #24
 8003224:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003228:	461a      	mov	r2, r3
 800322a:	4623      	mov	r3, r4
 800322c:	f7fd f954 	bl	80004d8 <__aeabi_dmul>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            if(d_term > throttle)	d_term = throttle;
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <WinApp+0x424>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f8e1 	bl	8000404 <__aeabi_i2d>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	461a      	mov	r2, r3
 8003248:	4623      	mov	r3, r4
 800324a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800324e:	f7fd fbd3 	bl	80009f8 <__aeabi_dcmpgt>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <WinApp+0x326>
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <WinApp+0x424>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f8c1 	bl	80003e4 <__aeabi_ui2d>
 8003262:	4603      	mov	r3, r0
 8003264:	460c      	mov	r4, r1
 8003266:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
            if(d_term <-throttle)	d_term = -throttle;
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <WinApp+0x424>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	425b      	negs	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f8c7 	bl	8000404 <__aeabi_i2d>
 8003276:	4603      	mov	r3, r0
 8003278:	460c      	mov	r4, r1
 800327a:	461a      	mov	r2, r3
 800327c:	4623      	mov	r3, r4
 800327e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003282:	f7fd fb9b 	bl	80009bc <__aeabi_dcmplt>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <WinApp+0x35c>
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <WinApp+0x424>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	425b      	negs	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f8b6 	bl	8000404 <__aeabi_i2d>
 8003298:	4603      	mov	r3, r0
 800329a:	460c      	mov	r4, r1
 800329c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

			PWM			=	(int16_t)(p_term + i_term + d_term);
 80032a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032a8:	f7fc ff60 	bl	800016c <__adddf3>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	4618      	mov	r0, r3
 80032b2:	4621      	mov	r1, r4
 80032b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b8:	f7fc ff58 	bl	800016c <__adddf3>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	4618      	mov	r0, r3
 80032c2:	4621      	mov	r1, r4
 80032c4:	f7fd fbb8 	bl	8000a38 <__aeabi_d2iz>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			if (PWM > throttle)	PWM = throttle;
 80032ce:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <WinApp+0x424>)
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	4293      	cmp	r3, r2
 80032d8:	dd03      	ble.n	80032e2 <WinApp+0x39e>
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <WinApp+0x424>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			if (PWM < 0)		PWM = 0;
 80032e2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da02      	bge.n	80032f0 <WinApp+0x3ac>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			Value = PWM + Min_Throttle;
 80032f0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <WinApp+0x428>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	4413      	add	r3, r2
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			if(Status.motor)__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Value);
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <WinApp+0x418>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <WinApp+0x3d4>
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <WinApp+0x42c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

			sprintf((char*)Buffer, "data,%d,%d\r\n",Angle,time);
 8003318:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800331c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800331e:	4638      	mov	r0, r7
 8003320:	4914      	ldr	r1, [pc, #80]	; (8003374 <WinApp+0x430>)
 8003322:	f008 f9c7 	bl	800b6b4 <siprintf>
			Log((char*)Buffer);
 8003326:	463b      	mov	r3, r7
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fc1e 	bl	8001b6a <Log>
			Previous_error = Error;
 800332e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003332:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		}

		if(Status.motor) {lcd_puts_XY(11,3,"Motor ON ");}
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <WinApp+0x418>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <WinApp+0x438>
 8003344:	2103      	movs	r1, #3
 8003346:	200b      	movs	r0, #11
 8003348:	f7fe fb4a 	bl	80019e0 <lcd_gotoxy>
 800334c:	480a      	ldr	r0, [pc, #40]	; (8003378 <WinApp+0x434>)
 800334e:	f7fe fb19 	bl	8001984 <lcd_puts>
 8003352:	e02a      	b.n	80033aa <WinApp+0x466>
 8003354:	2000038e 	.word	0x2000038e
 8003358:	20000a40 	.word	0x20000a40
 800335c:	200009f8 	.word	0x200009f8
 8003360:	408f4000 	.word	0x408f4000
 8003364:	20000000 	.word	0x20000000
 8003368:	200009fa 	.word	0x200009fa
 800336c:	20000a94 	.word	0x20000a94
 8003370:	200009b8 	.word	0x200009b8
 8003374:	0800ef90 	.word	0x0800ef90
 8003378:	0800ef2c 	.word	0x0800ef2c
		else
		{
			lcd_puts_XY(11,3,"Motor OFF");
 800337c:	2103      	movs	r1, #3
 800337e:	200b      	movs	r0, #11
 8003380:	f7fe fb2e 	bl	80019e0 <lcd_gotoxy>
 8003384:	4841      	ldr	r0, [pc, #260]	; (800348c <WinApp+0x548>)
 8003386:	f7fe fafd 	bl	8001984 <lcd_puts>
			Value = Min_Real_Throttle;
 800338a:	f640 43c8 	movw	r3, #3272	; 0xcc8
 800338e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			i_term = 0;d_term=0;
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		}
		sprintf((char*)Buffer,"SP= %03d    PV= %03d ",PID.SetPoint,Angle);
 80033aa:	4b39      	ldr	r3, [pc, #228]	; (8003490 <WinApp+0x54c>)
 80033ac:	f993 3000 	ldrsb.w	r3, [r3]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033b6:	4638      	mov	r0, r7
 80033b8:	4936      	ldr	r1, [pc, #216]	; (8003494 <WinApp+0x550>)
 80033ba:	f008 f97b 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,0,(char*)Buffer);
 80033be:	2100      	movs	r1, #0
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fe fb0d 	bl	80019e0 <lcd_gotoxy>
 80033c6:	463b      	mov	r3, r7
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fadb 	bl	8001984 <lcd_puts>

		darsad = (((Value-Min_Real_Throttle)*100)/(Max_Real_Throttle - Min_Real_Throttle));
 80033ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80033d2:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 80033d6:	2264      	movs	r2, #100	; 0x64
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <WinApp+0x554>)
 80033de:	fb82 1203 	smull	r1, r2, r2, r3
 80033e2:	1292      	asrs	r2, r2, #10
 80033e4:	17db      	asrs	r3, r3, #31
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	82fb      	strh	r3, [r7, #22]
		sprintf((char*)Buffer,"P=%07.3f  Puls=%%%03d",PID.Kp,darsad);
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <WinApp+0x54c>)
 80033ec:	f103 0408 	add.w	r4, r3, #8
 80033f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033f4:	8afa      	ldrh	r2, [r7, #22]
 80033f6:	4638      	mov	r0, r7
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4623      	mov	r3, r4
 80033fe:	4927      	ldr	r1, [pc, #156]	; (800349c <WinApp+0x558>)
 8003400:	f008 f958 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,1,(char*)Buffer);
 8003404:	2101      	movs	r1, #1
 8003406:	2000      	movs	r0, #0
 8003408:	f7fe faea 	bl	80019e0 <lcd_gotoxy>
 800340c:	463b      	mov	r3, r7
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fab8 	bl	8001984 <lcd_puts>

		sprintf((char*)Buffer,"I=%07.3f",PID.Ki);
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <WinApp+0x54c>)
 8003416:	f103 0410 	add.w	r4, r3, #16
 800341a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800341e:	4638      	mov	r0, r7
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	491e      	ldr	r1, [pc, #120]	; (80034a0 <WinApp+0x55c>)
 8003426:	f008 f945 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,2,(char*)Buffer);
 800342a:	2102      	movs	r1, #2
 800342c:	2000      	movs	r0, #0
 800342e:	f7fe fad7 	bl	80019e0 <lcd_gotoxy>
 8003432:	463b      	mov	r3, r7
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe faa5 	bl	8001984 <lcd_puts>
		sprintf((char*)Buffer,"D=%07.3f",PID.Kd);
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <WinApp+0x54c>)
 800343c:	f103 0418 	add.w	r4, r3, #24
 8003440:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003444:	4638      	mov	r0, r7
 8003446:	461a      	mov	r2, r3
 8003448:	4623      	mov	r3, r4
 800344a:	4916      	ldr	r1, [pc, #88]	; (80034a4 <WinApp+0x560>)
 800344c:	f008 f932 	bl	800b6b4 <siprintf>
		lcd_puts_XY(0,3,(char*)Buffer);
 8003450:	2103      	movs	r1, #3
 8003452:	2000      	movs	r0, #0
 8003454:	f7fe fac4 	bl	80019e0 <lcd_gotoxy>
 8003458:	463b      	mov	r3, r7
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe fa92 	bl	8001984 <lcd_puts>
	while(Status.whiles)
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <WinApp+0x564>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f47f adad 	bne.w	8002fca <WinApp+0x86>
	}

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <WinApp+0x568>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8003478:	635a      	str	r2, [r3, #52]	; 0x34
	Status.motor=0;
 800347a:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <WinApp+0x564>)
 800347c:	7813      	ldrb	r3, [r2, #0]
 800347e:	f36f 0300 	bfc	r3, #0, #1
 8003482:	7013      	strb	r3, [r2, #0]
}
 8003484:	bf00      	nop
 8003486:	3760      	adds	r7, #96	; 0x60
 8003488:	46bd      	mov	sp, r7
 800348a:	bdb0      	pop	{r4, r5, r7, pc}
 800348c:	0800ef20 	.word	0x0800ef20
 8003490:	20000000 	.word	0x20000000
 8003494:	0800ef48 	.word	0x0800ef48
 8003498:	501183d5 	.word	0x501183d5
 800349c:	0800ef60 	.word	0x0800ef60
 80034a0:	0800ef78 	.word	0x0800ef78
 80034a4:	0800ef84 	.word	0x0800ef84
 80034a8:	200009f8 	.word	0x200009f8
 80034ac:	200009b8 	.word	0x200009b8

080034b0 <Volume>:
 ***********************************************               **************************************************
 ***********************************************  Volume Mode  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void Volume(void)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b08b      	sub	sp, #44	; 0x2c
 80034b4:	af00      	add	r7, sp, #0
	char Num,Prev_Num=ok;
 80034b6:	230e      	movs	r3, #14
 80034b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int Value = Min_Real_Throttle;
 80034bc:	f640 43c8 	movw	r3, #3272	; 0xcc8
 80034c0:	623b      	str	r3, [r7, #32]
	char Buffer[15];
	int16_t encoder;

	Status.motor = 0;
 80034c2:	4aa6      	ldr	r2, [pc, #664]	; (800375c <Volume+0x2ac>)
 80034c4:	7813      	ldrb	r3, [r2, #0]
 80034c6:	f36f 0300 	bfc	r3, #0, #1
 80034ca:	7013      	strb	r3, [r2, #0]
	lcd_puts_XY(4,3,"Motor is OFF");
 80034cc:	2103      	movs	r1, #3
 80034ce:	2004      	movs	r0, #4
 80034d0:	f7fe fa86 	bl	80019e0 <lcd_gotoxy>
 80034d4:	48a2      	ldr	r0, [pc, #648]	; (8003760 <Volume+0x2b0>)
 80034d6:	f7fe fa55 	bl	8001984 <lcd_puts>

	HAL_FLASH_Unlock();
 80034da:	f001 f98d 	bl	80047f8 <HAL_FLASH_Unlock>
	EE_Init();
 80034de:	f7fd fda1 	bl	8001024 <EE_Init>

	while(Status.whiles)
 80034e2:	e128      	b.n	8003736 <Volume+0x286>
	{
		Num = GET_KEY();
 80034e4:	f7fe ff66 	bl	80023b4 <GET_KEY>
 80034e8:	4603      	mov	r3, r0
 80034ea:	77fb      	strb	r3, [r7, #31]
		if(Prev_Num == up || Prev_Num == down)Prev_Num=16;
 80034ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f0:	2b0b      	cmp	r3, #11
 80034f2:	d003      	beq.n	80034fc <Volume+0x4c>
 80034f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d102      	bne.n	8003502 <Volume+0x52>
 80034fc:	2310      	movs	r3, #16
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(Num != Prev_Num)
 8003502:	7ffa      	ldrb	r2, [r7, #31]
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003508:	429a      	cmp	r2, r3
 800350a:	f000 80b9 	beq.w	8003680 <Volume+0x1d0>
		{
			switch (Num)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b0e      	cmp	r3, #14
 8003512:	f200 80b2 	bhi.w	800367a <Volume+0x1ca>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <Volume+0x6c>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003565 	.word	0x08003565
 8003520:	0800356f 	.word	0x0800356f
 8003524:	08003577 	.word	0x08003577
 8003528:	0800367b 	.word	0x0800367b
 800352c:	0800367b 	.word	0x0800367b
 8003530:	0800367b 	.word	0x0800367b
 8003534:	0800367b 	.word	0x0800367b
 8003538:	0800357f 	.word	0x0800357f
 800353c:	080035bd 	.word	0x080035bd
 8003540:	0800367b 	.word	0x0800367b
 8003544:	0800361f 	.word	0x0800361f
 8003548:	080035fb 	.word	0x080035fb
 800354c:	0800360d 	.word	0x0800360d
 8003550:	08003559 	.word	0x08003559
 8003554:	0800367b 	.word	0x0800367b
			{
			case exit:
				Status.whiles=0;
 8003558:	4a80      	ldr	r2, [pc, #512]	; (800375c <Volume+0x2ac>)
 800355a:	7813      	ldrb	r3, [r2, #0]
 800355c:	f36f 0382 	bfc	r3, #2, #1
 8003560:	7013      	strb	r3, [r2, #0]
				break;
 8003562:	e08a      	b.n	800367a <Volume+0x1ca>
			case 0:
				TIM2->CNT = 0;
 8003564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800356c:	e085      	b.n	800367a <Volume+0x1ca>
			case 1:
				Value = Min_Real_Throttle;
 800356e:	f640 43c8 	movw	r3, #3272	; 0xcc8
 8003572:	623b      	str	r3, [r7, #32]
				break;
 8003574:	e081      	b.n	800367a <Volume+0x1ca>
			case 2:
				Value = Max_Real_Throttle;
 8003576:	f641 1392 	movw	r3, #6546	; 0x1992
 800357a:	623b      	str	r3, [r7, #32]
				break;
 800357c:	e07d      	b.n	800367a <Volume+0x1ca>
			case 7:
				Min_Throttle = Value;EE_WriteVariable(0,Min_Throttle);HAL_Delay(10);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	b29a      	uxth	r2, r3
 8003582:	4b78      	ldr	r3, [pc, #480]	; (8003764 <Volume+0x2b4>)
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	4b77      	ldr	r3, [pc, #476]	; (8003764 <Volume+0x2b4>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd ff9b 	bl	80014c8 <EE_WriteVariable>
 8003592:	200a      	movs	r0, #10
 8003594:	f000 ff1a 	bl	80043cc <HAL_Delay>
				lcd_puts_XY(6,1,"Min Saved");HAL_Delay(250);lcd_puts_XY(6,1,"         ")
 8003598:	2101      	movs	r1, #1
 800359a:	2006      	movs	r0, #6
 800359c:	f7fe fa20 	bl	80019e0 <lcd_gotoxy>
 80035a0:	4871      	ldr	r0, [pc, #452]	; (8003768 <Volume+0x2b8>)
 80035a2:	f7fe f9ef 	bl	8001984 <lcd_puts>
 80035a6:	20fa      	movs	r0, #250	; 0xfa
 80035a8:	f000 ff10 	bl	80043cc <HAL_Delay>
 80035ac:	2101      	movs	r1, #1
 80035ae:	2006      	movs	r0, #6
 80035b0:	f7fe fa16 	bl	80019e0 <lcd_gotoxy>
 80035b4:	486d      	ldr	r0, [pc, #436]	; (800376c <Volume+0x2bc>)
 80035b6:	f7fe f9e5 	bl	8001984 <lcd_puts>
				break;
 80035ba:	e05e      	b.n	800367a <Volume+0x1ca>
			case 8:
				Max_Throttle = Value;EE_WriteVariable(1,Max_Throttle);HAL_Delay(10);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	b29a      	uxth	r2, r3
 80035c0:	4b6b      	ldr	r3, [pc, #428]	; (8003770 <Volume+0x2c0>)
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <Volume+0x2c0>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	4619      	mov	r1, r3
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7fd ff7c 	bl	80014c8 <EE_WriteVariable>
 80035d0:	200a      	movs	r0, #10
 80035d2:	f000 fefb 	bl	80043cc <HAL_Delay>
				lcd_puts_XY(6,1,"Max Saved");HAL_Delay(250);lcd_puts_XY(6,1,"         ")
 80035d6:	2101      	movs	r1, #1
 80035d8:	2006      	movs	r0, #6
 80035da:	f7fe fa01 	bl	80019e0 <lcd_gotoxy>
 80035de:	4865      	ldr	r0, [pc, #404]	; (8003774 <Volume+0x2c4>)
 80035e0:	f7fe f9d0 	bl	8001984 <lcd_puts>
 80035e4:	20fa      	movs	r0, #250	; 0xfa
 80035e6:	f000 fef1 	bl	80043cc <HAL_Delay>
 80035ea:	2101      	movs	r1, #1
 80035ec:	2006      	movs	r0, #6
 80035ee:	f7fe f9f7 	bl	80019e0 <lcd_gotoxy>
 80035f2:	485e      	ldr	r0, [pc, #376]	; (800376c <Volume+0x2bc>)
 80035f4:	f7fe f9c6 	bl	8001984 <lcd_puts>
				break;
 80035f8:	e03f      	b.n	800367a <Volume+0x1ca>
			case up:
				if(Value < Max_Real_Throttle)Value += 2;
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f641 1291 	movw	r2, #6545	; 0x1991
 8003600:	4293      	cmp	r3, r2
 8003602:	dc37      	bgt.n	8003674 <Volume+0x1c4>
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	3302      	adds	r3, #2
 8003608:	623b      	str	r3, [r7, #32]
				break;
 800360a:	e033      	b.n	8003674 <Volume+0x1c4>
			case down:
				if(Value > Min_Real_Throttle)Value -= 2;
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f640 42c8 	movw	r2, #3272	; 0xcc8
 8003612:	4293      	cmp	r3, r2
 8003614:	dd30      	ble.n	8003678 <Volume+0x1c8>
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	3b02      	subs	r3, #2
 800361a:	623b      	str	r3, [r7, #32]
				break;
 800361c:	e02c      	b.n	8003678 <Volume+0x1c8>
			case cls:
				Status.motor ^= 1;
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <Volume+0x2ac>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2d9      	uxtb	r1, r3
 800362e:	4a4b      	ldr	r2, [pc, #300]	; (800375c <Volume+0x2ac>)
 8003630:	7813      	ldrb	r3, [r2, #0]
 8003632:	f361 0300 	bfi	r3, r1, #0, #1
 8003636:	7013      	strb	r3, [r2, #0]
				if(Status.motor) {lcd_puts_XY(4,3,"Motor is ON ");}
 8003638:	4b48      	ldr	r3, [pc, #288]	; (800375c <Volume+0x2ac>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <Volume+0x1a6>
 8003646:	2103      	movs	r1, #3
 8003648:	2004      	movs	r0, #4
 800364a:	f7fe f9c9 	bl	80019e0 <lcd_gotoxy>
 800364e:	484a      	ldr	r0, [pc, #296]	; (8003778 <Volume+0x2c8>)
 8003650:	f7fe f998 	bl	8001984 <lcd_puts>
				{
					lcd_puts_XY(4,3,"Motor is OFF");
					Value = Min_Real_Throttle;
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Value);
				}
				break;
 8003654:	e011      	b.n	800367a <Volume+0x1ca>
					lcd_puts_XY(4,3,"Motor is OFF");
 8003656:	2103      	movs	r1, #3
 8003658:	2004      	movs	r0, #4
 800365a:	f7fe f9c1 	bl	80019e0 <lcd_gotoxy>
 800365e:	4840      	ldr	r0, [pc, #256]	; (8003760 <Volume+0x2b0>)
 8003660:	f7fe f990 	bl	8001984 <lcd_puts>
					Value = Min_Real_Throttle;
 8003664:	f640 43c8 	movw	r3, #3272	; 0xcc8
 8003668:	623b      	str	r3, [r7, #32]
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Value);
 800366a:	4b44      	ldr	r3, [pc, #272]	; (800377c <Volume+0x2cc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a3a      	ldr	r2, [r7, #32]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8003672:	e002      	b.n	800367a <Volume+0x1ca>
				break;
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <Volume+0x1ca>
				break;
 8003678:	bf00      	nop
			case ok:
				break;
			}
			Prev_Num = Num;
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if(Status.motor)__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Value);
 8003680:	4b36      	ldr	r3, [pc, #216]	; (800375c <Volume+0x2ac>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <Volume+0x1e8>
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <Volume+0x2cc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	635a      	str	r2, [r3, #52]	; 0x34
 8003696:	e004      	b.n	80036a2 <Volume+0x1f2>
		else 			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <Volume+0x2cc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f640 42c8 	movw	r2, #3272	; 0xcc8
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34

		encoder = TIM2->CNT;
 80036a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	83bb      	strh	r3, [r7, #28]
		float Angle = (float)encoder / 4;
 80036aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fb14 	bl	8000cdc <__aeabi_i2f>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fc16 	bl	8000eec <__aeabi_fdiv>
 80036c0:	4603      	mov	r3, r0
 80036c2:	61bb      	str	r3, [r7, #24]
	    sprintf(Buffer,"Angle= %05.2f  ",Angle);
 80036c4:	69b8      	ldr	r0, [r7, #24]
 80036c6:	f7fc feaf 	bl	8000428 <__aeabi_f2d>
 80036ca:	4603      	mov	r3, r0
 80036cc:	460c      	mov	r4, r1
 80036ce:	1d38      	adds	r0, r7, #4
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	492a      	ldr	r1, [pc, #168]	; (8003780 <Volume+0x2d0>)
 80036d6:	f007 ffed 	bl	800b6b4 <siprintf>
	    lcd_puts_XY(4,0,Buffer);
 80036da:	2100      	movs	r1, #0
 80036dc:	2004      	movs	r0, #4
 80036de:	f7fe f97f 	bl	80019e0 <lcd_gotoxy>
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe f94d 	bl	8001984 <lcd_puts>

		float darsad = (float)((Value - Min_Real_Throttle)*100)/(Max_Real_Throttle - Min_Real_Throttle);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 80036f0:	2264      	movs	r2, #100	; 0x64
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd faf0 	bl	8000cdc <__aeabi_i2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <Volume+0x2d4>)
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fbf3 	bl	8000eec <__aeabi_fdiv>
 8003706:	4603      	mov	r3, r0
 8003708:	617b      	str	r3, [r7, #20]
		sprintf(Buffer,"Pulse= %%%3.2f  ",darsad);
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7fc fe8c 	bl	8000428 <__aeabi_f2d>
 8003710:	4603      	mov	r3, r0
 8003712:	460c      	mov	r4, r1
 8003714:	1d38      	adds	r0, r7, #4
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	491b      	ldr	r1, [pc, #108]	; (8003788 <Volume+0x2d8>)
 800371c:	f007 ffca 	bl	800b6b4 <siprintf>
		lcd_puts_XY(4,2,Buffer);
 8003720:	2102      	movs	r1, #2
 8003722:	2004      	movs	r0, #4
 8003724:	f7fe f95c 	bl	80019e0 <lcd_gotoxy>
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f92a 	bl	8001984 <lcd_puts>

	    HAL_Delay(1);
 8003730:	2001      	movs	r0, #1
 8003732:	f000 fe4b 	bl	80043cc <HAL_Delay>
	while(Status.whiles)
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <Volume+0x2ac>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f aecf 	bne.w	80034e4 <Volume+0x34>
	}
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Min_Real_Throttle);
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <Volume+0x2cc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f640 42c8 	movw	r2, #3272	; 0xcc8
 800374e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_FLASH_Lock();
 8003750:	f001 f878 	bl	8004844 <HAL_FLASH_Lock>
}
 8003754:	bf00      	nop
 8003756:	372c      	adds	r7, #44	; 0x2c
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	200009f8 	.word	0x200009f8
 8003760:	0800efa0 	.word	0x0800efa0
 8003764:	20000a94 	.word	0x20000a94
 8003768:	0800efb0 	.word	0x0800efb0
 800376c:	0800efbc 	.word	0x0800efbc
 8003770:	200005cc 	.word	0x200005cc
 8003774:	0800efc8 	.word	0x0800efc8
 8003778:	0800efd4 	.word	0x0800efd4
 800377c:	200009b8 	.word	0x200009b8
 8003780:	0800efe4 	.word	0x0800efe4
 8003784:	454ca000 	.word	0x454ca000
 8003788:	0800eff4 	.word	0x0800eff4
 800378c:	00000000 	.word	0x00000000

08003790 <PID_setting>:
 ***********************************************               **************************************************
 ***********************************************    Setting    **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void PID_setting(void)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b08f      	sub	sp, #60	; 0x3c
 8003794:	af00      	add	r7, sp, #0
	uint8_t Prev_Num=ok,Num;
 8003796:	230e      	movs	r3, #14
 8003798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	char Buffer[20];
	char NUMBER[9];
	int8_t i=0;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	double x;

	lcd_clear();
 80037a2:	f7fe f8df 	bl	8001964 <lcd_clear>

	do
	{
		lcd_puts_XY(6,0,"SetPoint");
 80037a6:	2100      	movs	r1, #0
 80037a8:	2006      	movs	r0, #6
 80037aa:	f7fe f919 	bl	80019e0 <lcd_gotoxy>
 80037ae:	48ce      	ldr	r0, [pc, #824]	; (8003ae8 <PID_setting+0x358>)
 80037b0:	f7fe f8e8 	bl	8001984 <lcd_puts>
		lcd_puts_XY(9,1,"KP");
 80037b4:	2101      	movs	r1, #1
 80037b6:	2009      	movs	r0, #9
 80037b8:	f7fe f912 	bl	80019e0 <lcd_gotoxy>
 80037bc:	48cb      	ldr	r0, [pc, #812]	; (8003aec <PID_setting+0x35c>)
 80037be:	f7fe f8e1 	bl	8001984 <lcd_puts>
		lcd_puts_XY(9,2,"KI");
 80037c2:	2102      	movs	r1, #2
 80037c4:	2009      	movs	r0, #9
 80037c6:	f7fe f90b 	bl	80019e0 <lcd_gotoxy>
 80037ca:	48c9      	ldr	r0, [pc, #804]	; (8003af0 <PID_setting+0x360>)
 80037cc:	f7fe f8da 	bl	8001984 <lcd_puts>
		lcd_puts_XY(9,3,"KD");
 80037d0:	2103      	movs	r1, #3
 80037d2:	2009      	movs	r0, #9
 80037d4:	f7fe f904 	bl	80019e0 <lcd_gotoxy>
 80037d8:	48c6      	ldr	r0, [pc, #792]	; (8003af4 <PID_setting+0x364>)
 80037da:	f7fe f8d3 	bl	8001984 <lcd_puts>

		Status.whiles=1; Status.PID_whil=0;
 80037de:	4ac6      	ldr	r2, [pc, #792]	; (8003af8 <PID_setting+0x368>)
 80037e0:	7813      	ldrb	r3, [r2, #0]
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	7013      	strb	r3, [r2, #0]
 80037e8:	4ac3      	ldr	r2, [pc, #780]	; (8003af8 <PID_setting+0x368>)
 80037ea:	7813      	ldrb	r3, [r2, #0]
 80037ec:	f36f 03c3 	bfc	r3, #3, #1
 80037f0:	7013      	strb	r3, [r2, #0]
		while(Status.whiles)
 80037f2:	e06d      	b.n	80038d0 <PID_setting+0x140>
		{
			Num = GET_KEY();
 80037f4:	f7fe fdde 	bl	80023b4 <GET_KEY>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if(Num != Prev_Num)
 80037fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003802:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003806:	429a      	cmp	r2, r3
 8003808:	d062      	beq.n	80038d0 <PID_setting+0x140>
			{
				lcd_puts_XY(3,i," ");
 800380a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800380e:	4619      	mov	r1, r3
 8003810:	2003      	movs	r0, #3
 8003812:	f7fe f8e5 	bl	80019e0 <lcd_gotoxy>
 8003816:	48b9      	ldr	r0, [pc, #740]	; (8003afc <PID_setting+0x36c>)
 8003818:	f7fe f8b4 	bl	8001984 <lcd_puts>
				lcd_puts_XY(17,i," ");
 800381c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003820:	4619      	mov	r1, r3
 8003822:	2011      	movs	r0, #17
 8003824:	f7fe f8dc 	bl	80019e0 <lcd_gotoxy>
 8003828:	48b4      	ldr	r0, [pc, #720]	; (8003afc <PID_setting+0x36c>)
 800382a:	f7fe f8ab 	bl	8001984 <lcd_puts>

				if(Num==up)i--;
 800382e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003832:	2b0b      	cmp	r3, #11
 8003834:	d106      	bne.n	8003844 <PID_setting+0xb4>
 8003836:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(Num==down)i++;
 8003844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d106      	bne.n	800385a <PID_setting+0xca>
 800384c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8003850:	b2db      	uxtb	r3, r3
 8003852:	3301      	adds	r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(i<0)i=3;
 800385a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800385e:	2b00      	cmp	r3, #0
 8003860:	da02      	bge.n	8003868 <PID_setting+0xd8>
 8003862:	2303      	movs	r3, #3
 8003864:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if(i>3)i=0;
 8003868:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800386c:	2b03      	cmp	r3, #3
 800386e:	dd02      	ble.n	8003876 <PID_setting+0xe6>
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

				lcd_puts_XY(3,i,">");
 8003876:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800387a:	4619      	mov	r1, r3
 800387c:	2003      	movs	r0, #3
 800387e:	f7fe f8af 	bl	80019e0 <lcd_gotoxy>
 8003882:	489f      	ldr	r0, [pc, #636]	; (8003b00 <PID_setting+0x370>)
 8003884:	f7fe f87e 	bl	8001984 <lcd_puts>
				lcd_puts_XY(17,i,"<");
 8003888:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800388c:	4619      	mov	r1, r3
 800388e:	2011      	movs	r0, #17
 8003890:	f7fe f8a6 	bl	80019e0 <lcd_gotoxy>
 8003894:	489b      	ldr	r0, [pc, #620]	; (8003b04 <PID_setting+0x374>)
 8003896:	f7fe f875 	bl	8001984 <lcd_puts>
				Prev_Num = Num;
 800389a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				if(Num == ok){Status.whiles=0;Status.PID_whil=1;}
 80038a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a6:	2b0e      	cmp	r3, #14
 80038a8:	d109      	bne.n	80038be <PID_setting+0x12e>
 80038aa:	4a93      	ldr	r2, [pc, #588]	; (8003af8 <PID_setting+0x368>)
 80038ac:	7813      	ldrb	r3, [r2, #0]
 80038ae:	f36f 0382 	bfc	r3, #2, #1
 80038b2:	7013      	strb	r3, [r2, #0]
 80038b4:	4a90      	ldr	r2, [pc, #576]	; (8003af8 <PID_setting+0x368>)
 80038b6:	7813      	ldrb	r3, [r2, #0]
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	7013      	strb	r3, [r2, #0]
				if(Num == exit)Status.whiles=0;
 80038be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c2:	2b0d      	cmp	r3, #13
 80038c4:	d104      	bne.n	80038d0 <PID_setting+0x140>
 80038c6:	4a8c      	ldr	r2, [pc, #560]	; (8003af8 <PID_setting+0x368>)
 80038c8:	7813      	ldrb	r3, [r2, #0]
 80038ca:	f36f 0382 	bfc	r3, #2, #1
 80038ce:	7013      	strb	r3, [r2, #0]
		while(Status.whiles)
 80038d0:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <PID_setting+0x368>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d18a      	bne.n	80037f4 <PID_setting+0x64>
			}
		}
		if(Status.PID_whil)
 80038de:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <PID_setting+0x368>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 813f 	beq.w	8003b6c <PID_setting+0x3dc>
		{
			lcd_clear();
 80038ee:	f7fe f839 	bl	8001964 <lcd_clear>

			if(i==0)
 80038f2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d120      	bne.n	800393c <PID_setting+0x1ac>
			{
				lcd_puts_XY(0,0,"------>SET SP<------");
 80038fa:	2100      	movs	r1, #0
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fe f86f 	bl	80019e0 <lcd_gotoxy>
 8003902:	4881      	ldr	r0, [pc, #516]	; (8003b08 <PID_setting+0x378>)
 8003904:	f7fe f83e 	bl	8001984 <lcd_puts>
				sprintf(Buffer,"Last SP= %02d ",PID.SetPoint);
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <PID_setting+0x37c>)
 800390a:	f993 3000 	ldrsb.w	r3, [r3]
 800390e:	461a      	mov	r2, r3
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	497e      	ldr	r1, [pc, #504]	; (8003b10 <PID_setting+0x380>)
 8003916:	4618      	mov	r0, r3
 8003918:	f007 fecc 	bl	800b6b4 <siprintf>
				lcd_puts_XY(2,2,Buffer);
 800391c:	2102      	movs	r1, #2
 800391e:	2002      	movs	r0, #2
 8003920:	f7fe f85e 	bl	80019e0 <lcd_gotoxy>
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe f82b 	bl	8001984 <lcd_puts>
				lcd_puts_XY(3,3,"NEW SP= ");
 800392e:	2103      	movs	r1, #3
 8003930:	2003      	movs	r0, #3
 8003932:	f7fe f855 	bl	80019e0 <lcd_gotoxy>
 8003936:	4877      	ldr	r0, [pc, #476]	; (8003b14 <PID_setting+0x384>)
 8003938:	f7fe f824 	bl	8001984 <lcd_puts>
			}
			if(i==1)
 800393c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8003940:	2b01      	cmp	r3, #1
 8003942:	d122      	bne.n	800398a <PID_setting+0x1fa>
			{
				lcd_puts_XY(0,0,"------>SET KP<------");
 8003944:	2100      	movs	r1, #0
 8003946:	2000      	movs	r0, #0
 8003948:	f7fe f84a 	bl	80019e0 <lcd_gotoxy>
 800394c:	4872      	ldr	r0, [pc, #456]	; (8003b18 <PID_setting+0x388>)
 800394e:	f7fe f819 	bl	8001984 <lcd_puts>
				sprintf(Buffer,"Last KP= %07.4f  ",PID.Kp);
 8003952:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <PID_setting+0x37c>)
 8003954:	f103 0408 	add.w	r4, r3, #8
 8003958:	e9d4 3400 	ldrd	r3, r4, [r4]
 800395c:	f107 0010 	add.w	r0, r7, #16
 8003960:	461a      	mov	r2, r3
 8003962:	4623      	mov	r3, r4
 8003964:	496d      	ldr	r1, [pc, #436]	; (8003b1c <PID_setting+0x38c>)
 8003966:	f007 fea5 	bl	800b6b4 <siprintf>
				lcd_puts_XY(2,2,Buffer);
 800396a:	2102      	movs	r1, #2
 800396c:	2002      	movs	r0, #2
 800396e:	f7fe f837 	bl	80019e0 <lcd_gotoxy>
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe f804 	bl	8001984 <lcd_puts>
				lcd_puts_XY(3,3,"NEW KP= ");
 800397c:	2103      	movs	r1, #3
 800397e:	2003      	movs	r0, #3
 8003980:	f7fe f82e 	bl	80019e0 <lcd_gotoxy>
 8003984:	4866      	ldr	r0, [pc, #408]	; (8003b20 <PID_setting+0x390>)
 8003986:	f7fd fffd 	bl	8001984 <lcd_puts>
			}
			if(i==2)
 800398a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800398e:	2b02      	cmp	r3, #2
 8003990:	d122      	bne.n	80039d8 <PID_setting+0x248>
			{
				lcd_puts_XY(0,0,"------>SET KI<------");
 8003992:	2100      	movs	r1, #0
 8003994:	2000      	movs	r0, #0
 8003996:	f7fe f823 	bl	80019e0 <lcd_gotoxy>
 800399a:	4862      	ldr	r0, [pc, #392]	; (8003b24 <PID_setting+0x394>)
 800399c:	f7fd fff2 	bl	8001984 <lcd_puts>
				sprintf(Buffer,"Last KI= %07.4f  ",PID.Ki);
 80039a0:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <PID_setting+0x37c>)
 80039a2:	f103 0410 	add.w	r4, r3, #16
 80039a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80039aa:	f107 0010 	add.w	r0, r7, #16
 80039ae:	461a      	mov	r2, r3
 80039b0:	4623      	mov	r3, r4
 80039b2:	495d      	ldr	r1, [pc, #372]	; (8003b28 <PID_setting+0x398>)
 80039b4:	f007 fe7e 	bl	800b6b4 <siprintf>
				lcd_puts_XY(2,2,Buffer);
 80039b8:	2102      	movs	r1, #2
 80039ba:	2002      	movs	r0, #2
 80039bc:	f7fe f810 	bl	80019e0 <lcd_gotoxy>
 80039c0:	f107 0310 	add.w	r3, r7, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd ffdd 	bl	8001984 <lcd_puts>
				lcd_puts_XY(3,3,"NEW KI= ");
 80039ca:	2103      	movs	r1, #3
 80039cc:	2003      	movs	r0, #3
 80039ce:	f7fe f807 	bl	80019e0 <lcd_gotoxy>
 80039d2:	4856      	ldr	r0, [pc, #344]	; (8003b2c <PID_setting+0x39c>)
 80039d4:	f7fd ffd6 	bl	8001984 <lcd_puts>
			}
			if(i==3)
 80039d8:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d122      	bne.n	8003a26 <PID_setting+0x296>
			{
				lcd_puts_XY(0,0,"------>SET KD<------");
 80039e0:	2100      	movs	r1, #0
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fd fffc 	bl	80019e0 <lcd_gotoxy>
 80039e8:	4851      	ldr	r0, [pc, #324]	; (8003b30 <PID_setting+0x3a0>)
 80039ea:	f7fd ffcb 	bl	8001984 <lcd_puts>
				sprintf(Buffer,"Last KD= %07.4f  ",PID.Kd);
 80039ee:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <PID_setting+0x37c>)
 80039f0:	f103 0418 	add.w	r4, r3, #24
 80039f4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80039f8:	f107 0010 	add.w	r0, r7, #16
 80039fc:	461a      	mov	r2, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	494c      	ldr	r1, [pc, #304]	; (8003b34 <PID_setting+0x3a4>)
 8003a02:	f007 fe57 	bl	800b6b4 <siprintf>
				lcd_puts_XY(2,2,Buffer);
 8003a06:	2102      	movs	r1, #2
 8003a08:	2002      	movs	r0, #2
 8003a0a:	f7fd ffe9 	bl	80019e0 <lcd_gotoxy>
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd ffb6 	bl	8001984 <lcd_puts>
				lcd_puts_XY(3,3,"NEW KD= ");
 8003a18:	2103      	movs	r1, #3
 8003a1a:	2003      	movs	r0, #3
 8003a1c:	f7fd ffe0 	bl	80019e0 <lcd_gotoxy>
 8003a20:	4845      	ldr	r0, [pc, #276]	; (8003b38 <PID_setting+0x3a8>)
 8003a22:	f7fd ffaf 	bl	8001984 <lcd_puts>
			}

			Get_Number(NUMBER);
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 f8b7 	bl	8003b9c <Get_Number>
			if(Status.PID_OK)
 8003a2e:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <PID_setting+0x368>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8094 	beq.w	8003b66 <PID_setting+0x3d6>
			{
				Prev_Num = ok;
 8003a3e:	230e      	movs	r3, #14
 8003a40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				x = atof(NUMBER);
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f006 ffc6 	bl	800a9d8 <atof>
 8003a4c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				if(x > 999) x = 999;
 8003a50:	a323      	add	r3, pc, #140	; (adr r3, 8003ae0 <PID_setting+0x350>)
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a5a:	f7fc ffcd 	bl	80009f8 <__aeabi_dcmpgt>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <PID_setting+0x2de>
 8003a64:	a41e      	add	r4, pc, #120	; (adr r4, 8003ae0 <PID_setting+0x350>)
 8003a66:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003a6a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
				switch(i)
 8003a6e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d87a      	bhi.n	8003b6c <PID_setting+0x3dc>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <PID_setting+0x2ec>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003b41 	.word	0x08003b41
 8003a84:	08003b4d 	.word	0x08003b4d
 8003a88:	08003b59 	.word	0x08003b59
				{
					case 0:
						if(x > 90) x = 90;
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <PID_setting+0x3ac>)
 8003a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a96:	f7fc ffaf 	bl	80009f8 <__aeabi_dcmpgt>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <PID_setting+0x31a>
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	4c25      	ldr	r4, [pc, #148]	; (8003b3c <PID_setting+0x3ac>)
 8003aa6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
						if(x < 0) x = 0;
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ab6:	f7fc ff81 	bl	80009bc <__aeabi_dcmplt>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <PID_setting+0x33c>
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
						PID.SetPoint = x;
 8003acc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ad0:	f7fc ffb2 	bl	8000a38 <__aeabi_d2iz>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b25a      	sxtb	r2, r3
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <PID_setting+0x37c>)
 8003ada:	701a      	strb	r2, [r3, #0]
					break;
 8003adc:	e046      	b.n	8003b6c <PID_setting+0x3dc>
 8003ade:	bf00      	nop
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	408f3800 	.word	0x408f3800
 8003ae8:	0800f008 	.word	0x0800f008
 8003aec:	0800f014 	.word	0x0800f014
 8003af0:	0800f018 	.word	0x0800f018
 8003af4:	0800f01c 	.word	0x0800f01c
 8003af8:	200009f8 	.word	0x200009f8
 8003afc:	0800f020 	.word	0x0800f020
 8003b00:	0800f024 	.word	0x0800f024
 8003b04:	0800f028 	.word	0x0800f028
 8003b08:	0800f02c 	.word	0x0800f02c
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	0800f044 	.word	0x0800f044
 8003b14:	0800f054 	.word	0x0800f054
 8003b18:	0800f060 	.word	0x0800f060
 8003b1c:	0800f078 	.word	0x0800f078
 8003b20:	0800f08c 	.word	0x0800f08c
 8003b24:	0800f098 	.word	0x0800f098
 8003b28:	0800f0b0 	.word	0x0800f0b0
 8003b2c:	0800f0c4 	.word	0x0800f0c4
 8003b30:	0800f0d0 	.word	0x0800f0d0
 8003b34:	0800f0e8 	.word	0x0800f0e8
 8003b38:	0800f0fc 	.word	0x0800f0fc
 8003b3c:	40568000 	.word	0x40568000
					case 1:
						PID.Kp = x;
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <PID_setting+0x404>)
 8003b42:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003b46:	e9c2 3402 	strd	r3, r4, [r2, #8]
					break;
 8003b4a:	e00f      	b.n	8003b6c <PID_setting+0x3dc>
					case 2:
						PID.Ki = x;
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <PID_setting+0x404>)
 8003b4e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003b52:	e9c2 3404 	strd	r3, r4, [r2, #16]
					break;
 8003b56:	e009      	b.n	8003b6c <PID_setting+0x3dc>
					case 3:
						PID.Kd = x;
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <PID_setting+0x404>)
 8003b5a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003b5e:	e9c2 3406 	strd	r3, r4, [r2, #24]
					break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <PID_setting+0x3dc>
				}
			}else Prev_Num = exit;
 8003b66:	230d      	movs	r3, #13
 8003b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		}
	}while(Status.whiles);
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <PID_setting+0x408>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f47f ae15 	bne.w	80037a6 <PID_setting+0x16>

	Status.whiles=1;
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <PID_setting+0x408>)
 8003b7e:	7813      	ldrb	r3, [r2, #0]
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	7013      	strb	r3, [r2, #0]
	lcd_clear();
 8003b86:	f7fd feed 	bl	8001964 <lcd_clear>
}
 8003b8a:	bf00      	nop
 8003b8c:	373c      	adds	r7, #60	; 0x3c
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000000 	.word	0x20000000
 8003b98:	200009f8 	.word	0x200009f8

08003b9c <Get_Number>:
 ***********************************************               **************************************************
 ***********************************************   Get Number  **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void Get_Number (char *NUMBER)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  char Prev_Num=ok ,Num;
 8003ba4:	230e      	movs	r3, #14
 8003ba6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  for(i=0;i<7;i++)*(NUMBER+i)=' ';
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73bb      	strb	r3, [r7, #14]
 8003bac:	e007      	b.n	8003bbe <Get_Number+0x22>
 8003bae:	7bbb      	ldrb	r3, [r7, #14]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	73bb      	strb	r3, [r7, #14]
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d9f4      	bls.n	8003bae <Get_Number+0x12>
  i=0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73bb      	strb	r3, [r7, #14]

  Status.Get_Num=1;
 8003bc8:	4a4e      	ldr	r2, [pc, #312]	; (8003d04 <Get_Number+0x168>)
 8003bca:	7813      	ldrb	r3, [r2, #0]
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	7013      	strb	r3, [r2, #0]
  while(Status.Get_Num)
 8003bd2:	e084      	b.n	8003cde <Get_Number+0x142>
  {
    Num = GET_KEY();
 8003bd4:	f7fe fbee 	bl	80023b4 <GET_KEY>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	737b      	strb	r3, [r7, #13]
    if(Prev_Num != Num && Num !=16)
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	7b7b      	ldrb	r3, [r7, #13]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d07a      	beq.n	8003cda <Get_Number+0x13e>
 8003be4:	7b7b      	ldrb	r3, [r7, #13]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d077      	beq.n	8003cda <Get_Number+0x13e>
    {
       switch (Num)
 8003bea:	7b7b      	ldrb	r3, [r7, #13]
 8003bec:	3b0a      	subs	r3, #10
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d854      	bhi.n	8003c9c <Get_Number+0x100>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <Get_Number+0x5c>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c11 	.word	0x08003c11
 8003bfc:	08003cd5 	.word	0x08003cd5
 8003c00:	08003cd5 	.word	0x08003cd5
 8003c04:	08003c53 	.word	0x08003c53
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c69 	.word	0x08003c69
       {
        case cls:
            if(i>0)i--;
 8003c10:	7bbb      	ldrb	r3, [r7, #14]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <Get_Number+0x80>
 8003c16:	7bbb      	ldrb	r3, [r7, #14]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	73bb      	strb	r3, [r7, #14]
            NUMBER[i] = ' ';
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	2220      	movs	r2, #32
 8003c24:	701a      	strb	r2, [r3, #0]
            lcd_gotoxy(11+i, 3);
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	330b      	adds	r3, #11
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2103      	movs	r1, #3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fed6 	bl	80019e0 <lcd_gotoxy>
            lcd_putch(' ');
 8003c34:	2020      	movs	r0, #32
 8003c36:	f7fd febf 	bl	80019b8 <lcd_putch>
        break;
 8003c3a:	e04e      	b.n	8003cda <Get_Number+0x13e>

        case ok:
        	Status.Get_Num = 0;
 8003c3c:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <Get_Number+0x168>)
 8003c3e:	7813      	ldrb	r3, [r2, #0]
 8003c40:	f36f 1345 	bfc	r3, #5, #1
 8003c44:	7013      	strb	r3, [r2, #0]
            Status.PID_OK = 1;
 8003c46:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <Get_Number+0x168>)
 8003c48:	7813      	ldrb	r3, [r2, #0]
 8003c4a:	f043 0310 	orr.w	r3, r3, #16
 8003c4e:	7013      	strb	r3, [r2, #0]
        break;
 8003c50:	e043      	b.n	8003cda <Get_Number+0x13e>

        case exit:
        	Status.Get_Num = 0;
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <Get_Number+0x168>)
 8003c54:	7813      	ldrb	r3, [r2, #0]
 8003c56:	f36f 1345 	bfc	r3, #5, #1
 8003c5a:	7013      	strb	r3, [r2, #0]
            Status.PID_OK = 0;
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <Get_Number+0x168>)
 8003c5e:	7813      	ldrb	r3, [r2, #0]
 8003c60:	f36f 1304 	bfc	r3, #4, #1
 8003c64:	7013      	strb	r3, [r2, #0]
        break;
 8003c66:	e038      	b.n	8003cda <Get_Number+0x13e>

        case down:
        break;

        case dot:
		if(i<7)
 8003c68:	7bbb      	ldrb	r3, [r7, #14]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d834      	bhi.n	8003cd8 <Get_Number+0x13c>
		{
		  NUMBER[i] = '.';
 8003c6e:	7bbb      	ldrb	r3, [r7, #14]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	222e      	movs	r2, #46	; 0x2e
 8003c76:	701a      	strb	r2, [r3, #0]
		  lcd_gotoxy(11+i, 3);
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	330b      	adds	r3, #11
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2103      	movs	r1, #3
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd fead 	bl	80019e0 <lcd_gotoxy>
		  lcd_putch(NUMBER[i]);
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fe92 	bl	80019b8 <lcd_putch>
		  i++;
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	3301      	adds	r3, #1
 8003c98:	73bb      	strb	r3, [r7, #14]
		}
        break;
 8003c9a:	e01d      	b.n	8003cd8 <Get_Number+0x13c>

        default:
            if(i<8)
 8003c9c:	7bbb      	ldrb	r3, [r7, #14]
 8003c9e:	2b07      	cmp	r3, #7
 8003ca0:	d81b      	bhi.n	8003cda <Get_Number+0x13e>
            {
              NUMBER[i] = Num + '0';
 8003ca2:	7bbb      	ldrb	r3, [r7, #14]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	7b7a      	ldrb	r2, [r7, #13]
 8003caa:	3230      	adds	r2, #48	; 0x30
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
    		  lcd_gotoxy(11+i, 3);
 8003cb0:	7bbb      	ldrb	r3, [r7, #14]
 8003cb2:	330b      	adds	r3, #11
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd fe91 	bl	80019e0 <lcd_gotoxy>
    		  lcd_putch(NUMBER[i]);
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fe76 	bl	80019b8 <lcd_putch>
              i++;
 8003ccc:	7bbb      	ldrb	r3, [r7, #14]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	73bb      	strb	r3, [r7, #14]
 8003cd2:	e002      	b.n	8003cda <Get_Number+0x13e>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <Get_Number+0x13e>
        break;
 8003cd8:	bf00      	nop
            }
       };

    }
    Prev_Num = Num;
 8003cda:	7b7b      	ldrb	r3, [r7, #13]
 8003cdc:	73fb      	strb	r3, [r7, #15]
  while(Status.Get_Num)
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <Get_Number+0x168>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f af73 	bne.w	8003bd4 <Get_Number+0x38>
  }
  Status.whiles=1;
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <Get_Number+0x168>)
 8003cf0:	7813      	ldrb	r3, [r2, #0]
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	7013      	strb	r3, [r2, #0]
  lcd_clear();
 8003cf8:	f7fd fe34 	bl	8001964 <lcd_clear>
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200009f8 	.word	0x200009f8

08003d08 <USART_Process_Data>:
 ***********************************************               **************************************************
 ***********************************************     ONLINE    **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void USART_Process_Data(void)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b08b      	sub	sp, #44	; 0x2c
 8003d0c:	af04      	add	r7, sp, #16
	float p,i,d;
	int sp,time;

	int z = sscanf(USARTbuffer,"kp%fki%fkd%fsp%dtime%d",&p,&i,&d,&sp,&time);
 8003d0e:	f107 010c 	add.w	r1, r7, #12
 8003d12:	f107 0210 	add.w	r2, r7, #16
 8003d16:	463b      	mov	r3, r7
 8003d18:	9302      	str	r3, [sp, #8]
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	460b      	mov	r3, r1
 8003d26:	493b      	ldr	r1, [pc, #236]	; (8003e14 <USART_Process_Data+0x10c>)
 8003d28:	483b      	ldr	r0, [pc, #236]	; (8003e18 <USART_Process_Data+0x110>)
 8003d2a:	f007 fce3 	bl	800b6f4 <siscanf>
 8003d2e:	6178      	str	r0, [r7, #20]

	if(z == 5)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d167      	bne.n	8003e06 <USART_Process_Data+0xfe>
	{
		PID.Kp = p;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fc fb75 	bl	8000428 <__aeabi_f2d>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <USART_Process_Data+0x114>)
 8003d44:	e9c2 3402 	strd	r3, r4, [r2, #8]
		PID.Ki = i;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fb6c 	bl	8000428 <__aeabi_f2d>
 8003d50:	4603      	mov	r3, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <USART_Process_Data+0x114>)
 8003d56:	e9c2 3404 	strd	r3, r4, [r2, #16]
		PID.Kd = d;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb63 	bl	8000428 <__aeabi_f2d>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <USART_Process_Data+0x114>)
 8003d68:	e9c2 3406 	strd	r3, r4, [r2, #24]
		PID.SetPoint = sp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	b25a      	sxtb	r2, r3
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <USART_Process_Data+0x114>)
 8003d72:	701a      	strb	r2, [r3, #0]

		if(time == 555) Status.motor = 1;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f240 222b 	movw	r2, #555	; 0x22b
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d104      	bne.n	8003d88 <USART_Process_Data+0x80>
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <USART_Process_Data+0x118>)
 8003d80:	7813      	ldrb	r3, [r2, #0]
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	7013      	strb	r3, [r2, #0]
		if(time == 444) Status.motor = 0;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8003d8e:	d104      	bne.n	8003d9a <USART_Process_Data+0x92>
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <USART_Process_Data+0x118>)
 8003d92:	7813      	ldrb	r3, [r2, #0]
 8003d94:	f36f 0300 	bfc	r3, #0, #1
 8003d98:	7013      	strb	r3, [r2, #0]
		if(time > 60) time = 60;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b3c      	cmp	r3, #60	; 0x3c
 8003d9e:	dd01      	ble.n	8003da4 <USART_Process_Data+0x9c>
 8003da0:	233c      	movs	r3, #60	; 0x3c
 8003da2:	603b      	str	r3, [r7, #0]
		PID.time = time;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <USART_Process_Data+0x114>)
 8003daa:	705a      	strb	r2, [r3, #1]

		Status.get_data=0;
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <USART_Process_Data+0x118>)
 8003dae:	7813      	ldrb	r3, [r2, #0]
 8003db0:	f36f 1386 	bfc	r3, #6, #1
 8003db4:	7013      	strb	r3, [r2, #0]
		if(Status.Online)
 8003db6:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <USART_Process_Data+0x118>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <USART_Process_Data+0xfe>
		{
			HAL_UART_Transmit(&huart1,(uint8_t*) "Y", 1, 20);
 8003dc4:	2314      	movs	r3, #20
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4916      	ldr	r1, [pc, #88]	; (8003e24 <USART_Process_Data+0x11c>)
 8003dca:	4817      	ldr	r0, [pc, #92]	; (8003e28 <USART_Process_Data+0x120>)
 8003dcc:	f003 f83d 	bl	8006e4a <HAL_UART_Transmit>
			HAL_Delay(20);
 8003dd0:	2014      	movs	r0, #20
 8003dd2:	f000 fafb 	bl	80043cc <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*) "Y", 1, 20);
 8003dd6:	2314      	movs	r3, #20
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4912      	ldr	r1, [pc, #72]	; (8003e24 <USART_Process_Data+0x11c>)
 8003ddc:	4812      	ldr	r0, [pc, #72]	; (8003e28 <USART_Process_Data+0x120>)
 8003dde:	f003 f834 	bl	8006e4a <HAL_UART_Transmit>
			HAL_Delay(20);
 8003de2:	2014      	movs	r0, #20
 8003de4:	f000 faf2 	bl	80043cc <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*) "Y", 1, 20);
 8003de8:	2314      	movs	r3, #20
 8003dea:	2201      	movs	r2, #1
 8003dec:	490d      	ldr	r1, [pc, #52]	; (8003e24 <USART_Process_Data+0x11c>)
 8003dee:	480e      	ldr	r0, [pc, #56]	; (8003e28 <USART_Process_Data+0x120>)
 8003df0:	f003 f82b 	bl	8006e4a <HAL_UART_Transmit>
			HAL_Delay(20);
 8003df4:	2014      	movs	r0, #20
 8003df6:	f000 fae9 	bl	80043cc <HAL_Delay>
			HAL_UART_Transmit(&huart1,(uint8_t*) "Y", 1, 20);
 8003dfa:	2314      	movs	r3, #20
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	4909      	ldr	r1, [pc, #36]	; (8003e24 <USART_Process_Data+0x11c>)
 8003e00:	4809      	ldr	r0, [pc, #36]	; (8003e28 <USART_Process_Data+0x120>)
 8003e02:	f003 f822 	bl	8006e4a <HAL_UART_Transmit>
		}
	}

	UsartNewDataLineCount=0;
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <USART_Process_Data+0x124>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	0800eea8 	.word	0x0800eea8
 8003e18:	200005d0 	.word	0x200005d0
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	200009f8 	.word	0x200009f8
 8003e24:	0800f108 	.word	0x0800f108
 8003e28:	20000a00 	.word	0x20000a00
 8003e2c:	2000038f 	.word	0x2000038f

08003e30 <WiFi_Setting>:
 ***********************************************               **************************************************
 ***********************************************      WiFi     **************************************************
 ***********************************************               **************************************************
 ****************************************************************************************************************/
void WiFi_Setting(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
	char Num;

	lcd_clear();
 8003e36:	f7fd fd95 	bl	8001964 <lcd_clear>
	lcd_puts_XY(0,0,"Connect to WiFi:");
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7fd fdcf 	bl	80019e0 <lcd_gotoxy>
 8003e42:	4825      	ldr	r0, [pc, #148]	; (8003ed8 <WiFi_Setting+0xa8>)
 8003e44:	f7fd fd9e 	bl	8001984 <lcd_puts>
	lcd_puts_XY(1,1,">> AeroPendulum <<");
 8003e48:	2101      	movs	r1, #1
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7fd fdc8 	bl	80019e0 <lcd_gotoxy>
 8003e50:	4822      	ldr	r0, [pc, #136]	; (8003edc <WiFi_Setting+0xac>)
 8003e52:	f7fd fd97 	bl	8001984 <lcd_puts>
	lcd_puts_XY(0,2,"And Type in browser:");
 8003e56:	2102      	movs	r1, #2
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7fd fdc1 	bl	80019e0 <lcd_gotoxy>
 8003e5e:	4820      	ldr	r0, [pc, #128]	; (8003ee0 <WiFi_Setting+0xb0>)
 8003e60:	f7fd fd90 	bl	8001984 <lcd_puts>
	lcd_puts_XY(1,3,">> 192.168.4.1 <<");
 8003e64:	2103      	movs	r1, #3
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fd fdba 	bl	80019e0 <lcd_gotoxy>
 8003e6c:	481d      	ldr	r0, [pc, #116]	; (8003ee4 <WiFi_Setting+0xb4>)
 8003e6e:	f7fd fd89 	bl	8001984 <lcd_puts>

	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8003e72:	2201      	movs	r2, #1
 8003e74:	2110      	movs	r1, #16
 8003e76:	481c      	ldr	r0, [pc, #112]	; (8003ee8 <WiFi_Setting+0xb8>)
 8003e78:	f000 ffa8 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2120      	movs	r1, #32
 8003e80:	4819      	ldr	r0, [pc, #100]	; (8003ee8 <WiFi_Setting+0xb8>)
 8003e82:	f000 ffa3 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003e86:	20fa      	movs	r0, #250	; 0xfa
 8003e88:	f000 faa0 	bl	80043cc <HAL_Delay>
	HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2120      	movs	r1, #32
 8003e90:	4815      	ldr	r0, [pc, #84]	; (8003ee8 <WiFi_Setting+0xb8>)
 8003e92:	f000 ff9b 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8003e96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e9a:	f000 fa97 	bl	80043cc <HAL_Delay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	4811      	ldr	r0, [pc, #68]	; (8003ee8 <WiFi_Setting+0xb8>)
 8003ea4:	f000 ff92 	bl	8004dcc <HAL_GPIO_WritePin>

	while(Status.whiles)
 8003ea8:	e00b      	b.n	8003ec2 <WiFi_Setting+0x92>
	{

		Num = GET_KEY();
 8003eaa:	f7fe fa83 	bl	80023b4 <GET_KEY>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
		if(Num == exit)	Status.whiles=0;
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	2b0d      	cmp	r3, #13
 8003eb6:	d104      	bne.n	8003ec2 <WiFi_Setting+0x92>
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <WiFi_Setting+0xbc>)
 8003eba:	7813      	ldrb	r3, [r2, #0]
 8003ebc:	f36f 0382 	bfc	r3, #2, #1
 8003ec0:	7013      	strb	r3, [r2, #0]
	while(Status.whiles)
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <WiFi_Setting+0xbc>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ec      	bne.n	8003eaa <WiFi_Setting+0x7a>
	}
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	0800f10c 	.word	0x0800f10c
 8003edc:	0800f120 	.word	0x0800f120
 8003ee0:	0800f134 	.word	0x0800f134
 8003ee4:	0800f14c 	.word	0x0800f14c
 8003ee8:	40010c00 	.word	0x40010c00
 8003eec:	200009f8 	.word	0x200009f8

08003ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6193      	str	r3, [r2, #24]
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	61d3      	str	r3, [r2, #28]
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_MspInit+0x5c>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_MspInit+0x60>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_MspInit+0x60>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40010000 	.word	0x40010000

08003f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d14e      	bne.n	800401e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4a28      	ldr	r2, [pc, #160]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	4b26      	ldr	r3, [pc, #152]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003f9e:	f043 0304 	orr.w	r3, r3, #4
 8003fa2:	6193      	str	r3, [r2, #24]
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003fb6:	f043 0308 	orr.w	r3, r3, #8
 8003fba:	6193      	str	r3, [r2, #24]
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4813      	ldr	r0, [pc, #76]	; (800402c <HAL_TIM_Encoder_MspInit+0xcc>)
 8003fde:	f000 fd9b 	bl	8004b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	480e      	ldr	r0, [pc, #56]	; (8004030 <HAL_TIM_Encoder_MspInit+0xd0>)
 8003ff6:	f000 fd8f 	bl	8004b18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <HAL_TIM_Encoder_MspInit+0xd4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	4a06      	ldr	r2, [pc, #24]	; (8004034 <HAL_TIM_Encoder_MspInit+0xd4>)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800401e:	bf00      	nop
 8004020:	3728      	adds	r7, #40	; 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	40010800 	.word	0x40010800
 8004030:	40010c00 	.word	0x40010c00
 8004034:	40010000 	.word	0x40010000

08004038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_TIM_PWM_MspInit+0x34>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10b      	bne.n	8004062 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_TIM_PWM_MspInit+0x38>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4a08      	ldr	r2, [pc, #32]	; (8004070 <HAL_TIM_PWM_MspInit+0x38>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	61d3      	str	r3, [r2, #28]
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_TIM_PWM_MspInit+0x38>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40000800 	.word	0x40000800
 8004070:	40021000 	.word	0x40021000

08004074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 0310 	add.w	r3, r7, #16
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_TIM_MspPostInit+0x58>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d117      	bne.n	80040c4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_TIM_MspPostInit+0x5c>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_TIM_MspPostInit+0x5c>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6193      	str	r3, [r2, #24]
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_TIM_MspPostInit+0x5c>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	4619      	mov	r1, r3
 80040be:	4805      	ldr	r0, [pc, #20]	; (80040d4 <HAL_TIM_MspPostInit+0x60>)
 80040c0:	f000 fd2a 	bl	8004b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40010c00 	.word	0x40010c00

080040d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_UART_MspInit+0x9c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d139      	bne.n	800416c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040f8:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HAL_UART_MspInit+0xa0>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <HAL_UART_MspInit+0xa0>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004102:	6193      	str	r3, [r2, #24]
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_UART_MspInit+0xa0>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_UART_MspInit+0xa0>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_UART_MspInit+0xa0>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	6193      	str	r3, [r2, #24]
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_UART_MspInit+0xa0>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800412c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4619      	mov	r1, r3
 800413c:	480f      	ldr	r0, [pc, #60]	; (800417c <HAL_UART_MspInit+0xa4>)
 800413e:	f000 fceb 	bl	8004b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	4619      	mov	r1, r3
 8004156:	4809      	ldr	r0, [pc, #36]	; (800417c <HAL_UART_MspInit+0xa4>)
 8004158:	f000 fcde 	bl	8004b18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	2100      	movs	r1, #0
 8004160:	2025      	movs	r0, #37	; 0x25
 8004162:	f000 fa2c 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004166:	2025      	movs	r0, #37	; 0x25
 8004168:	f000 fa45 	bl	80045f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800416c:	bf00      	nop
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40013800 	.word	0x40013800
 8004178:	40021000 	.word	0x40021000
 800417c:	40010800 	.word	0x40010800

08004180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004190:	e7fe      	b.n	8004190 <HardFault_Handler+0x4>

08004192 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <MemManage_Handler+0x4>

08004198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <BusFault_Handler+0x4>

0800419e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a2:	e7fe      	b.n	80041a2 <UsageFault_Handler+0x4>

080041a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f8e2 	bl	8004394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80041da:	f000 ff16 	bl	800500a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000175c 	.word	0x2000175c

080041e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <USART1_IRQHandler+0x10>)
 80041ee:	f002 ff19 	bl	8007024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000a00 	.word	0x20000a00

080041fc <_sbrk>:
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <_sbrk+0x50>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <_sbrk+0x16>
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <_sbrk+0x50>)
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <_sbrk+0x54>)
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <_sbrk+0x50>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <_sbrk+0x50>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	466a      	mov	r2, sp
 8004222:	4293      	cmp	r3, r2
 8004224:	d907      	bls.n	8004236 <_sbrk+0x3a>
 8004226:	f006 fbdf 	bl	800a9e8 <__errno>
 800422a:	4602      	mov	r2, r0
 800422c:	230c      	movs	r3, #12
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	e006      	b.n	8004244 <_sbrk+0x48>
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <_sbrk+0x50>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	4a03      	ldr	r2, [pc, #12]	; (800424c <_sbrk+0x50>)
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000394 	.word	0x20000394
 8004250:	200019d0 	.word	0x200019d0

08004254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <SystemInit+0x5c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <SystemInit+0x5c>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <SystemInit+0x5c>)
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4911      	ldr	r1, [pc, #68]	; (80042b0 <SystemInit+0x5c>)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <SystemInit+0x60>)
 800426c:	4013      	ands	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <SystemInit+0x5c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0e      	ldr	r2, [pc, #56]	; (80042b0 <SystemInit+0x5c>)
 8004276:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <SystemInit+0x5c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <SystemInit+0x5c>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <SystemInit+0x5c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <SystemInit+0x5c>)
 8004292:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004296:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <SystemInit+0x5c>)
 800429a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800429e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SystemInit+0x64>)
 80042a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	40021000 	.word	0x40021000
 80042b4:	f8ff0000 	.word	0xf8ff0000
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <Reset_Handler>:
 80042bc:	2100      	movs	r1, #0
 80042be:	e003      	b.n	80042c8 <LoopCopyDataInit>

080042c0 <CopyDataInit>:
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <LoopFillZerobss+0x14>)
 80042c2:	585b      	ldr	r3, [r3, r1]
 80042c4:	5043      	str	r3, [r0, r1]
 80042c6:	3104      	adds	r1, #4

080042c8 <LoopCopyDataInit>:
 80042c8:	480a      	ldr	r0, [pc, #40]	; (80042f4 <LoopFillZerobss+0x18>)
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <LoopFillZerobss+0x1c>)
 80042cc:	1842      	adds	r2, r0, r1
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3f6      	bcc.n	80042c0 <CopyDataInit>
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <LoopFillZerobss+0x20>)
 80042d4:	e002      	b.n	80042dc <LoopFillZerobss>

080042d6 <FillZerobss>:
 80042d6:	2300      	movs	r3, #0
 80042d8:	f842 3b04 	str.w	r3, [r2], #4

080042dc <LoopFillZerobss>:
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <LoopFillZerobss+0x24>)
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3f9      	bcc.n	80042d6 <FillZerobss>
 80042e2:	f7ff ffb7 	bl	8004254 <SystemInit>
 80042e6:	f006 fb85 	bl	800a9f4 <__libc_init_array>
 80042ea:	f7fd fc97 	bl	8001c1c <main>
 80042ee:	4770      	bx	lr
 80042f0:	0800f63c 	.word	0x0800f63c
 80042f4:	20000000 	.word	0x20000000
 80042f8:	2000036c 	.word	0x2000036c
 80042fc:	20000370 	.word	0x20000370
 8004300:	200019cc 	.word	0x200019cc

08004304 <ADC1_2_IRQHandler>:
 8004304:	e7fe      	b.n	8004304 <ADC1_2_IRQHandler>
	...

08004308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_Init+0x28>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a07      	ldr	r2, [pc, #28]	; (8004330 <HAL_Init+0x28>)
 8004312:	f043 0310 	orr.w	r3, r3, #16
 8004316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004318:	2003      	movs	r0, #3
 800431a:	f000 f945 	bl	80045a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800431e:	2000      	movs	r0, #0
 8004320:	f000 f808 	bl	8004334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004324:	f7ff fdea 	bl	8003efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_InitTick+0x54>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_InitTick+0x58>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	4619      	mov	r1, r3
 8004346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800434a:	fbb3 f3f1 	udiv	r3, r3, r1
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f95d 	bl	8004612 <HAL_SYSTICK_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e00e      	b.n	8004380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d80a      	bhi.n	800437e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004368:	2200      	movs	r2, #0
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	f000 f925 	bl	80045be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <HAL_InitTick+0x5c>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000020 	.word	0x20000020
 800438c:	20000028 	.word	0x20000028
 8004390:	20000024 	.word	0x20000024

08004394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_IncTick+0x1c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_IncTick+0x20>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	4a03      	ldr	r2, [pc, #12]	; (80043b4 <HAL_IncTick+0x20>)
 80043a6:	6013      	str	r3, [r2, #0]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	20000028 	.word	0x20000028
 80043b4:	20000a98 	.word	0x20000a98

080043b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return uwTick;
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <HAL_GetTick+0x10>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000a98 	.word	0x20000a98

080043cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff fff0 	bl	80043b8 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d005      	beq.n	80043f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_Delay+0x40>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043f2:	bf00      	nop
 80043f4:	f7ff ffe0 	bl	80043b8 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d8f7      	bhi.n	80043f4 <HAL_Delay+0x28>
  {
  }
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000028 	.word	0x20000028

08004410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800442c:	4013      	ands	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	60d3      	str	r3, [r2, #12]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <__NVIC_GetPriorityGrouping+0x18>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f003 0307 	and.w	r3, r3, #7
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db0b      	blt.n	800449e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	f003 021f 	and.w	r2, r3, #31
 800448c:	4906      	ldr	r1, [pc, #24]	; (80044a8 <__NVIC_EnableIRQ+0x34>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2001      	movs	r0, #1
 8004496:	fa00 f202 	lsl.w	r2, r0, r2
 800449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	e000e100 	.word	0xe000e100

080044ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	db0a      	blt.n	80044d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	490c      	ldr	r1, [pc, #48]	; (80044f8 <__NVIC_SetPriority+0x4c>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	440b      	add	r3, r1
 80044d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d4:	e00a      	b.n	80044ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4908      	ldr	r1, [pc, #32]	; (80044fc <__NVIC_SetPriority+0x50>)
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	3b04      	subs	r3, #4
 80044e4:	0112      	lsls	r2, r2, #4
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	440b      	add	r3, r1
 80044ea:	761a      	strb	r2, [r3, #24]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e100 	.word	0xe000e100
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f1c3 0307 	rsb	r3, r3, #7
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf28      	it	cs
 800451e:	2304      	movcs	r3, #4
 8004520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3304      	adds	r3, #4
 8004526:	2b06      	cmp	r3, #6
 8004528:	d902      	bls.n	8004530 <NVIC_EncodePriority+0x30>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3b03      	subs	r3, #3
 800452e:	e000      	b.n	8004532 <NVIC_EncodePriority+0x32>
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	401a      	ands	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004548:	f04f 31ff 	mov.w	r1, #4294967295
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	43d9      	mvns	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004558:	4313      	orrs	r3, r2
         );
}
 800455a:	4618      	mov	r0, r3
 800455c:	3724      	adds	r7, #36	; 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004574:	d301      	bcc.n	800457a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004576:	2301      	movs	r3, #1
 8004578:	e00f      	b.n	800459a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <SysTick_Config+0x40>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3b01      	subs	r3, #1
 8004580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004582:	210f      	movs	r1, #15
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	f7ff ff90 	bl	80044ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <SysTick_Config+0x40>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <SysTick_Config+0x40>)
 8004594:	2207      	movs	r2, #7
 8004596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	e000e010 	.word	0xe000e010

080045a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ff2d 	bl	8004410 <__NVIC_SetPriorityGrouping>
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	4603      	mov	r3, r0
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	607a      	str	r2, [r7, #4]
 80045ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d0:	f7ff ff42 	bl	8004458 <__NVIC_GetPriorityGrouping>
 80045d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	6978      	ldr	r0, [r7, #20]
 80045dc:	f7ff ff90 	bl	8004500 <NVIC_EncodePriority>
 80045e0:	4602      	mov	r2, r0
 80045e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e6:	4611      	mov	r1, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff5f 	bl	80044ac <__NVIC_SetPriority>
}
 80045ee:	bf00      	nop
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff35 	bl	8004474 <__NVIC_EnableIRQ>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffa2 	bl	8004564 <SysTick_Config>
 8004620:	4603      	mov	r3, r0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800463e:	2b02      	cmp	r3, #2
 8004640:	d005      	beq.n	800464e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e051      	b.n	80046f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 020e 	bic.w	r2, r2, #14
 800465c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a22      	ldr	r2, [pc, #136]	; (80046fc <HAL_DMA_Abort_IT+0xd0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d029      	beq.n	80046cc <HAL_DMA_Abort_IT+0xa0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a20      	ldr	r2, [pc, #128]	; (8004700 <HAL_DMA_Abort_IT+0xd4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_Abort_IT+0x9c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <HAL_DMA_Abort_IT+0xd8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01a      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x96>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <HAL_DMA_Abort_IT+0xdc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d012      	beq.n	80046bc <HAL_DMA_Abort_IT+0x90>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_DMA_Abort_IT+0xe0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00a      	beq.n	80046b6 <HAL_DMA_Abort_IT+0x8a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1a      	ldr	r2, [pc, #104]	; (8004710 <HAL_DMA_Abort_IT+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d102      	bne.n	80046b0 <HAL_DMA_Abort_IT+0x84>
 80046aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046ae:	e00e      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b4:	e00b      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ba:	e008      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c0:	e005      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046c6:	e002      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046c8:	2310      	movs	r3, #16
 80046ca:	e000      	b.n	80046ce <HAL_DMA_Abort_IT+0xa2>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_DMA_Abort_IT+0xe8>)
 80046d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
    } 
  }
  return status;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40020008 	.word	0x40020008
 8004700:	4002001c 	.word	0x4002001c
 8004704:	40020030 	.word	0x40020030
 8004708:	40020044 	.word	0x40020044
 800470c:	40020058 	.word	0x40020058
 8004710:	4002006c 	.word	0x4002006c
 8004714:	40020000 	.word	0x40020000

08004718 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <HAL_FLASH_Program+0xd8>)
 8004734:	7e1b      	ldrb	r3, [r3, #24]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_FLASH_Program+0x26>
 800473a:	2302      	movs	r3, #2
 800473c:	e054      	b.n	80047e8 <HAL_FLASH_Program+0xd0>
 800473e:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_FLASH_Program+0xd8>)
 8004740:	2201      	movs	r2, #1
 8004742:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004744:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004748:	f000 f8a8 	bl	800489c <FLASH_WaitForLastOperation>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d144      	bne.n	80047e0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	757b      	strb	r3, [r7, #21]
 8004760:	e007      	b.n	8004772 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d102      	bne.n	800476e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004768:	2302      	movs	r3, #2
 800476a:	757b      	strb	r3, [r7, #21]
 800476c:	e001      	b.n	8004772 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800476e:	2304      	movs	r3, #4
 8004770:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004772:	2300      	movs	r3, #0
 8004774:	75bb      	strb	r3, [r7, #22]
 8004776:	e02d      	b.n	80047d4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004778:	7dbb      	ldrb	r3, [r7, #22]
 800477a:	005a      	lsls	r2, r3, #1
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	eb02 0c03 	add.w	ip, r2, r3
 8004782:	7dbb      	ldrb	r3, [r7, #22]
 8004784:	0119      	lsls	r1, r3, #4
 8004786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800478a:	f1c1 0620 	rsb	r6, r1, #32
 800478e:	f1a1 0020 	sub.w	r0, r1, #32
 8004792:	fa22 f401 	lsr.w	r4, r2, r1
 8004796:	fa03 f606 	lsl.w	r6, r3, r6
 800479a:	4334      	orrs	r4, r6
 800479c:	fa23 f000 	lsr.w	r0, r3, r0
 80047a0:	4304      	orrs	r4, r0
 80047a2:	fa23 f501 	lsr.w	r5, r3, r1
 80047a6:	b2a3      	uxth	r3, r4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4660      	mov	r0, ip
 80047ac:	f000 f85a 	bl	8004864 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047b4:	f000 f872 	bl	800489c <FLASH_WaitForLastOperation>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_FLASH_Program+0xdc>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_FLASH_Program+0xdc>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80047ce:	7dbb      	ldrb	r3, [r7, #22]
 80047d0:	3301      	adds	r3, #1
 80047d2:	75bb      	strb	r3, [r7, #22]
 80047d4:	7dba      	ldrb	r2, [r7, #22]
 80047d6:	7d7b      	ldrb	r3, [r7, #21]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3cd      	bcc.n	8004778 <HAL_FLASH_Program+0x60>
 80047dc:	e000      	b.n	80047e0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80047de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_FLASH_Program+0xd8>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	761a      	strb	r2, [r3, #24]

  return status;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f0:	20000aa0 	.word	0x20000aa0
 80047f4:	40022000 	.word	0x40022000

080047f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_FLASH_Unlock+0x40>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_FLASH_Unlock+0x40>)
 8004810:	4a0a      	ldr	r2, [pc, #40]	; (800483c <HAL_FLASH_Unlock+0x44>)
 8004812:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_FLASH_Unlock+0x40>)
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_FLASH_Unlock+0x48>)
 8004818:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_FLASH_Unlock+0x40>)
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800482a:	79fb      	ldrb	r3, [r7, #7]
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40022000 	.word	0x40022000
 800483c:	45670123 	.word	0x45670123
 8004840:	cdef89ab 	.word	0xcdef89ab

08004844 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_FLASH_Lock+0x1c>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_FLASH_Lock+0x1c>)
 800484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004852:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000

08004864 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <FLASH_Program_HalfWord+0x30>)
 8004872:	2200      	movs	r2, #0
 8004874:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <FLASH_Program_HalfWord+0x34>)
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	4a07      	ldr	r2, [pc, #28]	; (8004898 <FLASH_Program_HalfWord+0x34>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	887a      	ldrh	r2, [r7, #2]
 8004886:	801a      	strh	r2, [r3, #0]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000aa0 	.word	0x20000aa0
 8004898:	40022000 	.word	0x40022000

0800489c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7ff fd88 	bl	80043b8 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80048aa:	e010      	b.n	80048ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d00c      	beq.n	80048ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <FLASH_WaitForLastOperation+0x2e>
 80048ba:	f7ff fd7d 	bl	80043b8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d201      	bcs.n	80048ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e025      	b.n	800491a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e8      	bne.n	80048ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 80048e8:	2220      	movs	r2, #32
 80048ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <FLASH_WaitForLastOperation+0x88>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004910:	f000 f80a 	bl	8004928 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40022000 	.word	0x40022000

08004928 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004948:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f043 0310 	orr.w	r3, r3, #16
 8004950:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004968:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <FLASH_SetErrorCode+0x9c>)
 8004988:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f240 1201 	movw	r2, #257	; 0x101
 800499c:	4293      	cmp	r3, r2
 800499e:	d106      	bne.n	80049ae <FLASH_SetErrorCode+0x86>
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	61d3      	str	r3, [r2, #28]
}  
 80049ac:	e002      	b.n	80049b4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <FLASH_SetErrorCode+0x98>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60d3      	str	r3, [r2, #12]
}  
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	20000aa0 	.word	0x20000aa0

080049c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049da:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_FLASHEx_Erase+0xd0>)
 80049dc:	7e1b      	ldrb	r3, [r3, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_FLASHEx_Erase+0x1e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e053      	b.n	8004a8e <HAL_FLASHEx_Erase+0xc6>
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_FLASHEx_Erase+0xd0>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d116      	bne.n	8004a22 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80049f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049f8:	f7ff ff50 	bl	800489c <FLASH_WaitForLastOperation>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d141      	bne.n	8004a86 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f000 f84c 	bl	8004aa0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a0c:	f7ff ff46 	bl	800489c <FLASH_WaitForLastOperation>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004a14:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_FLASHEx_Erase+0xd4>)
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_FLASHEx_Erase+0xd4>)
 8004a1a:	f023 0304 	bic.w	r3, r3, #4
 8004a1e:	6113      	str	r3, [r2, #16]
 8004a20:	e031      	b.n	8004a86 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004a22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a26:	f7ff ff39 	bl	800489c <FLASH_WaitForLastOperation>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d12a      	bne.n	8004a86 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	e019      	b.n	8004a74 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004a40:	68b8      	ldr	r0, [r7, #8]
 8004a42:	f000 f849 	bl	8004ad8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a4a:	f7ff ff27 	bl	800489c <FLASH_WaitForLastOperation>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_FLASHEx_Erase+0xd4>)
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <HAL_FLASHEx_Erase+0xd4>)
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	601a      	str	r2, [r3, #0]
            break;
 8004a6a:	e00c      	b.n	8004a86 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a72:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	029a      	lsls	r2, r3, #10
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d3dc      	bcc.n	8004a40 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_FLASHEx_Erase+0xd0>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	761a      	strb	r2, [r3, #24]

  return status;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000aa0 	.word	0x20000aa0
 8004a9c:	40022000 	.word	0x40022000

08004aa0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <FLASH_MassErase+0x30>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <FLASH_MassErase+0x34>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <FLASH_MassErase+0x34>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <FLASH_MassErase+0x34>)
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <FLASH_MassErase+0x34>)
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	20000aa0 	.word	0x20000aa0
 8004ad4:	40022000 	.word	0x40022000

08004ad8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <FLASH_PageErase+0x38>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <FLASH_PageErase+0x3c>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <FLASH_PageErase+0x3c>)
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <FLASH_PageErase+0x3c>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <FLASH_PageErase+0x3c>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <FLASH_PageErase+0x3c>)
 8004afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b02:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000aa0 	.word	0x20000aa0
 8004b14:	40022000 	.word	0x40022000

08004b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b08b      	sub	sp, #44	; 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2a:	e127      	b.n	8004d7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	f040 8116 	bne.w	8004d76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b12      	cmp	r3, #18
 8004b50:	d034      	beq.n	8004bbc <HAL_GPIO_Init+0xa4>
 8004b52:	2b12      	cmp	r3, #18
 8004b54:	d80d      	bhi.n	8004b72 <HAL_GPIO_Init+0x5a>
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d02b      	beq.n	8004bb2 <HAL_GPIO_Init+0x9a>
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d804      	bhi.n	8004b68 <HAL_GPIO_Init+0x50>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d031      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d01c      	beq.n	8004ba0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b66:	e048      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d043      	beq.n	8004bf4 <HAL_GPIO_Init+0xdc>
 8004b6c:	2b11      	cmp	r3, #17
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_GPIO_Init+0x90>
          break;
 8004b70:	e043      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004b72:	4a89      	ldr	r2, [pc, #548]	; (8004d98 <HAL_GPIO_Init+0x280>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d026      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
 8004b78:	4a87      	ldr	r2, [pc, #540]	; (8004d98 <HAL_GPIO_Init+0x280>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d806      	bhi.n	8004b8c <HAL_GPIO_Init+0x74>
 8004b7e:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <HAL_GPIO_Init+0x284>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d020      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
 8004b84:	4a86      	ldr	r2, [pc, #536]	; (8004da0 <HAL_GPIO_Init+0x288>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01d      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
          break;
 8004b8a:	e036      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004b8c:	4a85      	ldr	r2, [pc, #532]	; (8004da4 <HAL_GPIO_Init+0x28c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d019      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
 8004b92:	4a85      	ldr	r2, [pc, #532]	; (8004da8 <HAL_GPIO_Init+0x290>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d016      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
 8004b98:	4a84      	ldr	r2, [pc, #528]	; (8004dac <HAL_GPIO_Init+0x294>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_GPIO_Init+0xae>
          break;
 8004b9e:	e02c      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	623b      	str	r3, [r7, #32]
          break;
 8004ba6:	e028      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	3304      	adds	r3, #4
 8004bae:	623b      	str	r3, [r7, #32]
          break;
 8004bb0:	e023      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	623b      	str	r3, [r7, #32]
          break;
 8004bba:	e01e      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	623b      	str	r3, [r7, #32]
          break;
 8004bc4:	e019      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004bce:	2304      	movs	r3, #4
 8004bd0:	623b      	str	r3, [r7, #32]
          break;
 8004bd2:	e012      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	611a      	str	r2, [r3, #16]
          break;
 8004be6:	e008      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004be8:	2308      	movs	r3, #8
 8004bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	615a      	str	r2, [r3, #20]
          break;
 8004bf2:	e002      	b.n	8004bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	623b      	str	r3, [r7, #32]
          break;
 8004bf8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2bff      	cmp	r3, #255	; 0xff
 8004bfe:	d801      	bhi.n	8004c04 <HAL_GPIO_Init+0xec>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	e001      	b.n	8004c08 <HAL_GPIO_Init+0xf0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2bff      	cmp	r3, #255	; 0xff
 8004c0e:	d802      	bhi.n	8004c16 <HAL_GPIO_Init+0xfe>
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	e002      	b.n	8004c1c <HAL_GPIO_Init+0x104>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	3b08      	subs	r3, #8
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	210f      	movs	r1, #15
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	401a      	ands	r2, r3
 8004c2e:	6a39      	ldr	r1, [r7, #32]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	431a      	orrs	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8096 	beq.w	8004d76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c4a:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_GPIO_Init+0x298>)
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	4a58      	ldr	r2, [pc, #352]	; (8004db0 <HAL_GPIO_Init+0x298>)
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	6193      	str	r3, [r2, #24]
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_GPIO_Init+0x298>)
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c62:	4a54      	ldr	r2, [pc, #336]	; (8004db4 <HAL_GPIO_Init+0x29c>)
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	3302      	adds	r3, #2
 8004c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4b      	ldr	r2, [pc, #300]	; (8004db8 <HAL_GPIO_Init+0x2a0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_GPIO_Init+0x19e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_GPIO_Init+0x2a4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00d      	beq.n	8004cb2 <HAL_GPIO_Init+0x19a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a49      	ldr	r2, [pc, #292]	; (8004dc0 <HAL_GPIO_Init+0x2a8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <HAL_GPIO_Init+0x196>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a48      	ldr	r2, [pc, #288]	; (8004dc4 <HAL_GPIO_Init+0x2ac>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_GPIO_Init+0x192>
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e006      	b.n	8004cb8 <HAL_GPIO_Init+0x1a0>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e004      	b.n	8004cb8 <HAL_GPIO_Init+0x1a0>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e002      	b.n	8004cb8 <HAL_GPIO_Init+0x1a0>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_GPIO_Init+0x1a0>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	f002 0203 	and.w	r2, r2, #3
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	4093      	lsls	r3, r2
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cc8:	493a      	ldr	r1, [pc, #232]	; (8004db4 <HAL_GPIO_Init+0x29c>)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	3302      	adds	r3, #2
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d006      	beq.n	8004cf0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4938      	ldr	r1, [pc, #224]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
 8004cee:	e006      	b.n	8004cfe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004cf0:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	4933      	ldr	r1, [pc, #204]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	492e      	ldr	r1, [pc, #184]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
 8004d16:	e006      	b.n	8004d26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	4929      	ldr	r1, [pc, #164]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d32:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	4924      	ldr	r1, [pc, #144]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
 8004d3e:	e006      	b.n	8004d4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d40:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	491f      	ldr	r1, [pc, #124]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	491a      	ldr	r1, [pc, #104]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60cb      	str	r3, [r1, #12]
 8004d66:	e006      	b.n	8004d76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d68:	4b17      	ldr	r3, [pc, #92]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	4915      	ldr	r1, [pc, #84]	; (8004dc8 <HAL_GPIO_Init+0x2b0>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	3301      	adds	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f47f aed0 	bne.w	8004b2c <HAL_GPIO_Init+0x14>
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	372c      	adds	r7, #44	; 0x2c
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	10210000 	.word	0x10210000
 8004d9c:	10110000 	.word	0x10110000
 8004da0:	10120000 	.word	0x10120000
 8004da4:	10310000 	.word	0x10310000
 8004da8:	10320000 	.word	0x10320000
 8004dac:	10220000 	.word	0x10220000
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40010800 	.word	0x40010800
 8004dbc:	40010c00 	.word	0x40010c00
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	40011400 	.word	0x40011400
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b08b      	sub	sp, #44	; 0x2c
 8004e00:	af06      	add	r7, sp, #24
 8004e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0d3      	b.n	8004fb6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f005 fb3a 	bl	800a49c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f002 fc6e 	bl	8007716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	687e      	ldr	r6, [r7, #4]
 8004e42:	466d      	mov	r5, sp
 8004e44:	f106 0410 	add.w	r4, r6, #16
 8004e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	1d33      	adds	r3, r6, #4
 8004e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f002 fc37 	bl	80076c8 <USB_CoreInit>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0a4      	b.n	8004fb6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fc6b 	bl	800774e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e035      	b.n	8004eea <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	015b      	lsls	r3, r3, #5
 8004e84:	4413      	add	r3, r2
 8004e86:	3329      	adds	r3, #41	; 0x29
 8004e88:	2201      	movs	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	015b      	lsls	r3, r3, #5
 8004e92:	4413      	add	r3, r2
 8004e94:	3328      	adds	r3, #40	; 0x28
 8004e96:	7bfa      	ldrb	r2, [r7, #15]
 8004e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	b291      	uxth	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3336      	adds	r3, #54	; 0x36
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	015b      	lsls	r3, r3, #5
 8004eb2:	4413      	add	r3, r2
 8004eb4:	332b      	adds	r3, #43	; 0x2b
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3338      	adds	r3, #56	; 0x38
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	015b      	lsls	r3, r3, #5
 8004ece:	4413      	add	r3, r2
 8004ed0:	333c      	adds	r3, #60	; 0x3c
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	3302      	adds	r3, #2
 8004edc:	015b      	lsls	r3, r3, #5
 8004ede:	4413      	add	r3, r2
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3c4      	bcc.n	8004e7e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e031      	b.n	8004f5e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	015b      	lsls	r3, r3, #5
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	330a      	adds	r3, #10
 8004f50:	015b      	lsls	r3, r3, #5
 8004f52:	4413      	add	r3, r2
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d3c8      	bcc.n	8004efa <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	687e      	ldr	r6, [r7, #4]
 8004f70:	466d      	mov	r5, sp
 8004f72:	f106 0410 	add.w	r4, r6, #16
 8004f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	602b      	str	r3, [r5, #0]
 8004f7e:	1d33      	adds	r3, r6, #4
 8004f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f002 fbef 	bl	8007766 <USB_DevInit>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00d      	b.n	8004fb6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 fc2d 	bl	800880e <USB_DevDisconnect>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_PCD_Start+0x16>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e016      	b.n	8005002 <HAL_PCD_Start+0x44>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004fdc:	2101      	movs	r1, #1
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f005 fcc3 	bl	800a96a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 fc06 	bl	80087fa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 fb78 	bl	80076e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f003 fc03 	bl	8008822 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d102      	bne.n	800502e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 faf3 	bl	8005614 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fbf5 	bl	8008822 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d112      	bne.n	800506a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800504c:	b29a      	uxth	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005056:	b292      	uxth	r2, r2
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f005 fa92 	bl	800a586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005062:	2100      	movs	r1, #0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8de 	bl	8005226 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f003 fbd7 	bl	8008822 <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800507e:	d10b      	bne.n	8005098 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005092:	b292      	uxth	r2, r2
 8005094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f003 fbc0 	bl	8008822 <USB_ReadInterrupts>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ac:	d10b      	bne.n	80050c6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050c0:	b292      	uxth	r2, r2
 80050c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f003 fba9 	bl	8008822 <USB_ReadInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d126      	bne.n	800512a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0204 	bic.w	r2, r2, #4
 80050ee:	b292      	uxth	r2, r2
 80050f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0208 	bic.w	r2, r2, #8
 8005106:	b292      	uxth	r2, r2
 8005108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f005 fa73 	bl	800a5f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005124:	b292      	uxth	r2, r2
 8005126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f003 fb77 	bl	8008822 <USB_ReadInterrupts>
 8005134:	4603      	mov	r3, r0
 8005136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d13d      	bne.n	80051bc <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0208 	orr.w	r2, r2, #8
 8005152:	b292      	uxth	r2, r2
 8005154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516a:	b292      	uxth	r2, r2
 800516c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0204 	orr.w	r2, r2, #4
 8005182:	b292      	uxth	r2, r2
 8005184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f003 fb48 	bl	8008822 <USB_ReadInterrupts>
 8005192:	4603      	mov	r3, r0
 8005194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d10b      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b0:	b292      	uxth	r2, r2
 80051b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f005 fa04 	bl	800a5c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fb2e 	bl	8008822 <USB_ReadInterrupts>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d0:	d10e      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051e4:	b292      	uxth	r2, r2
 80051e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f005 f9bd 	bl	800a56a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f003 fb14 	bl	8008822 <USB_ReadInterrupts>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005204:	d10b      	bne.n	800521e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005218:	b292      	uxth	r2, r2
 800521a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_PCD_SetAddress+0x1a>
 800523c:	2302      	movs	r3, #2
 800523e:	e013      	b.n	8005268 <HAL_PCD_SetAddress+0x42>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f003 fabb 	bl	80087d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	4603      	mov	r3, r0
 8005280:	70fb      	strb	r3, [r7, #3]
 8005282:	460b      	mov	r3, r1
 8005284:	803b      	strh	r3, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800528e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da0b      	bge.n	80052ae <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	015b      	lsls	r3, r3, #5
 800529e:	3328      	adds	r3, #40	; 0x28
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	705a      	strb	r2, [r3, #1]
 80052ac:	e00b      	b.n	80052c6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	015b      	lsls	r3, r3, #5
 80052b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052d2:	883a      	ldrh	r2, [r7, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	78ba      	ldrb	r2, [r7, #2]
 80052dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052f0:	78bb      	ldrb	r3, [r7, #2]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d102      	bne.n	80052fc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_PCD_EP_Open+0x9a>
 8005306:	2302      	movs	r3, #2
 8005308:	e00e      	b.n	8005328 <HAL_PCD_EP_Open+0xb8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	4618      	mov	r0, r3
 800531a:	f002 fa49 	bl	80077b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005326:	7afb      	ldrb	r3, [r7, #11]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800533c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005340:	2b00      	cmp	r3, #0
 8005342:	da0b      	bge.n	800535c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	3328      	adds	r3, #40	; 0x28
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	705a      	strb	r2, [r3, #1]
 800535a:	e00b      	b.n	8005374 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	015b      	lsls	r3, r3, #5
 8005364:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_PCD_EP_Close+0x5e>
 800538a:	2302      	movs	r3, #2
 800538c:	e00e      	b.n	80053ac <HAL_PCD_EP_Close+0x7c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fcf5 	bl	8007d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	460b      	mov	r3, r1
 80053c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	015b      	lsls	r3, r3, #5
 80053cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ee:	7afb      	ldrb	r3, [r7, #11]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	4618      	mov	r0, r3
 800540c:	f002 fe54 	bl	80080b8 <USB_EPStartXfer>
 8005410:	e005      	b.n	800541e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	4618      	mov	r0, r3
 800541a:	f002 fe4d 	bl	80080b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	330a      	adds	r3, #10
 800543e:	015b      	lsls	r3, r3, #5
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	460b      	mov	r3, r1
 800545e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	3328      	adds	r3, #40	; 0x28
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2201      	movs	r2, #1
 8005486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005488:	7afb      	ldrb	r3, [r7, #11]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	b2da      	uxtb	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005494:	7afb      	ldrb	r3, [r7, #11]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 fe07 	bl	80080b8 <USB_EPStartXfer>
 80054aa:	e005      	b.n	80054b8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 fe00 	bl	80080b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	f003 0207 	and.w	r2, r3, #7
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d901      	bls.n	80054e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e046      	b.n	800556e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da0b      	bge.n	8005500 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	015b      	lsls	r3, r3, #5
 80054f0:	3328      	adds	r3, #40	; 0x28
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	705a      	strb	r2, [r3, #1]
 80054fe:	e009      	b.n	8005514 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	015b      	lsls	r3, r3, #5
 8005504:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4413      	add	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_PCD_EP_SetStall+0x72>
 8005530:	2302      	movs	r3, #2
 8005532:	e01c      	b.n	800556e <HAL_PCD_EP_SetStall+0xac>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	4618      	mov	r0, r3
 8005544:	f003 f870 	bl	8008628 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f003 f96e 	bl	8008840 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 020f 	and.w	r2, r3, #15
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d901      	bls.n	8005594 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e03a      	b.n	800560a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005598:	2b00      	cmp	r3, #0
 800559a:	da0b      	bge.n	80055b4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	015b      	lsls	r3, r3, #5
 80055a4:	3328      	adds	r3, #40	; 0x28
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	705a      	strb	r2, [r3, #1]
 80055b2:	e00b      	b.n	80055cc <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	015b      	lsls	r3, r3, #5
 80055bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_PCD_EP_ClrStall+0x76>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e00e      	b.n	800560a <HAL_PCD_EP_ClrStall+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68f9      	ldr	r1, [r7, #12]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f003 f856 	bl	80086ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800561c:	e282      	b.n	8005b24 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005626:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005628:	8afb      	ldrh	r3, [r7, #22]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8005632:	7d7b      	ldrb	r3, [r7, #21]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 8142 	bne.w	80058be <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800563a:	8afb      	ldrh	r3, [r7, #22]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d151      	bne.n	80056e8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	b29c      	uxth	r4, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800565e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3328      	adds	r3, #40	; 0x28
 800566a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	3302      	adds	r3, #2
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80056a6:	2100      	movs	r1, #0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f004 ff47 	bl	800a53c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8234 	beq.w	8005b24 <PCD_EP_ISR_Handler+0x510>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 822f 	bne.w	8005b24 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	b292      	uxth	r2, r2
 80056da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056e6:	e21d      	b.n	8005b24 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056ee:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80056f8:	8a7b      	ldrh	r3, [r7, #18]
 80056fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d033      	beq.n	800576a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	3306      	adds	r3, #6
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005740:	b29b      	uxth	r3, r3
 8005742:	f003 f8cc 	bl	80088de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29a      	uxth	r2, r3
 800574e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005752:	4013      	ands	r3, r2
 8005754:	b29c      	uxth	r4, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800575e:	b292      	uxth	r2, r2
 8005760:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f004 fec0 	bl	800a4e8 <HAL_PCD_SetupStageCallback>
 8005768:	e1dc      	b.n	8005b24 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800576a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f280 81d8 	bge.w	8005b24 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005780:	4013      	ands	r3, r2
 8005782:	b29c      	uxth	r4, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800578c:	b292      	uxth	r2, r2
 800578e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	3306      	adds	r3, #6
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d019      	beq.n	80057f8 <PCD_EP_ISR_Handler+0x1e4>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d015      	beq.n	80057f8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6959      	ldr	r1, [r3, #20]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f003 f87e 	bl	80088de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80057f0:	2100      	movs	r1, #0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f004 fe8a 	bl	800a50c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461c      	mov	r4, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	441c      	add	r4, r3
 800580a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800580e:	461c      	mov	r4, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10e      	bne.n	8005836 <PCD_EP_ISR_Handler+0x222>
 8005818:	8823      	ldrh	r3, [r4, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005820:	b29b      	uxth	r3, r3
 8005822:	8023      	strh	r3, [r4, #0]
 8005824:	8823      	ldrh	r3, [r4, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29b      	uxth	r3, r3
 8005832:	8023      	strh	r3, [r4, #0]
 8005834:	e02d      	b.n	8005892 <PCD_EP_ISR_Handler+0x27e>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b3e      	cmp	r3, #62	; 0x3e
 800583c:	d812      	bhi.n	8005864 <PCD_EP_ISR_Handler+0x250>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <PCD_EP_ISR_Handler+0x244>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	3301      	adds	r3, #1
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	8023      	strh	r3, [r4, #0]
 8005862:	e016      	b.n	8005892 <PCD_EP_ISR_Handler+0x27e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <PCD_EP_ISR_Handler+0x26a>
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3b01      	subs	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588e:	b29b      	uxth	r3, r3
 8005890:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	b29c      	uxth	r4, r3
 80058a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80058a8:	b29c      	uxth	r4, r3
 80058aa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80058ae:	b29c      	uxth	r4, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4ba2      	ldr	r3, [pc, #648]	; (8005b40 <PCD_EP_ISR_Handler+0x52c>)
 80058b6:	4323      	orrs	r3, r4
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8013      	strh	r3, [r2, #0]
 80058bc:	e132      	b.n	8005b24 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	7d7b      	ldrb	r3, [r7, #21]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f280 80d1 	bge.w	8005a7a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	7d7b      	ldrb	r3, [r7, #21]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058ec:	4013      	ands	r3, r2
 80058ee:	b29c      	uxth	r4, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	7d7b      	ldrb	r3, [r7, #21]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8005900:	b292      	uxth	r2, r2
 8005902:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005904:	7d7b      	ldrb	r3, [r7, #21]
 8005906:	015b      	lsls	r3, r3, #5
 8005908:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	7b1b      	ldrb	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d121      	bne.n	800595e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	3306      	adds	r3, #6
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005942:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d072      	beq.n	8005a30 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6959      	ldr	r1, [r3, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88da      	ldrh	r2, [r3, #6]
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	f002 ffc1 	bl	80088de <USB_ReadPMA>
 800595c:	e068      	b.n	8005a30 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d021      	beq.n	80059bc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005980:	b29b      	uxth	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	3302      	adds	r3, #2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80059a2:	8bfb      	ldrh	r3, [r7, #30]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02a      	beq.n	80059fe <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6959      	ldr	r1, [r3, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	891a      	ldrh	r2, [r3, #8]
 80059b4:	8bfb      	ldrh	r3, [r7, #30]
 80059b6:	f002 ff92 	bl	80088de <USB_ReadPMA>
 80059ba:	e020      	b.n	80059fe <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	3306      	adds	r3, #6
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80059e6:	8bfb      	ldrh	r3, [r7, #30]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	895a      	ldrh	r2, [r3, #10]
 80059f8:	8bfb      	ldrh	r3, [r7, #30]
 80059fa:	f002 ff70 	bl	80088de <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	b29c      	uxth	r4, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	4b46      	ldr	r3, [pc, #280]	; (8005b44 <PCD_EP_ISR_Handler+0x530>)
 8005a2a:	4323      	orrs	r3, r4
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	8bfb      	ldrh	r3, [r7, #30]
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	8bfb      	ldrh	r3, [r7, #30]
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <PCD_EP_ISR_Handler+0x446>
 8005a50:	8bfa      	ldrh	r2, [r7, #30]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d206      	bcs.n	8005a68 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f004 fd53 	bl	800a50c <HAL_PCD_DataOutStageCallback>
 8005a66:	e008      	b.n	8005a7a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fc9d 	bl	80053b4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a7a:	8a7b      	ldrh	r3, [r7, #18]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d04f      	beq.n	8005b24 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a84:	7d7b      	ldrb	r3, [r7, #21]
 8005a86:	015b      	lsls	r3, r3, #5
 8005a88:	3328      	adds	r3, #40	; 0x28
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	7d7b      	ldrb	r3, [r7, #21]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	b29c      	uxth	r4, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	7d7b      	ldrb	r3, [r7, #21]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8005aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	441a      	add	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f004 fd16 	bl	800a53c <HAL_PCD_DataInStageCallback>
 8005b10:	e008      	b.n	8005b24 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	7819      	ldrb	r1, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fc96 	bl	8005450 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f6ff ad74 	blt.w	800561e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3724      	adds	r7, #36	; 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd90      	pop	{r4, r7, pc}
 8005b40:	ffff8080 	.word	0xffff8080
 8005b44:	ffff80c0 	.word	0xffff80c0

08005b48 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	4613      	mov	r3, r2
 8005b58:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b66:	897b      	ldrh	r3, [r7, #10]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	015b      	lsls	r3, r3, #5
 8005b6e:	3328      	adds	r3, #40	; 0x28
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e006      	b.n	8005b86 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	015b      	lsls	r3, r3, #5
 8005b7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005b86:	893b      	ldrh	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	80da      	strh	r2, [r3, #6]
 8005b9a:	e00b      	b.n	8005bb4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e26c      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8087 	beq.w	8005cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005be0:	4b92      	ldr	r3, [pc, #584]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005bec:	4b8f      	ldr	r3, [pc, #572]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d112      	bne.n	8005c1e <HAL_RCC_OscConfig+0x5e>
 8005bf8:	4b8c      	ldr	r3, [pc, #560]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c06:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d06c      	beq.n	8005cec <HAL_RCC_OscConfig+0x12c>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d168      	bne.n	8005cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e246      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_OscConfig+0x76>
 8005c28:	4b80      	ldr	r3, [pc, #512]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a7f      	ldr	r2, [pc, #508]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e02e      	b.n	8005c94 <HAL_RCC_OscConfig+0xd4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCC_OscConfig+0x98>
 8005c3e:	4b7b      	ldr	r3, [pc, #492]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7a      	ldr	r2, [pc, #488]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b78      	ldr	r3, [pc, #480]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a77      	ldr	r2, [pc, #476]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e01d      	b.n	8005c94 <HAL_RCC_OscConfig+0xd4>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCC_OscConfig+0xbc>
 8005c62:	4b72      	ldr	r3, [pc, #456]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a71      	ldr	r2, [pc, #452]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	4b6f      	ldr	r3, [pc, #444]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6e      	ldr	r2, [pc, #440]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e00b      	b.n	8005c94 <HAL_RCC_OscConfig+0xd4>
 8005c7c:	4b6b      	ldr	r3, [pc, #428]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6a      	ldr	r2, [pc, #424]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a67      	ldr	r2, [pc, #412]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fe fb8c 	bl	80043b8 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fe fb88 	bl	80043b8 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1fa      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b5d      	ldr	r3, [pc, #372]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xe4>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fe fb78 	bl	80043b8 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fe fb74 	bl	80043b8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e1e6      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cde:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x10c>
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d063      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cfa:	4b4c      	ldr	r3, [pc, #304]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d06:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f003 030c 	and.w	r3, r3, #12
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d11c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x18c>
 8005d12:	4b46      	ldr	r3, [pc, #280]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d116      	bne.n	8005d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1e:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_RCC_OscConfig+0x176>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d001      	beq.n	8005d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1ba      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d36:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4939      	ldr	r1, [pc, #228]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4a:	e03a      	b.n	8005dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d020      	beq.n	8005d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d54:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <HAL_RCC_OscConfig+0x270>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fe fb2d 	bl	80043b8 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d62:	f7fe fb29 	bl	80043b8 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e19b      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0f0      	beq.n	8005d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4927      	ldr	r1, [pc, #156]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]
 8005d94:	e015      	b.n	8005dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_RCC_OscConfig+0x270>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fe fb0c 	bl	80043b8 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da4:	f7fe fb08 	bl	80043b8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e17a      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db6:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d03a      	beq.n	8005e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ddc:	f7fe faec 	bl	80043b8 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de4:	f7fe fae8 	bl	80043b8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e15a      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <HAL_RCC_OscConfig+0x26c>)
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e02:	2001      	movs	r0, #1
 8005e04:	f000 fada 	bl	80063bc <RCC_Delay>
 8005e08:	e01c      	b.n	8005e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_RCC_OscConfig+0x274>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e10:	f7fe fad2 	bl	80043b8 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e16:	e00f      	b.n	8005e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e18:	f7fe face 	bl	80043b8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d908      	bls.n	8005e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e140      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
 8005e2a:	bf00      	nop
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	42420000 	.word	0x42420000
 8005e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e38:	4b9e      	ldr	r3, [pc, #632]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e9      	bne.n	8005e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80a6 	beq.w	8005f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e52:	2300      	movs	r3, #0
 8005e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e56:	4b97      	ldr	r3, [pc, #604]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e62:	4b94      	ldr	r3, [pc, #592]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4a93      	ldr	r2, [pc, #588]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	61d3      	str	r3, [r2, #28]
 8005e6e:	4b91      	ldr	r3, [pc, #580]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7e:	4b8e      	ldr	r3, [pc, #568]	; (80060b8 <HAL_RCC_OscConfig+0x4f8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d118      	bne.n	8005ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e8a:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a8a      	ldr	r2, [pc, #552]	; (80060b8 <HAL_RCC_OscConfig+0x4f8>)
 8005e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e96:	f7fe fa8f 	bl	80043b8 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e9e:	f7fe fa8b 	bl	80043b8 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	; 0x64
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e0fd      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <HAL_RCC_OscConfig+0x4f8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x312>
 8005ec4:	4b7b      	ldr	r3, [pc, #492]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	4a7a      	ldr	r2, [pc, #488]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6213      	str	r3, [r2, #32]
 8005ed0:	e02d      	b.n	8005f2e <HAL_RCC_OscConfig+0x36e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x334>
 8005eda:	4b76      	ldr	r3, [pc, #472]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4a75      	ldr	r2, [pc, #468]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6213      	str	r3, [r2, #32]
 8005ee6:	4b73      	ldr	r3, [pc, #460]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	4a72      	ldr	r2, [pc, #456]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005eec:	f023 0304 	bic.w	r3, r3, #4
 8005ef0:	6213      	str	r3, [r2, #32]
 8005ef2:	e01c      	b.n	8005f2e <HAL_RCC_OscConfig+0x36e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d10c      	bne.n	8005f16 <HAL_RCC_OscConfig+0x356>
 8005efc:	4b6d      	ldr	r3, [pc, #436]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	4a6c      	ldr	r2, [pc, #432]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f02:	f043 0304 	orr.w	r3, r3, #4
 8005f06:	6213      	str	r3, [r2, #32]
 8005f08:	4b6a      	ldr	r3, [pc, #424]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	4a69      	ldr	r2, [pc, #420]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6213      	str	r3, [r2, #32]
 8005f14:	e00b      	b.n	8005f2e <HAL_RCC_OscConfig+0x36e>
 8005f16:	4b67      	ldr	r3, [pc, #412]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	4a66      	ldr	r2, [pc, #408]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6213      	str	r3, [r2, #32]
 8005f22:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	4a63      	ldr	r2, [pc, #396]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d015      	beq.n	8005f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f36:	f7fe fa3f 	bl	80043b8 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fe fa3b 	bl	80043b8 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0ab      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f54:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ee      	beq.n	8005f3e <HAL_RCC_OscConfig+0x37e>
 8005f60:	e014      	b.n	8005f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fe fa29 	bl	80043b8 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fe fa25 	bl	80043b8 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e095      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f80:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ee      	bne.n	8005f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f92:	4b48      	ldr	r3, [pc, #288]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4a47      	ldr	r2, [pc, #284]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8081 	beq.w	80060aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa8:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d061      	beq.n	8006078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d146      	bne.n	800604a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCC_OscConfig+0x4fc>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc2:	f7fe f9f9 	bl	80043b8 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fca:	f7fe f9f5 	bl	80043b8 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e067      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f0      	bne.n	8005fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff0:	d108      	bne.n	8006004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ff2:	4b30      	ldr	r3, [pc, #192]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	492d      	ldr	r1, [pc, #180]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a19      	ldr	r1, [r3, #32]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	430b      	orrs	r3, r1
 8006016:	4927      	ldr	r1, [pc, #156]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601c:	4b27      	ldr	r3, [pc, #156]	; (80060bc <HAL_RCC_OscConfig+0x4fc>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006022:	f7fe f9c9 	bl	80043b8 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602a:	f7fe f9c5 	bl	80043b8 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e037      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x46a>
 8006048:	e02f      	b.n	80060aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <HAL_RCC_OscConfig+0x4fc>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fe f9b2 	bl	80043b8 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006058:	f7fe f9ae 	bl	80043b8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e020      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x498>
 8006076:	e018      	b.n	80060aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e013      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_RCC_OscConfig+0x4f4>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d001      	beq.n	80060aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40021000 	.word	0x40021000
 80060b8:	40007000 	.word	0x40007000
 80060bc:	42420060 	.word	0x42420060

080060c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0d0      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d910      	bls.n	8006104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b67      	ldr	r3, [pc, #412]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 0207 	bic.w	r2, r3, #7
 80060ea:	4965      	ldr	r1, [pc, #404]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b63      	ldr	r3, [pc, #396]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0b8      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800611c:	4b59      	ldr	r3, [pc, #356]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4a58      	ldr	r2, [pc, #352]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006134:	4b53      	ldr	r3, [pc, #332]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800613a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800613e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006140:	4b50      	ldr	r3, [pc, #320]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	494d      	ldr	r1, [pc, #308]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d040      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006166:	4b47      	ldr	r3, [pc, #284]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d115      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07f      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d107      	bne.n	800618e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e073      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618e:	4b3d      	ldr	r3, [pc, #244]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e06b      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800619e:	4b39      	ldr	r3, [pc, #228]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4936      	ldr	r1, [pc, #216]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061b0:	f7fe f902 	bl	80043b8 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b8:	f7fe f8fe 	bl	80043b8 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e053      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ce:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 020c 	and.w	r2, r3, #12
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	429a      	cmp	r2, r3
 80061de:	d1eb      	bne.n	80061b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061e0:	4b27      	ldr	r3, [pc, #156]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d210      	bcs.n	8006210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 0207 	bic.w	r2, r3, #7
 80061f6:	4922      	ldr	r1, [pc, #136]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fe:	4b20      	ldr	r3, [pc, #128]	; (8006280 <HAL_RCC_ClockConfig+0x1c0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e032      	b.n	8006276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800621c:	4b19      	ldr	r3, [pc, #100]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4916      	ldr	r1, [pc, #88]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800624e:	f000 f821 	bl	8006294 <HAL_RCC_GetSysClockFreq>
 8006252:	4601      	mov	r1, r0
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <HAL_RCC_ClockConfig+0x1c4>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	5cd3      	ldrb	r3, [r2, r3]
 8006262:	fa21 f303 	lsr.w	r3, r1, r3
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <HAL_RCC_ClockConfig+0x1cc>)
 8006268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <HAL_RCC_ClockConfig+0x1d0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f860 	bl	8004334 <HAL_InitTick>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40022000 	.word	0x40022000
 8006284:	40021000 	.word	0x40021000
 8006288:	0800f2ec 	.word	0x0800f2ec
 800628c:	20000020 	.word	0x20000020
 8006290:	20000024 	.word	0x20000024

08006294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006294:	b490      	push	{r4, r7}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800629a:	4b2a      	ldr	r3, [pc, #168]	; (8006344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800629c:	1d3c      	adds	r4, r7, #4
 800629e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80062a4:	4b28      	ldr	r3, [pc, #160]	; (8006348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d002      	beq.n	80062d4 <HAL_RCC_GetSysClockFreq+0x40>
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d003      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x46>
 80062d2:	e02d      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062d6:	623b      	str	r3, [r7, #32]
      break;
 80062d8:	e02d      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	0c9b      	lsrs	r3, r3, #18
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80062e6:	4413      	add	r3, r2
 80062e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80062ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d013      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	0c5b      	lsrs	r3, r3, #17
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006306:	4413      	add	r3, r2
 8006308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800630c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006312:	fb02 f203 	mul.w	r2, r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
 800631e:	e004      	b.n	800632a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	623b      	str	r3, [r7, #32]
      break;
 800632e:	e002      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006332:	623b      	str	r3, [r7, #32]
      break;
 8006334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006336:	6a3b      	ldr	r3, [r7, #32]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bc90      	pop	{r4, r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	0800f160 	.word	0x0800f160
 8006348:	0800f170 	.word	0x0800f170
 800634c:	40021000 	.word	0x40021000
 8006350:	007a1200 	.word	0x007a1200
 8006354:	003d0900 	.word	0x003d0900

08006358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800635c:	4b02      	ldr	r3, [pc, #8]	; (8006368 <HAL_RCC_GetHCLKFreq+0x10>)
 800635e:	681b      	ldr	r3, [r3, #0]
}
 8006360:	4618      	mov	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr
 8006368:	20000020 	.word	0x20000020

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006370:	f7ff fff2 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 8006374:	4601      	mov	r1, r0
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4a03      	ldr	r2, [pc, #12]	; (8006390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006382:	5cd3      	ldrb	r3, [r2, r3]
 8006384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40021000 	.word	0x40021000
 8006390:	0800f2fc 	.word	0x0800f2fc

08006394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006398:	f7ff ffde 	bl	8006358 <HAL_RCC_GetHCLKFreq>
 800639c:	4601      	mov	r1, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	0adb      	lsrs	r3, r3, #11
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	0800f2fc 	.word	0x0800f2fc

080063bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <RCC_Delay+0x34>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <RCC_Delay+0x38>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	0a5b      	lsrs	r3, r3, #9
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80063d8:	bf00      	nop
  }
  while (Delay --);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	60fa      	str	r2, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f9      	bne.n	80063d8 <RCC_Delay+0x1c>
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000020 	.word	0x20000020
 80063f4:	10624dd3 	.word	0x10624dd3

080063f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d07d      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006418:	4b4f      	ldr	r3, [pc, #316]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10d      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006424:	4b4c      	ldr	r3, [pc, #304]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	4a4b      	ldr	r2, [pc, #300]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800642a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642e:	61d3      	str	r3, [r2, #28]
 8006430:	4b49      	ldr	r3, [pc, #292]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006440:	4b46      	ldr	r3, [pc, #280]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d118      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644c:	4b43      	ldr	r3, [pc, #268]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a42      	ldr	r2, [pc, #264]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006458:	f7fd ffae 	bl	80043b8 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645e:	e008      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006460:	f7fd ffaa 	bl	80043b8 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e06d      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006472:	4b3a      	ldr	r3, [pc, #232]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800647e:	4b36      	ldr	r3, [pc, #216]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d02e      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d027      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800649c:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064a6:	4b2e      	ldr	r3, [pc, #184]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064ac:	4b2c      	ldr	r3, [pc, #176]	; (8006560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d014      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fd ff79 	bl	80043b8 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fd ff75 	bl	80043b8 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d901      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e036      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e0:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0ee      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4917      	ldr	r1, [pc, #92]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800650a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800651c:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	490b      	ldr	r1, [pc, #44]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800652a:	4313      	orrs	r3, r2
 800652c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800653a:	4b07      	ldr	r3, [pc, #28]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	4904      	ldr	r1, [pc, #16]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40021000 	.word	0x40021000
 800655c:	40007000 	.word	0x40007000
 8006560:	42420440 	.word	0x42420440

08006564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d007      	beq.n	8006596 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e01d      	b.n	80065f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fd fd31 	bl	8004038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f000 f98f 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fb64 	bl	8006ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a10      	ldr	r2, [pc, #64]	; (8006660 <HAL_TIM_PWM_Start+0x60>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d107      	bne.n	8006632 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d007      	beq.n	8006654 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00

08006664 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e07f      	b.n	8006778 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fd fc67 	bl	8003f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a8:	f023 0307 	bic.w	r3, r3, #7
 80066ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f000 f927 	bl	800690c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	4313      	orrs	r3, r2
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006704:	f023 030c 	bic.w	r3, r3, #12
 8006708:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	4313      	orrs	r3, r2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	011a      	lsls	r2, r3, #4
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	4313      	orrs	r3, r2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	4313      	orrs	r3, r2
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006796:	2302      	movs	r3, #2
 8006798:	e0b4      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x184>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	f200 809f 	bhi.w	80068f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	080068f1 	.word	0x080068f1
 80067c0:	080068f1 	.word	0x080068f1
 80067c4:	080068f1 	.word	0x080068f1
 80067c8:	0800682d 	.word	0x0800682d
 80067cc:	080068f1 	.word	0x080068f1
 80067d0:	080068f1 	.word	0x080068f1
 80067d4:	080068f1 	.word	0x080068f1
 80067d8:	0800686f 	.word	0x0800686f
 80067dc:	080068f1 	.word	0x080068f1
 80067e0:	080068f1 	.word	0x080068f1
 80067e4:	080068f1 	.word	0x080068f1
 80067e8:	080068af 	.word	0x080068af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f8ec 	bl	80069d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0208 	orr.w	r2, r2, #8
 8006806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0204 	bic.w	r2, r2, #4
 8006816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6999      	ldr	r1, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	619a      	str	r2, [r3, #24]
      break;
 800682a:	e062      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f932 	bl	8006a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6999      	ldr	r1, [r3, #24]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	619a      	str	r2, [r3, #24]
      break;
 800686c:	e041      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f97b 	bl	8006b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0208 	orr.w	r2, r2, #8
 8006888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0204 	bic.w	r2, r2, #4
 8006898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69d9      	ldr	r1, [r3, #28]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	61da      	str	r2, [r3, #28]
      break;
 80068ac:	e021      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f9c5 	bl	8006c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69d9      	ldr	r1, [r3, #28]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	021a      	lsls	r2, r3, #8
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	61da      	str	r2, [r3, #28]
      break;
 80068ee:	e000      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80068f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <TIM_Base_SetConfig+0xb8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x30>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x30>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <TIM_Base_SetConfig+0xbc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x30>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a25      	ldr	r2, [pc, #148]	; (80069cc <TIM_Base_SetConfig+0xc0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <TIM_Base_SetConfig+0xb8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_Base_SetConfig+0x62>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d007      	beq.n	800696e <TIM_Base_SetConfig+0x62>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <TIM_Base_SetConfig+0xbc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_Base_SetConfig+0x62>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a18      	ldr	r2, [pc, #96]	; (80069cc <TIM_Base_SetConfig+0xc0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d108      	bne.n	8006980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a07      	ldr	r2, [pc, #28]	; (80069c4 <TIM_Base_SetConfig+0xb8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d103      	bne.n	80069b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	615a      	str	r2, [r3, #20]
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800

080069d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f023 0302 	bic.w	r3, r3, #2
 8006a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <TIM_OC1_SetConfig+0xc8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d10c      	bne.n	8006a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 0308 	bic.w	r3, r3, #8
 8006a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 0304 	bic.w	r3, r3, #4
 8006a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a13      	ldr	r2, [pc, #76]	; (8006a98 <TIM_OC1_SetConfig+0xc8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d111      	bne.n	8006a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00

08006a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0210 	bic.w	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0320 	bic.w	r3, r3, #32
 8006ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <TIM_OC2_SetConfig+0xd0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10d      	bne.n	8006b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_OC2_SetConfig+0xd0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d113      	bne.n	8006b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00

08006b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <TIM_OC3_SetConfig+0xd0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10d      	bne.n	8006bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <TIM_OC3_SetConfig+0xd0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d113      	bne.n	8006c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40012c00 	.word	0x40012c00

08006c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	031b      	lsls	r3, r3, #12
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0f      	ldr	r2, [pc, #60]	; (8006cdc <TIM_OC4_SetConfig+0x98>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d109      	bne.n	8006cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	40012c00 	.word	0x40012c00

08006ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e032      	b.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d78:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e03f      	b.n	8006e42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fd f97e 	bl	80040d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fb8d 	bl	8007514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	af02      	add	r7, sp, #8
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	f040 8083 	bne.w	8006f72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_UART_Transmit+0x2e>
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e07b      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_Transmit+0x40>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e074      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2221      	movs	r2, #33	; 0x21
 8006e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006ea0:	f7fd fa8a 	bl	80043b8 <HAL_GetTick>
 8006ea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006eb2:	e042      	b.n	8006f3a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	d122      	bne.n	8006f12 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2180      	movs	r1, #128	; 0x80
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f9b2 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e046      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	3302      	adds	r3, #2
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	e017      	b.n	8006f3a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	e013      	b.n	8006f3a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2180      	movs	r1, #128	; 0x80
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f98f 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e023      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	60ba      	str	r2, [r7, #8]
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1b7      	bne.n	8006eb4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f976 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e00a      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d140      	bne.n	8007018 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <HAL_UART_Receive_IT+0x26>
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e039      	b.n	800701a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_UART_Receive_IT+0x38>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e032      	b.n	800701a <HAL_UART_Receive_IT+0x9e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2222      	movs	r2, #34	; 0x22
 8006fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695a      	ldr	r2, [r3, #20]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0220 	orr.w	r2, r2, #32
 8007012:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_IRQHandler+0x52>
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9ce 	bl	8007410 <UART_Receive_IT>
      return;
 8007074:	e0cc      	b.n	8007210 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80ab 	beq.w	80071d4 <HAL_UART_IRQHandler+0x1b0>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <HAL_UART_IRQHandler+0x70>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80a0 	beq.w	80071d4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <HAL_UART_IRQHandler+0x90>
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_UART_IRQHandler+0xb0>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	f043 0202 	orr.w	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_UART_IRQHandler+0xd0>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	f043 0204 	orr.w	r2, r3, #4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_UART_IRQHandler+0xf0>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	f043 0208 	orr.w	r2, r3, #8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d078      	beq.n	800720e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HAL_UART_IRQHandler+0x112>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f96d 	bl	8007410 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_UART_IRQHandler+0x13a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d031      	beq.n	80071c2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8b8 	bl	80072d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d023      	beq.n	80071ba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007180:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	2b00      	cmp	r3, #0
 8007188:	d013      	beq.n	80071b2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	4a22      	ldr	r2, [pc, #136]	; (8007218 <HAL_UART_IRQHandler+0x1f4>)
 8007190:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fa48 	bl	800462c <HAL_DMA_Abort_IT>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b0:	e00e      	b.n	80071d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f83b 	bl	800722e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b8:	e00a      	b.n	80071d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f837 	bl	800722e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c0:	e006      	b.n	80071d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f833 	bl	800722e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071ce:	e01e      	b.n	800720e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d0:	bf00      	nop
    return;
 80071d2:	e01c      	b.n	800720e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_UART_IRQHandler+0x1cc>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f8a4 	bl	8007336 <UART_Transmit_IT>
    return;
 80071ee:	e00f      	b.n	8007210 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_UART_IRQHandler+0x1ec>
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8eb 	bl	80073e0 <UART_EndTransmit_IT>
    return;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <HAL_UART_IRQHandler+0x1ec>
    return;
 800720e:	bf00      	nop
  }
}
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	0800730f 	.word	0x0800730f

0800721c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007250:	e02c      	b.n	80072ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d028      	beq.n	80072ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <UART_WaitOnFlagUntilTimeout+0x30>
 8007260:	f7fd f8aa 	bl	80043b8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	429a      	cmp	r2, r3
 800726e:	d21d      	bcs.n	80072ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800727e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e00f      	b.n	80072cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d0c3      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ff80 	bl	800722e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b21      	cmp	r3, #33	; 0x21
 8007348:	d144      	bne.n	80073d4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	d11a      	bne.n	800738a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007368:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	621a      	str	r2, [r3, #32]
 800737c:	e00e      	b.n	800739c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	621a      	str	r2, [r3, #32]
 8007388:	e008      	b.n	800739c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6211      	str	r1, [r2, #32]
 8007394:	781a      	ldrb	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4619      	mov	r1, r3
 80073aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ff0b 	bl	800721c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b22      	cmp	r3, #34	; 0x22
 8007422:	d171      	bne.n	8007508 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742c:	d123      	bne.n	8007476 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10e      	bne.n	800745a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28
 8007458:	e029      	b.n	80074ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	b29b      	uxth	r3, r3
 8007462:	b2db      	uxtb	r3, r3
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28
 8007474:	e01b      	b.n	80074ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6858      	ldr	r0, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	1c59      	adds	r1, r3, #1
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6291      	str	r1, [r2, #40]	; 0x28
 800748e:	b2c2      	uxtb	r2, r0
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	e00c      	b.n	80074ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	1c58      	adds	r0, r3, #1
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	6288      	str	r0, [r1, #40]	; 0x28
 80074a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	4619      	mov	r1, r3
 80074bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d120      	bne.n	8007504 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0220 	bic.w	r2, r2, #32
 80074d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695a      	ldr	r2, [r3, #20]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fa fb5a 	bl	8001bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e002      	b.n	800750a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800754e:	f023 030c 	bic.w	r3, r3, #12
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	430b      	orrs	r3, r1
 800755a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a52      	ldr	r2, [pc, #328]	; (80076c0 <UART_SetConfig+0x1ac>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d14e      	bne.n	800761a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800757c:	f7fe ff0a 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 8007580:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009a      	lsls	r2, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	4a4a      	ldr	r2, [pc, #296]	; (80076c4 <UART_SetConfig+0x1b0>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	0119      	lsls	r1, r3, #4
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009a      	lsls	r2, r3, #2
 80075ac:	441a      	add	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075b8:	4b42      	ldr	r3, [pc, #264]	; (80076c4 <UART_SetConfig+0x1b0>)
 80075ba:	fba3 0302 	umull	r0, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	2064      	movs	r0, #100	; 0x64
 80075c2:	fb00 f303 	mul.w	r3, r0, r3
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	3332      	adds	r3, #50	; 0x32
 80075cc:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <UART_SetConfig+0x1b0>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d8:	4419      	add	r1, r3
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009a      	lsls	r2, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f0:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <UART_SetConfig+0x1b0>)
 80075f2:	fba3 0302 	umull	r0, r3, r3, r2
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2064      	movs	r0, #100	; 0x64
 80075fa:	fb00 f303 	mul.w	r3, r0, r3
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	3332      	adds	r3, #50	; 0x32
 8007604:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <UART_SetConfig+0x1b0>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	440a      	add	r2, r1
 8007616:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007618:	e04d      	b.n	80076b6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800761a:	f7fe fea7 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 800761e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009a      	lsls	r2, r3, #2
 800762a:	441a      	add	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	fbb2 f3f3 	udiv	r3, r2, r3
 8007636:	4a23      	ldr	r2, [pc, #140]	; (80076c4 <UART_SetConfig+0x1b0>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	0119      	lsls	r1, r3, #4
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009a      	lsls	r2, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	fbb2 f2f3 	udiv	r2, r2, r3
 8007656:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <UART_SetConfig+0x1b0>)
 8007658:	fba3 0302 	umull	r0, r3, r3, r2
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	2064      	movs	r0, #100	; 0x64
 8007660:	fb00 f303 	mul.w	r3, r0, r3
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	3332      	adds	r3, #50	; 0x32
 800766a:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <UART_SetConfig+0x1b0>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007676:	4419      	add	r1, r3
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009a      	lsls	r2, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	fbb2 f2f3 	udiv	r2, r2, r3
 800768e:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <UART_SetConfig+0x1b0>)
 8007690:	fba3 0302 	umull	r0, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	2064      	movs	r0, #100	; 0x64
 8007698:	fb00 f303 	mul.w	r3, r0, r3
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	3332      	adds	r3, #50	; 0x32
 80076a2:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <UART_SetConfig+0x1b0>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 020f 	and.w	r2, r3, #15
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	440a      	add	r2, r1
 80076b4:	609a      	str	r2, [r3, #8]
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40013800 	.word	0x40013800
 80076c4:	51eb851f 	.word	0x51eb851f

080076c8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076c8:	b084      	sub	sp, #16
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	f107 0014 	add.w	r0, r7, #20
 80076d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	b004      	add	sp, #16
 80076e6:	4770      	bx	lr

080076e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80076f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80076f4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	89fb      	ldrh	r3, [r7, #14]
 8007700:	4313      	orrs	r3, r2
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800771e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007722:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800772a:	b29b      	uxth	r3, r3
 800772c:	b21a      	sxth	r2, r3
 800772e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007732:	43db      	mvns	r3, r3
 8007734:	b21b      	sxth	r3, r3
 8007736:	4013      	ands	r3, r2
 8007738:	b21b      	sxth	r3, r3
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr

08007766 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007766:	b084      	sub	sp, #16
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	f107 0014 	add.w	r0, r7, #20
 8007774:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff ffa5 	bl	80076e8 <USB_EnableGlobalInt>

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077aa:	b004      	add	sp, #16
 80077ac:	4770      	bx	lr
	...

080077b0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077b0:	b490      	push	{r4, r7}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80077d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	78db      	ldrb	r3, [r3, #3]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d819      	bhi.n	8007812 <USB_ActivateEndpoint+0x62>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <USB_ActivateEndpoint+0x34>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	08007809 	.word	0x08007809
 80077ec:	08007819 	.word	0x08007819
 80077f0:	080077ff 	.word	0x080077ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80077f4:	89bb      	ldrh	r3, [r7, #12]
 80077f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077fa:	81bb      	strh	r3, [r7, #12]
      break;
 80077fc:	e00d      	b.n	800781a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80077fe:	89bb      	ldrh	r3, [r7, #12]
 8007800:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007804:	81bb      	strh	r3, [r7, #12]
      break;
 8007806:	e008      	b.n	800781a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007808:	89bb      	ldrh	r3, [r7, #12]
 800780a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800780e:	81bb      	strh	r3, [r7, #12]
      break;
 8007810:	e003      	b.n	800781a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
      break;
 8007816:	e000      	b.n	800781a <USB_ActivateEndpoint+0x6a>
      break;
 8007818:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	441a      	add	r2, r3
 8007824:	89bb      	ldrh	r3, [r7, #12]
 8007826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800782e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007836:	b29b      	uxth	r3, r3
 8007838:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007850:	b29a      	uxth	r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	b29c      	uxth	r4, r3
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	4b8a      	ldr	r3, [pc, #552]	; (8007a90 <USB_ActivateEndpoint+0x2e0>)
 8007868:	4323      	orrs	r3, r4
 800786a:	b29b      	uxth	r3, r3
 800786c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	7b1b      	ldrb	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f040 8112 	bne.w	8007a9c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d067      	beq.n	8007950 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007880:	687c      	ldr	r4, [r7, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	441c      	add	r4, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4423      	add	r3, r4
 8007894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007898:	461c      	mov	r4, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	085b      	lsrs	r3, r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29c      	uxth	r4, r3
 80078b6:	4623      	mov	r3, r4
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d014      	beq.n	80078ea <USB_ActivateEndpoint+0x13a>
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	b29c      	uxth	r4, r3
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	441a      	add	r2, r3
 80078e2:	4b6c      	ldr	r3, [pc, #432]	; (8007a94 <USB_ActivateEndpoint+0x2e4>)
 80078e4:	4323      	orrs	r3, r4
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	78db      	ldrb	r3, [r3, #3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d018      	beq.n	8007924 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007908:	b29c      	uxth	r4, r3
 800790a:	f084 0320 	eor.w	r3, r4, #32
 800790e:	b29c      	uxth	r4, r3
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	4b5d      	ldr	r3, [pc, #372]	; (8007a90 <USB_ActivateEndpoint+0x2e0>)
 800791c:	4323      	orrs	r3, r4
 800791e:	b29b      	uxth	r3, r3
 8007920:	8013      	strh	r3, [r2, #0]
 8007922:	e22b      	b.n	8007d7c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	b29c      	uxth	r4, r3
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	4b52      	ldr	r3, [pc, #328]	; (8007a90 <USB_ActivateEndpoint+0x2e0>)
 8007948:	4323      	orrs	r3, r4
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]
 800794e:	e215      	b.n	8007d7c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007950:	687c      	ldr	r4, [r7, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007958:	b29b      	uxth	r3, r3
 800795a:	441c      	add	r4, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4423      	add	r3, r4
 8007964:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007968:	461c      	mov	r4, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	88db      	ldrh	r3, [r3, #6]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007978:	687c      	ldr	r4, [r7, #4]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007980:	b29b      	uxth	r3, r3
 8007982:	441c      	add	r4, r3
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	4423      	add	r3, r4
 800798c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007990:	461c      	mov	r4, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10e      	bne.n	80079b8 <USB_ActivateEndpoint+0x208>
 800799a:	8823      	ldrh	r3, [r4, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8023      	strh	r3, [r4, #0]
 80079a6:	8823      	ldrh	r3, [r4, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8023      	strh	r3, [r4, #0]
 80079b6:	e02d      	b.n	8007a14 <USB_ActivateEndpoint+0x264>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b3e      	cmp	r3, #62	; 0x3e
 80079be:	d812      	bhi.n	80079e6 <USB_ActivateEndpoint+0x236>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	60bb      	str	r3, [r7, #8]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <USB_ActivateEndpoint+0x22a>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	029b      	lsls	r3, r3, #10
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	8023      	strh	r3, [r4, #0]
 80079e4:	e016      	b.n	8007a14 <USB_ActivateEndpoint+0x264>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <USB_ActivateEndpoint+0x250>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	029b      	lsls	r3, r3, #10
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29c      	uxth	r4, r3
 8007a22:	4623      	mov	r3, r4
 8007a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d014      	beq.n	8007a56 <USB_ActivateEndpoint+0x2a6>
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a42:	b29c      	uxth	r4, r3
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <USB_ActivateEndpoint+0x2e8>)
 8007a50:	4323      	orrs	r3, r4
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	b29c      	uxth	r4, r3
 8007a6e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a72:	b29c      	uxth	r4, r3
 8007a74:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007a78:	b29c      	uxth	r4, r3
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <USB_ActivateEndpoint+0x2e0>)
 8007a86:	4323      	orrs	r3, r4
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	8013      	strh	r3, [r2, #0]
 8007a8c:	e176      	b.n	8007d7c <USB_ActivateEndpoint+0x5cc>
 8007a8e:	bf00      	nop
 8007a90:	ffff8080 	.word	0xffff8080
 8007a94:	ffff80c0 	.word	0xffff80c0
 8007a98:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	b29c      	uxth	r4, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	4b96      	ldr	r3, [pc, #600]	; (8007d18 <USB_ActivateEndpoint+0x568>)
 8007ac0:	4323      	orrs	r3, r4
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ac6:	687c      	ldr	r4, [r7, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	441c      	add	r4, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4423      	add	r3, r4
 8007ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ade:	461c      	mov	r4, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	891b      	ldrh	r3, [r3, #8]
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8023      	strh	r3, [r4, #0]
 8007aee:	687c      	ldr	r4, [r7, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	441c      	add	r4, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4423      	add	r3, r4
 8007b02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007b06:	461c      	mov	r4, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	895b      	ldrh	r3, [r3, #10]
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f040 8088 	bne.w	8007c30 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29c      	uxth	r4, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d014      	beq.n	8007b62 <USB_ActivateEndpoint+0x3b2>
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	b29c      	uxth	r4, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	441a      	add	r2, r3
 8007b5a:	4b70      	ldr	r3, [pc, #448]	; (8007d1c <USB_ActivateEndpoint+0x56c>)
 8007b5c:	4323      	orrs	r3, r4
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29c      	uxth	r4, r3
 8007b70:	4623      	mov	r3, r4
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <USB_ActivateEndpoint+0x3f4>
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b90:	b29c      	uxth	r4, r3
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	441a      	add	r2, r3
 8007b9c:	4b60      	ldr	r3, [pc, #384]	; (8007d20 <USB_ActivateEndpoint+0x570>)
 8007b9e:	4323      	orrs	r3, r4
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	b29c      	uxth	r4, r3
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	4b56      	ldr	r3, [pc, #344]	; (8007d20 <USB_ActivateEndpoint+0x570>)
 8007bc8:	4323      	orrs	r3, r4
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be4:	b29c      	uxth	r4, r3
 8007be6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007bea:	b29c      	uxth	r4, r3
 8007bec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007bf0:	b29c      	uxth	r4, r3
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	441a      	add	r2, r3
 8007bfc:	4b49      	ldr	r3, [pc, #292]	; (8007d24 <USB_ActivateEndpoint+0x574>)
 8007bfe:	4323      	orrs	r3, r4
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1a:	b29c      	uxth	r4, r3
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	441a      	add	r2, r3
 8007c26:	4b3f      	ldr	r3, [pc, #252]	; (8007d24 <USB_ActivateEndpoint+0x574>)
 8007c28:	4323      	orrs	r3, r4
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
 8007c2e:	e0a5      	b.n	8007d7c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29c      	uxth	r4, r3
 8007c3e:	4623      	mov	r3, r4
 8007c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d014      	beq.n	8007c72 <USB_ActivateEndpoint+0x4c2>
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5e:	b29c      	uxth	r4, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	4b2c      	ldr	r3, [pc, #176]	; (8007d1c <USB_ActivateEndpoint+0x56c>)
 8007c6c:	4323      	orrs	r3, r4
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29c      	uxth	r4, r3
 8007c80:	4623      	mov	r3, r4
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <USB_ActivateEndpoint+0x504>
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca0:	b29c      	uxth	r4, r3
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	441a      	add	r2, r3
 8007cac:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <USB_ActivateEndpoint+0x570>)
 8007cae:	4323      	orrs	r3, r4
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	b29c      	uxth	r4, r3
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <USB_ActivateEndpoint+0x56c>)
 8007cd8:	4323      	orrs	r3, r4
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	78db      	ldrb	r3, [r3, #3]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d020      	beq.n	8007d28 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfc:	b29c      	uxth	r4, r3
 8007cfe:	f084 0320 	eor.w	r3, r4, #32
 8007d02:	b29c      	uxth	r4, r3
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	441a      	add	r2, r3
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <USB_ActivateEndpoint+0x574>)
 8007d10:	4323      	orrs	r3, r4
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	8013      	strh	r3, [r2, #0]
 8007d16:	e01c      	b.n	8007d52 <USB_ActivateEndpoint+0x5a2>
 8007d18:	ffff8180 	.word	0xffff8180
 8007d1c:	ffffc080 	.word	0xffffc080
 8007d20:	ffff80c0 	.word	0xffff80c0
 8007d24:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	b29c      	uxth	r4, r3
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <USB_ActivateEndpoint+0x5d8>)
 8007d4c:	4323      	orrs	r3, r4
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d68:	b29c      	uxth	r4, r3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	441a      	add	r2, r3
 8007d74:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <USB_ActivateEndpoint+0x5d8>)
 8007d76:	4323      	orrs	r3, r4
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc90      	pop	{r4, r7}
 8007d86:	4770      	bx	lr
 8007d88:	ffff8080 	.word	0xffff8080

08007d8c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d8c:	b490      	push	{r4, r7}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	7b1b      	ldrb	r3, [r3, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d171      	bne.n	8007e82 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d036      	beq.n	8007e14 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29c      	uxth	r4, r3
 8007db4:	4623      	mov	r3, r4
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d014      	beq.n	8007de8 <USB_DeactivateEndpoint+0x5c>
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd4:	b29c      	uxth	r4, r3
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	441a      	add	r2, r3
 8007de0:	4b6b      	ldr	r3, [pc, #428]	; (8007f90 <USB_DeactivateEndpoint+0x204>)
 8007de2:	4323      	orrs	r3, r4
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dfe:	b29c      	uxth	r4, r3
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	4b62      	ldr	r3, [pc, #392]	; (8007f94 <USB_DeactivateEndpoint+0x208>)
 8007e0c:	4323      	orrs	r3, r4
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	8013      	strh	r3, [r2, #0]
 8007e12:	e144      	b.n	800809e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29c      	uxth	r4, r3
 8007e22:	4623      	mov	r3, r4
 8007e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d014      	beq.n	8007e56 <USB_DeactivateEndpoint+0xca>
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	b29c      	uxth	r4, r3
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	441a      	add	r2, r3
 8007e4e:	4b52      	ldr	r3, [pc, #328]	; (8007f98 <USB_DeactivateEndpoint+0x20c>)
 8007e50:	4323      	orrs	r3, r4
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6c:	b29c      	uxth	r4, r3
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	4b46      	ldr	r3, [pc, #280]	; (8007f94 <USB_DeactivateEndpoint+0x208>)
 8007e7a:	4323      	orrs	r3, r4
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	8013      	strh	r3, [r2, #0]
 8007e80:	e10d      	b.n	800809e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f040 8088 	bne.w	8007f9c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29c      	uxth	r4, r3
 8007e9a:	4623      	mov	r3, r4
 8007e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d014      	beq.n	8007ece <USB_DeactivateEndpoint+0x142>
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eba:	b29c      	uxth	r4, r3
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	4b34      	ldr	r3, [pc, #208]	; (8007f98 <USB_DeactivateEndpoint+0x20c>)
 8007ec8:	4323      	orrs	r3, r4
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29c      	uxth	r4, r3
 8007edc:	4623      	mov	r3, r4
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <USB_DeactivateEndpoint+0x184>
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efc:	b29c      	uxth	r4, r3
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	441a      	add	r2, r3
 8007f08:	4b21      	ldr	r3, [pc, #132]	; (8007f90 <USB_DeactivateEndpoint+0x204>)
 8007f0a:	4323      	orrs	r3, r4
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	b29c      	uxth	r4, r3
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	441a      	add	r2, r3
 8007f32:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <USB_DeactivateEndpoint+0x204>)
 8007f34:	4323      	orrs	r3, r4
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	b29c      	uxth	r4, r3
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <USB_DeactivateEndpoint+0x208>)
 8007f5e:	4323      	orrs	r3, r4
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7a:	b29c      	uxth	r4, r3
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <USB_DeactivateEndpoint+0x208>)
 8007f88:	4323      	orrs	r3, r4
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	8013      	strh	r3, [r2, #0]
 8007f8e:	e086      	b.n	800809e <USB_DeactivateEndpoint+0x312>
 8007f90:	ffff80c0 	.word	0xffff80c0
 8007f94:	ffff8080 	.word	0xffff8080
 8007f98:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29c      	uxth	r4, r3
 8007faa:	4623      	mov	r3, r4
 8007fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d014      	beq.n	8007fde <USB_DeactivateEndpoint+0x252>
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	b29c      	uxth	r4, r3
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	4b35      	ldr	r3, [pc, #212]	; (80080ac <USB_DeactivateEndpoint+0x320>)
 8007fd8:	4323      	orrs	r3, r4
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29c      	uxth	r4, r3
 8007fec:	4623      	mov	r3, r4
 8007fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d014      	beq.n	8008020 <USB_DeactivateEndpoint+0x294>
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	b29c      	uxth	r4, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <USB_DeactivateEndpoint+0x324>)
 800801a:	4323      	orrs	r3, r4
 800801c:	b29b      	uxth	r3, r3
 800801e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	b29c      	uxth	r4, r3
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <USB_DeactivateEndpoint+0x320>)
 8008044:	4323      	orrs	r3, r4
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	b29c      	uxth	r4, r3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <USB_DeactivateEndpoint+0x328>)
 800806e:	4323      	orrs	r3, r4
 8008070:	b29b      	uxth	r3, r3
 8008072:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808a:	b29c      	uxth	r4, r3
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <USB_DeactivateEndpoint+0x328>)
 8008098:	4323      	orrs	r3, r4
 800809a:	b29b      	uxth	r3, r3
 800809c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc90      	pop	{r4, r7}
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	ffffc080 	.word	0xffffc080
 80080b0:	ffff80c0 	.word	0xffff80c0
 80080b4:	ffff8080 	.word	0xffff8080

080080b8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b08d      	sub	sp, #52	; 0x34
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	f040 8160 	bne.w	800838c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	699a      	ldr	r2, [r3, #24]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d909      	bls.n	80080ec <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	1ad2      	subs	r2, r2, r3
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	619a      	str	r2, [r3, #24]
 80080ea:	e005      	b.n	80080f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	7b1b      	ldrb	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d119      	bne.n	8008134 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6959      	ldr	r1, [r3, #20]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	88da      	ldrh	r2, [r3, #6]
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	b29b      	uxth	r3, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fba2 	bl	8008856 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008112:	687c      	ldr	r4, [r7, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800811a:	b29b      	uxth	r3, r3
 800811c:	441c      	add	r4, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	4423      	add	r3, r4
 8008126:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800812a:	461c      	mov	r4, r3
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	b29b      	uxth	r3, r3
 8008130:	8023      	strh	r3, [r4, #0]
 8008132:	e10f      	b.n	8008354 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d065      	beq.n	8008216 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800814a:	687c      	ldr	r4, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d148      	bne.n	80081e6 <USB_EPStartXfer+0x12e>
 8008154:	687c      	ldr	r4, [r7, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815c:	b29b      	uxth	r3, r3
 800815e:	441c      	add	r4, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	4423      	add	r3, r4
 8008168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800816c:	461c      	mov	r4, r3
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10e      	bne.n	8008192 <USB_EPStartXfer+0xda>
 8008174:	8823      	ldrh	r3, [r4, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800817c:	b29b      	uxth	r3, r3
 800817e:	8023      	strh	r3, [r4, #0]
 8008180:	8823      	ldrh	r3, [r4, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29b      	uxth	r3, r3
 800818e:	8023      	strh	r3, [r4, #0]
 8008190:	e03d      	b.n	800820e <USB_EPStartXfer+0x156>
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	2b3e      	cmp	r3, #62	; 0x3e
 8008196:	d810      	bhi.n	80081ba <USB_EPStartXfer+0x102>
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <USB_EPStartXfer+0xf6>
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	3301      	adds	r3, #1
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	029b      	lsls	r3, r3, #10
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8023      	strh	r3, [r4, #0]
 80081b8:	e029      	b.n	800820e <USB_EPStartXfer+0x156>
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <USB_EPStartXfer+0x118>
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	3b01      	subs	r3, #1
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	029b      	lsls	r3, r3, #10
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8023      	strh	r3, [r4, #0]
 80081e4:	e013      	b.n	800820e <USB_EPStartXfer+0x156>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d10f      	bne.n	800820e <USB_EPStartXfer+0x156>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	441c      	add	r4, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	4423      	add	r3, r4
 8008200:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	895b      	ldrh	r3, [r3, #10]
 8008212:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008214:	e063      	b.n	80082de <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d148      	bne.n	80082b0 <USB_EPStartXfer+0x1f8>
 800821e:	687c      	ldr	r4, [r7, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008226:	b29b      	uxth	r3, r3
 8008228:	441c      	add	r4, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	4423      	add	r3, r4
 8008232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008236:	461c      	mov	r4, r3
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10e      	bne.n	800825c <USB_EPStartXfer+0x1a4>
 800823e:	8823      	ldrh	r3, [r4, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008246:	b29b      	uxth	r3, r3
 8008248:	8023      	strh	r3, [r4, #0]
 800824a:	8823      	ldrh	r3, [r4, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008256:	b29b      	uxth	r3, r3
 8008258:	8023      	strh	r3, [r4, #0]
 800825a:	e03d      	b.n	80082d8 <USB_EPStartXfer+0x220>
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	2b3e      	cmp	r3, #62	; 0x3e
 8008260:	d810      	bhi.n	8008284 <USB_EPStartXfer+0x1cc>
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	623b      	str	r3, [r7, #32]
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <USB_EPStartXfer+0x1c0>
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	3301      	adds	r3, #1
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	b29b      	uxth	r3, r3
 800827c:	029b      	lsls	r3, r3, #10
 800827e:	b29b      	uxth	r3, r3
 8008280:	8023      	strh	r3, [r4, #0]
 8008282:	e029      	b.n	80082d8 <USB_EPStartXfer+0x220>
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	623b      	str	r3, [r7, #32]
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <USB_EPStartXfer+0x1e2>
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	3b01      	subs	r3, #1
 8008298:	623b      	str	r3, [r7, #32]
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8023      	strh	r3, [r4, #0]
 80082ae:	e013      	b.n	80082d8 <USB_EPStartXfer+0x220>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d10f      	bne.n	80082d8 <USB_EPStartXfer+0x220>
 80082b8:	687c      	ldr	r4, [r7, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	441c      	add	r4, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	4423      	add	r3, r4
 80082cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082d0:	461c      	mov	r4, r3
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	891b      	ldrh	r3, [r3, #8]
 80082dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6959      	ldr	r1, [r3, #20]
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fab4 	bl	8008856 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d115      	bne.n	8008322 <USB_EPStartXfer+0x26a>
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830c:	b29c      	uxth	r4, r3
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	4b9a      	ldr	r3, [pc, #616]	; (8008584 <USB_EPStartXfer+0x4cc>)
 800831a:	4323      	orrs	r3, r4
 800831c:	b29b      	uxth	r3, r3
 800831e:	8013      	strh	r3, [r2, #0]
 8008320:	e018      	b.n	8008354 <USB_EPStartXfer+0x29c>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	785b      	ldrb	r3, [r3, #1]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d114      	bne.n	8008354 <USB_EPStartXfer+0x29c>
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	b29c      	uxth	r4, r3
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	4b8e      	ldr	r3, [pc, #568]	; (8008588 <USB_EPStartXfer+0x4d0>)
 800834e:	4323      	orrs	r3, r4
 8008350:	b29b      	uxth	r3, r3
 8008352:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836a:	b29c      	uxth	r4, r3
 800836c:	f084 0310 	eor.w	r3, r4, #16
 8008370:	b29c      	uxth	r4, r3
 8008372:	f084 0320 	eor.w	r3, r4, #32
 8008376:	b29c      	uxth	r4, r3
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	441a      	add	r2, r3
 8008382:	4b82      	ldr	r3, [pc, #520]	; (800858c <USB_EPStartXfer+0x4d4>)
 8008384:	4323      	orrs	r3, r4
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
 800838a:	e146      	b.n	800861a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	429a      	cmp	r2, r3
 8008396:	d909      	bls.n	80083ac <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	e005      	b.n	80083b8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2200      	movs	r2, #0
 80083b6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	7b1b      	ldrb	r3, [r3, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d148      	bne.n	8008452 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083c0:	687c      	ldr	r4, [r7, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	441c      	add	r4, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	4423      	add	r3, r4
 80083d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083d8:	461c      	mov	r4, r3
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10e      	bne.n	80083fe <USB_EPStartXfer+0x346>
 80083e0:	8823      	ldrh	r3, [r4, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8023      	strh	r3, [r4, #0]
 80083ec:	8823      	ldrh	r3, [r4, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	8023      	strh	r3, [r4, #0]
 80083fc:	e0f2      	b.n	80085e4 <USB_EPStartXfer+0x52c>
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	2b3e      	cmp	r3, #62	; 0x3e
 8008402:	d810      	bhi.n	8008426 <USB_EPStartXfer+0x36e>
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <USB_EPStartXfer+0x362>
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	b29b      	uxth	r3, r3
 800841e:	029b      	lsls	r3, r3, #10
 8008420:	b29b      	uxth	r3, r3
 8008422:	8023      	strh	r3, [r4, #0]
 8008424:	e0de      	b.n	80085e4 <USB_EPStartXfer+0x52c>
 8008426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	61fb      	str	r3, [r7, #28]
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <USB_EPStartXfer+0x384>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3b01      	subs	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	b29b      	uxth	r3, r3
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844c:	b29b      	uxth	r3, r3
 800844e:	8023      	strh	r3, [r4, #0]
 8008450:	e0c8      	b.n	80085e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d148      	bne.n	80084ec <USB_EPStartXfer+0x434>
 800845a:	687c      	ldr	r4, [r7, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	441c      	add	r4, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	4423      	add	r3, r4
 800846e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008472:	461c      	mov	r4, r3
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10e      	bne.n	8008498 <USB_EPStartXfer+0x3e0>
 800847a:	8823      	ldrh	r3, [r4, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008482:	b29b      	uxth	r3, r3
 8008484:	8023      	strh	r3, [r4, #0]
 8008486:	8823      	ldrh	r3, [r4, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008492:	b29b      	uxth	r3, r3
 8008494:	8023      	strh	r3, [r4, #0]
 8008496:	e03d      	b.n	8008514 <USB_EPStartXfer+0x45c>
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	2b3e      	cmp	r3, #62	; 0x3e
 800849c:	d810      	bhi.n	80084c0 <USB_EPStartXfer+0x408>
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <USB_EPStartXfer+0x3fc>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	3301      	adds	r3, #1
 80084b2:	61bb      	str	r3, [r7, #24]
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	029b      	lsls	r3, r3, #10
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8023      	strh	r3, [r4, #0]
 80084be:	e029      	b.n	8008514 <USB_EPStartXfer+0x45c>
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	f003 031f 	and.w	r3, r3, #31
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <USB_EPStartXfer+0x41e>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	029b      	lsls	r3, r3, #10
 80084dc:	b29b      	uxth	r3, r3
 80084de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8023      	strh	r3, [r4, #0]
 80084ea:	e013      	b.n	8008514 <USB_EPStartXfer+0x45c>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d10f      	bne.n	8008514 <USB_EPStartXfer+0x45c>
 80084f4:	687c      	ldr	r4, [r7, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	441c      	add	r4, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	4423      	add	r3, r4
 8008508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800850c:	461c      	mov	r4, r3
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	b29b      	uxth	r3, r3
 8008512:	8023      	strh	r3, [r4, #0]
 8008514:	687c      	ldr	r4, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	785b      	ldrb	r3, [r3, #1]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d14e      	bne.n	80085bc <USB_EPStartXfer+0x504>
 800851e:	687c      	ldr	r4, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008526:	b29b      	uxth	r3, r3
 8008528:	441c      	add	r4, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4423      	add	r3, r4
 8008532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008536:	461c      	mov	r4, r3
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10e      	bne.n	800855c <USB_EPStartXfer+0x4a4>
 800853e:	8823      	ldrh	r3, [r4, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008546:	b29b      	uxth	r3, r3
 8008548:	8023      	strh	r3, [r4, #0]
 800854a:	8823      	ldrh	r3, [r4, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008556:	b29b      	uxth	r3, r3
 8008558:	8023      	strh	r3, [r4, #0]
 800855a:	e043      	b.n	80085e4 <USB_EPStartXfer+0x52c>
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	2b3e      	cmp	r3, #62	; 0x3e
 8008560:	d816      	bhi.n	8008590 <USB_EPStartXfer+0x4d8>
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	085b      	lsrs	r3, r3, #1
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <USB_EPStartXfer+0x4c0>
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	3301      	adds	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	b29b      	uxth	r3, r3
 800857c:	029b      	lsls	r3, r3, #10
 800857e:	b29b      	uxth	r3, r3
 8008580:	8023      	strh	r3, [r4, #0]
 8008582:	e02f      	b.n	80085e4 <USB_EPStartXfer+0x52c>
 8008584:	ffff80c0 	.word	0xffff80c0
 8008588:	ffffc080 	.word	0xffffc080
 800858c:	ffff8080 	.word	0xffff8080
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <USB_EPStartXfer+0x4ee>
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	8023      	strh	r3, [r4, #0]
 80085ba:	e013      	b.n	80085e4 <USB_EPStartXfer+0x52c>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d10f      	bne.n	80085e4 <USB_EPStartXfer+0x52c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	441c      	add	r4, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	4423      	add	r3, r4
 80085d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	b29a      	uxth	r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	b29c      	uxth	r4, r3
 80085fc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008600:	b29c      	uxth	r4, r3
 8008602:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008606:	b29c      	uxth	r4, r3
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	441a      	add	r2, r3
 8008612:	4b04      	ldr	r3, [pc, #16]	; (8008624 <USB_EPStartXfer+0x56c>)
 8008614:	4323      	orrs	r3, r4
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3734      	adds	r7, #52	; 0x34
 8008620:	46bd      	mov	sp, r7
 8008622:	bd90      	pop	{r4, r7, pc}
 8008624:	ffff8080 	.word	0xffff8080

08008628 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008628:	b490      	push	{r4, r7}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d018      	beq.n	800866c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008650:	b29c      	uxth	r4, r3
 8008652:	f084 0310 	eor.w	r3, r4, #16
 8008656:	b29c      	uxth	r4, r3
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	441a      	add	r2, r3
 8008662:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <USB_EPSetStall+0x80>)
 8008664:	4323      	orrs	r3, r4
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]
 800866a:	e017      	b.n	800869c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	b29c      	uxth	r4, r3
 8008684:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008688:	b29c      	uxth	r4, r3
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	441a      	add	r2, r3
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <USB_EPSetStall+0x80>)
 8008696:	4323      	orrs	r3, r4
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc90      	pop	{r4, r7}
 80086a6:	4770      	bx	lr
 80086a8:	ffff8080 	.word	0xffff8080

080086ac <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086ac:	b490      	push	{r4, r7}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	7b1b      	ldrb	r3, [r3, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d17d      	bne.n	80087ba <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d03d      	beq.n	8008742 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29c      	uxth	r4, r3
 80086d4:	4623      	mov	r3, r4
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d014      	beq.n	8008708 <USB_EPClearStall+0x5c>
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f4:	b29c      	uxth	r4, r3
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	441a      	add	r2, r3
 8008700:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <USB_EPClearStall+0x11c>)
 8008702:	4323      	orrs	r3, r4
 8008704:	b29b      	uxth	r3, r3
 8008706:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	78db      	ldrb	r3, [r3, #3]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d054      	beq.n	80087ba <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008726:	b29c      	uxth	r4, r3
 8008728:	f084 0320 	eor.w	r3, r4, #32
 800872c:	b29c      	uxth	r4, r3
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	441a      	add	r2, r3
 8008738:	4b24      	ldr	r3, [pc, #144]	; (80087cc <USB_EPClearStall+0x120>)
 800873a:	4323      	orrs	r3, r4
 800873c:	b29b      	uxth	r3, r3
 800873e:	8013      	strh	r3, [r2, #0]
 8008740:	e03b      	b.n	80087ba <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29c      	uxth	r4, r3
 8008750:	4623      	mov	r3, r4
 8008752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d014      	beq.n	8008784 <USB_EPClearStall+0xd8>
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008770:	b29c      	uxth	r4, r3
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	441a      	add	r2, r3
 800877c:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <USB_EPClearStall+0x124>)
 800877e:	4323      	orrs	r3, r4
 8008780:	b29b      	uxth	r3, r3
 8008782:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	b29c      	uxth	r4, r3
 800879c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80087a0:	b29c      	uxth	r4, r3
 80087a2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80087a6:	b29c      	uxth	r4, r3
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <USB_EPClearStall+0x120>)
 80087b4:	4323      	orrs	r3, r4
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc90      	pop	{r4, r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	ffff80c0 	.word	0xffff80c0
 80087cc:	ffff8080 	.word	0xffff8080
 80087d0:	ffffc080 	.word	0xffffc080

080087d4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d103      	bne.n	80087ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2280      	movs	r2, #128	; 0x80
 80087ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr

080087fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr

08008822 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008822:	b480      	push	{r7}
 8008824:	b085      	sub	sp, #20
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008830:	b29b      	uxth	r3, r3
 8008832:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008834:	68fb      	ldr	r3, [r7, #12]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr

08008840 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr

08008856 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008856:	b480      	push	{r7}
 8008858:	b08d      	sub	sp, #52	; 0x34
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	4611      	mov	r1, r2
 8008862:	461a      	mov	r2, r3
 8008864:	460b      	mov	r3, r1
 8008866:	80fb      	strh	r3, [r7, #6]
 8008868:	4613      	mov	r3, r2
 800886a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800886c:	88bb      	ldrh	r3, [r7, #4]
 800886e:	3301      	adds	r3, #1
 8008870:	085b      	lsrs	r3, r3, #1
 8008872:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	005a      	lsls	r2, r3, #1
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888e:	e01e      	b.n	80088ce <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	3301      	adds	r3, #1
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	3302      	adds	r3, #2
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	3302      	adds	r3, #2
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	3301      	adds	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	3b01      	subs	r3, #1
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1dd      	bne.n	8008890 <USB_WritePMA+0x3a>
  }
}
 80088d4:	bf00      	nop
 80088d6:	3734      	adds	r7, #52	; 0x34
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr

080088de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088de:	b480      	push	{r7}
 80088e0:	b08b      	sub	sp, #44	; 0x2c
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	4611      	mov	r1, r2
 80088ea:	461a      	mov	r2, r3
 80088ec:	460b      	mov	r3, r1
 80088ee:	80fb      	strh	r3, [r7, #6]
 80088f0:	4613      	mov	r3, r2
 80088f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80088f4:	88bb      	ldrh	r3, [r7, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	005a      	lsls	r2, r3, #1
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008910:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
 8008916:	e01b      	b.n	8008950 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	3302      	adds	r3, #2
 8008924:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	b2da      	uxtb	r2, r3
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	3301      	adds	r3, #1
 8008932:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b2da      	uxtb	r2, r3
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3301      	adds	r3, #1
 8008942:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	3302      	adds	r3, #2
 8008948:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	3b01      	subs	r3, #1
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e0      	bne.n	8008918 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008956:	88bb      	ldrh	r3, [r7, #4]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	701a      	strb	r2, [r3, #0]
  }
}
 8008972:	bf00      	nop
 8008974:	372c      	adds	r7, #44	; 0x2c
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7c1b      	ldrb	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d115      	bne.n	80089c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008998:	2202      	movs	r2, #2
 800899a:	2181      	movs	r1, #129	; 0x81
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 feae 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ac:	2202      	movs	r2, #2
 80089ae:	2101      	movs	r1, #1
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fea4 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80089be:	e012      	b.n	80089e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	2202      	movs	r2, #2
 80089c4:	2181      	movs	r1, #129	; 0x81
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fe99 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089d2:	2340      	movs	r3, #64	; 0x40
 80089d4:	2202      	movs	r2, #2
 80089d6:	2101      	movs	r1, #1
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fe90 	bl	800a6fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089e6:	2308      	movs	r3, #8
 80089e8:	2203      	movs	r2, #3
 80089ea:	2182      	movs	r1, #130	; 0x82
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 fe86 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089fc:	f001 ffa0 	bl	800a940 <USBD_static_malloc>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	e026      	b.n	8008a66 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7c1b      	ldrb	r3, [r3, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 ff3f 	bl	800a8d2 <USBD_LL_PrepareReceive>
 8008a54:	e007      	b.n	8008a66 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	2101      	movs	r1, #1
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 ff36 	bl	800a8d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a80:	2181      	movs	r1, #129	; 0x81
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fe61 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a8e:	2101      	movs	r1, #1
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fe5a 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a9e:	2182      	movs	r1, #130	; 0x82
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 fe52 	bl	800a74a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00e      	beq.n	8008ad4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 ff46 	bl	800a958 <USBD_static_free>
    pdev->pClassData = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d039      	beq.n	8008b7c <USBD_CDC_Setup+0x9e>
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d17c      	bne.n	8008c06 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d029      	beq.n	8008b68 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	b25b      	sxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da11      	bge.n	8008b42 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	88d2      	ldrh	r2, [r2, #6]
 8008b30:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f9f6 	bl	8009f2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b40:	e068      	b.n	8008c14 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	785a      	ldrb	r2, [r3, #1]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fa11 	bl	8009f88 <USBD_CtlPrepareRx>
      break;
 8008b66:	e055      	b.n	8008c14 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	7850      	ldrb	r0, [r2, #1]
 8008b74:	2200      	movs	r2, #0
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	4798      	blx	r3
      break;
 8008b7a:	e04b      	b.n	8008c14 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	2b0a      	cmp	r3, #10
 8008b82:	d017      	beq.n	8008bb4 <USBD_CDC_Setup+0xd6>
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	d029      	beq.n	8008bdc <USBD_CDC_Setup+0xfe>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d133      	bne.n	8008bf4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d107      	bne.n	8008ba6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b96:	f107 030c 	add.w	r3, r7, #12
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 f9c4 	bl	8009f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ba4:	e02e      	b.n	8008c04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f955 	bl	8009e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bb2:	e027      	b.n	8008c04 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d107      	bne.n	8008bce <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bbe:	f107 030f 	add.w	r3, r7, #15
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f9b0 	bl	8009f2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bcc:	e01a      	b.n	8008c04 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 f941 	bl	8009e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8008bda:	e013      	b.n	8008c04 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d00d      	beq.n	8008c02 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f935 	bl	8009e58 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bf2:	e006      	b.n	8008c02 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f92e 	bl	8009e58 <USBD_CtlError>
          ret = USBD_FAIL;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8008c00:	e000      	b.n	8008c04 <USBD_CDC_Setup+0x126>
          break;
 8008c02:	bf00      	nop
      }
      break;
 8008c04:	e006      	b.n	8008c14 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 f925 	bl	8009e58 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	75fb      	strb	r3, [r7, #23]
      break;
 8008c12:	bf00      	nop
  }

  return ret;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c30:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c38:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d037      	beq.n	8008cb4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	331c      	adds	r3, #28
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d026      	beq.n	8008ca8 <USBD_CDC_DataIn+0x8a>
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	331c      	adds	r3, #28
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	78fa      	ldrb	r2, [r7, #3]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	0152      	lsls	r2, r2, #5
 8008c72:	440a      	add	r2, r1
 8008c74:	3238      	adds	r2, #56	; 0x38
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c7c:	fb02 f201 	mul.w	r2, r2, r1
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d110      	bne.n	8008ca8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c86:	78fa      	ldrb	r2, [r7, #3]
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	331c      	adds	r3, #28
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c9a:	78f9      	ldrb	r1, [r7, #3]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fdf3 	bl	800a88c <USBD_LL_Transmit>
 8008ca6:	e003      	b.n	8008cb0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e000      	b.n	8008cb6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008cb4:	2302      	movs	r3, #2
  }
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fe1e 	bl	800a918 <USBD_LL_GetRxDataSize>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d02:	4611      	mov	r1, r2
 8008d04:	4798      	blx	r3

    return USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d0a:	2302      	movs	r3, #2
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d22:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d015      	beq.n	8008d5a <USBD_CDC_EP0_RxReady+0x46>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d34:	2bff      	cmp	r3, #255	; 0xff
 8008d36:	d010      	beq.n	8008d5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2243      	movs	r2, #67	; 0x43
 8008d70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d72:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	200000b4 	.word	0x200000b4

08008d84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2243      	movs	r2, #67	; 0x43
 8008d90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d92:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bc80      	pop	{r7}
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20000070 	.word	0x20000070

08008da4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2243      	movs	r2, #67	; 0x43
 8008db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008db2:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	200000f8 	.word	0x200000f8

08008dc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	220a      	movs	r2, #10
 8008dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008dd2:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	2000002c 	.word	0x2000002c

08008de4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008dee:	2302      	movs	r3, #2
 8008df0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bc80      	pop	{r7}
 8008e0e:	4770      	bx	lr

08008e10 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e24:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e2e:	88fa      	ldrh	r2, [r7, #6]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr

08008e42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e52:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01c      	beq.n	8008ebc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d115      	bne.n	8008eb8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2181      	movs	r1, #129	; 0x81
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fcec 	bl	800a88c <USBD_LL_Transmit>

      return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e002      	b.n	8008ebe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e000      	b.n	8008ebe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ebc:	2302      	movs	r3, #2
  }
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d017      	beq.n	8008f10 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7c1b      	ldrb	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fcec 	bl	800a8d2 <USBD_LL_PrepareReceive>
 8008efa:	e007      	b.n	8008f0c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fce3 	bl	800a8d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e01a      	b.n	8008f68 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	79fa      	ldrb	r2, [r7, #7]
 8008f5e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 fb57 	bl	800a614 <USBD_LL_Init>

  return USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
 8008f90:	e001      	b.n	8008f96 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f92:	2302      	movs	r3, #2
 8008f94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr

08008fa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fb8c 	bl	800a6c8 <USBD_LL_Start>

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr

08008fce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fda:	2302      	movs	r3, #2
 8008fdc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00c      	beq.n	8009002 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	4611      	mov	r1, r2
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fecb 	bl	8009de0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	2b01      	cmp	r3, #1
 800906c:	d00c      	beq.n	8009088 <USBD_LL_SetupStage+0x56>
 800906e:	2b01      	cmp	r3, #1
 8009070:	d302      	bcc.n	8009078 <USBD_LL_SetupStage+0x46>
 8009072:	2b02      	cmp	r3, #2
 8009074:	d010      	beq.n	8009098 <USBD_LL_SetupStage+0x66>
 8009076:	e017      	b.n	80090a8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9cb 	bl	800941c <USBD_StdDevReq>
      break;
 8009086:	e01a      	b.n	80090be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa2d 	bl	80094f0 <USBD_StdItfReq>
      break;
 8009096:	e012      	b.n	80090be <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa6b 	bl	800957c <USBD_StdEPReq>
      break;
 80090a6:	e00a      	b.n	80090be <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fb66 	bl	800a788 <USBD_LL_StallEP>
      break;
 80090bc:	bf00      	nop
  }

  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	460b      	mov	r3, r1
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d14b      	bne.n	8009174 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d134      	bne.n	8009158 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d919      	bls.n	800912e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	1ad2      	subs	r2, r2, r3
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009110:	429a      	cmp	r2, r3
 8009112:	d203      	bcs.n	800911c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009118:	b29b      	uxth	r3, r3
 800911a:	e002      	b.n	8009122 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009120:	b29b      	uxth	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 ff4c 	bl	8009fc4 <USBD_CtlContinueRx>
 800912c:	e038      	b.n	80091a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009140:	2b03      	cmp	r3, #3
 8009142:	d105      	bne.n	8009150 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 ff49 	bl	8009fe8 <USBD_CtlSendStatus>
 8009156:	e023      	b.n	80091a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800915e:	2b05      	cmp	r3, #5
 8009160:	d11e      	bne.n	80091a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800916a:	2100      	movs	r1, #0
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f001 fb0b 	bl	800a788 <USBD_LL_StallEP>
 8009172:	e015      	b.n	80091a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00d      	beq.n	800919c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009186:	2b03      	cmp	r3, #3
 8009188:	d108      	bne.n	800919c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	7afa      	ldrb	r2, [r7, #11]
 8009194:	4611      	mov	r1, r2
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	4798      	blx	r3
 800919a:	e001      	b.n	80091a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800919c:	2302      	movs	r3, #2
 800919e:	e000      	b.n	80091a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b086      	sub	sp, #24
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	460b      	mov	r3, r1
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d17f      	bne.n	80092be <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3314      	adds	r3, #20
 80091c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d15c      	bne.n	8009288 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d915      	bls.n	8009206 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	1ad2      	subs	r2, r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 feb6 	bl	8009f64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f8:	2300      	movs	r3, #0
 80091fa:	2200      	movs	r2, #0
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f001 fb67 	bl	800a8d2 <USBD_LL_PrepareReceive>
 8009204:	e04e      	b.n	80092a4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	6912      	ldr	r2, [r2, #16]
 800920e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009212:	fb02 f201 	mul.w	r2, r2, r1
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d11c      	bne.n	8009256 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009224:	429a      	cmp	r2, r3
 8009226:	d316      	bcc.n	8009256 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009232:	429a      	cmp	r2, r3
 8009234:	d20f      	bcs.n	8009256 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009236:	2200      	movs	r2, #0
 8009238:	2100      	movs	r1, #0
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 fe92 	bl	8009f64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009248:	2300      	movs	r3, #0
 800924a:	2200      	movs	r2, #0
 800924c:	2100      	movs	r1, #0
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 fb3f 	bl	800a8d2 <USBD_LL_PrepareReceive>
 8009254:	e026      	b.n	80092a4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009268:	2b03      	cmp	r3, #3
 800926a:	d105      	bne.n	8009278 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009278:	2180      	movs	r1, #128	; 0x80
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f001 fa84 	bl	800a788 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fec4 	bl	800a00e <USBD_CtlReceiveStatus>
 8009286:	e00d      	b.n	80092a4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800928e:	2b04      	cmp	r3, #4
 8009290:	d004      	beq.n	800929c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800929c:	2180      	movs	r1, #128	; 0x80
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 fa72 	bl	800a788 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d11d      	bne.n	80092ea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fe83 	bl	8008fba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092bc:	e015      	b.n	80092ea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d108      	bne.n	80092e6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	7afa      	ldrb	r2, [r7, #11]
 80092de:	4611      	mov	r1, r2
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	4798      	blx	r3
 80092e4:	e001      	b.n	80092ea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80092e6:	2302      	movs	r3, #2
 80092e8:	e000      	b.n	80092ec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 f9fb 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2240      	movs	r2, #64	; 0x40
 8009314:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009318:	2340      	movs	r3, #64	; 0x40
 800931a:	2200      	movs	r2, #0
 800931c:	2180      	movs	r1, #128	; 0x80
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f9ed 	bl	800a6fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2240      	movs	r2, #64	; 0x40
 800932e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d009      	beq.n	800936c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6852      	ldr	r2, [r2, #4]
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	4611      	mov	r1, r2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
  }

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr

08009394 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2204      	movs	r2, #4
 80093ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d105      	bne.n	80093da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr

080093e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d10b      	bne.n	8009410 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009432:	2b20      	cmp	r3, #32
 8009434:	d004      	beq.n	8009440 <USBD_StdDevReq+0x24>
 8009436:	2b40      	cmp	r3, #64	; 0x40
 8009438:	d002      	beq.n	8009440 <USBD_StdDevReq+0x24>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d008      	beq.n	8009450 <USBD_StdDevReq+0x34>
 800943e:	e04c      	b.n	80094da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
      break;
 800944e:	e049      	b.n	80094e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b09      	cmp	r3, #9
 8009456:	d83a      	bhi.n	80094ce <USBD_StdDevReq+0xb2>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USBD_StdDevReq+0x44>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	080094b1 	.word	0x080094b1
 8009464:	080094c5 	.word	0x080094c5
 8009468:	080094cf 	.word	0x080094cf
 800946c:	080094bb 	.word	0x080094bb
 8009470:	080094cf 	.word	0x080094cf
 8009474:	08009493 	.word	0x08009493
 8009478:	08009489 	.word	0x08009489
 800947c:	080094cf 	.word	0x080094cf
 8009480:	080094a7 	.word	0x080094a7
 8009484:	0800949d 	.word	0x0800949d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9d4 	bl	8009838 <USBD_GetDescriptor>
          break;
 8009490:	e022      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb37 	bl	8009b08 <USBD_SetAddress>
          break;
 800949a:	e01d      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb74 	bl	8009b8c <USBD_SetConfig>
          break;
 80094a4:	e018      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbfd 	bl	8009ca8 <USBD_GetConfig>
          break;
 80094ae:	e013      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc2c 	bl	8009d10 <USBD_GetStatus>
          break;
 80094b8:	e00e      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fc5a 	bl	8009d76 <USBD_SetFeature>
          break;
 80094c2:	e009      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fc69 	bl	8009d9e <USBD_ClrFeature>
          break;
 80094cc:	e004      	b.n	80094d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fcc1 	bl	8009e58 <USBD_CtlError>
          break;
 80094d6:	bf00      	nop
      }
      break;
 80094d8:	e004      	b.n	80094e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fcbb 	bl	8009e58 <USBD_CtlError>
      break;
 80094e2:	bf00      	nop
  }

  return ret;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009506:	2b20      	cmp	r3, #32
 8009508:	d003      	beq.n	8009512 <USBD_StdItfReq+0x22>
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d001      	beq.n	8009512 <USBD_StdItfReq+0x22>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d12a      	bne.n	8009568 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009518:	3b01      	subs	r3, #1
 800951a:	2b02      	cmp	r3, #2
 800951c:	d81d      	bhi.n	800955a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	889b      	ldrh	r3, [r3, #4]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b01      	cmp	r3, #1
 8009526:	d813      	bhi.n	8009550 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	88db      	ldrh	r3, [r3, #6]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d110      	bne.n	8009564 <USBD_StdItfReq+0x74>
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10d      	bne.n	8009564 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fd4d 	bl	8009fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800954e:	e009      	b.n	8009564 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fc80 	bl	8009e58 <USBD_CtlError>
          break;
 8009558:	e004      	b.n	8009564 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fc7b 	bl	8009e58 <USBD_CtlError>
          break;
 8009562:	e000      	b.n	8009566 <USBD_StdItfReq+0x76>
          break;
 8009564:	bf00      	nop
      }
      break;
 8009566:	e004      	b.n	8009572 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc74 	bl	8009e58 <USBD_CtlError>
      break;
 8009570:	bf00      	nop
  }

  return USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	889b      	ldrh	r3, [r3, #4]
 800958e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009598:	2b20      	cmp	r3, #32
 800959a:	d004      	beq.n	80095a6 <USBD_StdEPReq+0x2a>
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d002      	beq.n	80095a6 <USBD_StdEPReq+0x2a>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d008      	beq.n	80095b6 <USBD_StdEPReq+0x3a>
 80095a4:	e13d      	b.n	8009822 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	4798      	blx	r3
      break;
 80095b4:	e13a      	b.n	800982c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095be:	2b20      	cmp	r3, #32
 80095c0:	d10a      	bne.n	80095d8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	e12a      	b.n	800982e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d03e      	beq.n	800965e <USBD_StdEPReq+0xe2>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d002      	beq.n	80095ea <USBD_StdEPReq+0x6e>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d070      	beq.n	80096ca <USBD_StdEPReq+0x14e>
 80095e8:	e115      	b.n	8009816 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d002      	beq.n	80095fa <USBD_StdEPReq+0x7e>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d015      	beq.n	8009624 <USBD_StdEPReq+0xa8>
 80095f8:	e02b      	b.n	8009652 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00c      	beq.n	800961a <USBD_StdEPReq+0x9e>
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b80      	cmp	r3, #128	; 0x80
 8009604:	d009      	beq.n	800961a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 f8bc 	bl	800a788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009610:	2180      	movs	r1, #128	; 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f8b8 	bl	800a788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009618:	e020      	b.n	800965c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fc1b 	bl	8009e58 <USBD_CtlError>
              break;
 8009622:	e01b      	b.n	800965c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10e      	bne.n	800964a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <USBD_StdEPReq+0xce>
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d008      	beq.n	800964a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	88db      	ldrh	r3, [r3, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f89f 	bl	800a788 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fccc 	bl	8009fe8 <USBD_CtlSendStatus>

              break;
 8009650:	e004      	b.n	800965c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fbff 	bl	8009e58 <USBD_CtlError>
              break;
 800965a:	bf00      	nop
          }
          break;
 800965c:	e0e0      	b.n	8009820 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009664:	2b02      	cmp	r3, #2
 8009666:	d002      	beq.n	800966e <USBD_StdEPReq+0xf2>
 8009668:	2b03      	cmp	r3, #3
 800966a:	d015      	beq.n	8009698 <USBD_StdEPReq+0x11c>
 800966c:	e026      	b.n	80096bc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00c      	beq.n	800968e <USBD_StdEPReq+0x112>
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b80      	cmp	r3, #128	; 0x80
 8009678:	d009      	beq.n	800968e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f882 	bl	800a788 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009684:	2180      	movs	r1, #128	; 0x80
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 f87e 	bl	800a788 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800968c:	e01c      	b.n	80096c8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fbe1 	bl	8009e58 <USBD_CtlError>
              break;
 8009696:	e017      	b.n	80096c8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	885b      	ldrh	r3, [r3, #2]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d112      	bne.n	80096c6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f889 	bl	800a7c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fc97 	bl	8009fe8 <USBD_CtlSendStatus>
              }
              break;
 80096ba:	e004      	b.n	80096c6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fbca 	bl	8009e58 <USBD_CtlError>
              break;
 80096c4:	e000      	b.n	80096c8 <USBD_StdEPReq+0x14c>
              break;
 80096c6:	bf00      	nop
          }
          break;
 80096c8:	e0aa      	b.n	8009820 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d002      	beq.n	80096da <USBD_StdEPReq+0x15e>
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d032      	beq.n	800973e <USBD_StdEPReq+0x1c2>
 80096d8:	e097      	b.n	800980a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <USBD_StdEPReq+0x174>
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d004      	beq.n	80096f0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fbb5 	bl	8009e58 <USBD_CtlError>
                break;
 80096ee:	e091      	b.n	8009814 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	da0b      	bge.n	8009710 <USBD_StdEPReq+0x194>
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	3310      	adds	r3, #16
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	4413      	add	r3, r2
 800970c:	3304      	adds	r3, #4
 800970e:	e00b      	b.n	8009728 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	4413      	add	r3, r2
 8009726:	3304      	adds	r3, #4
 8009728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2200      	movs	r2, #0
 800972e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2202      	movs	r2, #2
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fbf8 	bl	8009f2c <USBD_CtlSendData>
              break;
 800973c:	e06a      	b.n	8009814 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800973e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009742:	2b00      	cmp	r3, #0
 8009744:	da11      	bge.n	800976a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3318      	adds	r3, #24
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d117      	bne.n	8009790 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fb78 	bl	8009e58 <USBD_CtlError>
                  break;
 8009768:	e054      	b.n	8009814 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	f003 020f 	and.w	r2, r3, #15
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	440b      	add	r3, r1
 800977c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fb65 	bl	8009e58 <USBD_CtlError>
                  break;
 800978e:	e041      	b.n	8009814 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009794:	2b00      	cmp	r3, #0
 8009796:	da0b      	bge.n	80097b0 <USBD_StdEPReq+0x234>
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	3310      	adds	r3, #16
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	4413      	add	r3, r2
 80097ac:	3304      	adds	r3, #4
 80097ae:	e00b      	b.n	80097c8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	3304      	adds	r3, #4
 80097c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <USBD_StdEPReq+0x25a>
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	2b80      	cmp	r3, #128	; 0x80
 80097d4:	d103      	bne.n	80097de <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e00e      	b.n	80097fc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 f80e 	bl	800a804 <USBD_LL_IsStallEP>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e002      	b.n	80097fc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2202      	movs	r2, #2
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fb92 	bl	8009f2c <USBD_CtlSendData>
              break;
 8009808:	e004      	b.n	8009814 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fb23 	bl	8009e58 <USBD_CtlError>
              break;
 8009812:	bf00      	nop
          }
          break;
 8009814:	e004      	b.n	8009820 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fb1d 	bl	8009e58 <USBD_CtlError>
          break;
 800981e:	bf00      	nop
      }
      break;
 8009820:	e004      	b.n	800982c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fb17 	bl	8009e58 <USBD_CtlError>
      break;
 800982a:	bf00      	nop
  }

  return ret;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009842:	2300      	movs	r3, #0
 8009844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	0a1b      	lsrs	r3, r3, #8
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	2b06      	cmp	r3, #6
 800985a:	f200 8128 	bhi.w	8009aae <USBD_GetDescriptor+0x276>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <USBD_GetDescriptor+0x2c>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009881 	.word	0x08009881
 8009868:	08009899 	.word	0x08009899
 800986c:	080098d9 	.word	0x080098d9
 8009870:	08009aaf 	.word	0x08009aaf
 8009874:	08009aaf 	.word	0x08009aaf
 8009878:	08009a4f 	.word	0x08009a4f
 800987c:	08009a7b 	.word	0x08009a7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	7c12      	ldrb	r2, [r2, #16]
 800988c:	f107 0108 	add.w	r1, r7, #8
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
      break;
 8009896:	e112      	b.n	8009abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7c1b      	ldrb	r3, [r3, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10d      	bne.n	80098bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	f107 0208 	add.w	r2, r7, #8
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	2202      	movs	r2, #2
 80098b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098ba:	e100      	b.n	8009abe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f107 0208 	add.w	r2, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]
      break;
 80098d6:	e0f2      	b.n	8009abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	885b      	ldrh	r3, [r3, #2]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b05      	cmp	r3, #5
 80098e0:	f200 80ac 	bhi.w	8009a3c <USBD_GetDescriptor+0x204>
 80098e4:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <USBD_GetDescriptor+0xb4>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009905 	.word	0x08009905
 80098f0:	08009939 	.word	0x08009939
 80098f4:	0800996d 	.word	0x0800996d
 80098f8:	080099a1 	.word	0x080099a1
 80098fc:	080099d5 	.word	0x080099d5
 8009900:	08009a09 	.word	0x08009a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00b      	beq.n	8009928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	7c12      	ldrb	r2, [r2, #16]
 800991c:	f107 0108 	add.w	r1, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009926:	e091      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa94 	bl	8009e58 <USBD_CtlError>
            err++;
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	3301      	adds	r3, #1
 8009934:	72fb      	strb	r3, [r7, #11]
          break;
 8009936:	e089      	b.n	8009a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995a:	e077      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa7a 	bl	8009e58 <USBD_CtlError>
            err++;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	3301      	adds	r3, #1
 8009968:	72fb      	strb	r3, [r7, #11]
          break;
 800996a:	e06f      	b.n	8009a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800998e:	e05d      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa60 	bl	8009e58 <USBD_CtlError>
            err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
          break;
 800999e:	e055      	b.n	8009a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	7c12      	ldrb	r2, [r2, #16]
 80099b8:	f107 0108 	add.w	r1, r7, #8
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
 80099c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c2:	e043      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa46 	bl	8009e58 <USBD_CtlError>
            err++;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
 80099ce:	3301      	adds	r3, #1
 80099d0:	72fb      	strb	r3, [r7, #11]
          break;
 80099d2:	e03b      	b.n	8009a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e029      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa2c 	bl	8009e58 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e021      	b.n	8009a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e00f      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa12 	bl	8009e58 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e007      	b.n	8009a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa0a 	bl	8009e58 <USBD_CtlError>
          err++;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3301      	adds	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009a4a:	e038      	b.n	8009abe <USBD_GetDescriptor+0x286>
 8009a4c:	e037      	b.n	8009abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7c1b      	ldrb	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5e:	f107 0208 	add.w	r2, r7, #8
 8009a62:	4610      	mov	r0, r2
 8009a64:	4798      	blx	r3
 8009a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a68:	e029      	b.n	8009abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f9f3 	bl	8009e58 <USBD_CtlError>
        err++;
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	3301      	adds	r3, #1
 8009a76:	72fb      	strb	r3, [r7, #11]
      break;
 8009a78:	e021      	b.n	8009abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	7c1b      	ldrb	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10d      	bne.n	8009a9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	f107 0208 	add.w	r2, r7, #8
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4798      	blx	r3
 8009a92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3301      	adds	r3, #1
 8009a98:	2207      	movs	r2, #7
 8009a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a9c:	e00f      	b.n	8009abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f9d9 	bl	8009e58 <USBD_CtlError>
        err++;
 8009aa6:	7afb      	ldrb	r3, [r7, #11]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8009aac:	e007      	b.n	8009abe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9d1 	bl	8009e58 <USBD_CtlError>
      err++;
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	72fb      	strb	r3, [r7, #11]
      break;
 8009abc:	bf00      	nop
  }

  if (err != 0U)
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11c      	bne.n	8009afe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ac4:	893b      	ldrh	r3, [r7, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d011      	beq.n	8009aee <USBD_GetDescriptor+0x2b6>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	88db      	ldrh	r3, [r3, #6]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	88da      	ldrh	r2, [r3, #6]
 8009ad6:	893b      	ldrh	r3, [r7, #8]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bf28      	it	cs
 8009adc:	4613      	movcs	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ae2:	893b      	ldrh	r3, [r7, #8]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa1f 	bl	8009f2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	88db      	ldrh	r3, [r3, #6]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fa76 	bl	8009fe8 <USBD_CtlSendStatus>
 8009afc:	e000      	b.n	8009b00 <USBD_GetDescriptor+0x2c8>
    return;
 8009afe:	bf00      	nop
    }
  }
}
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop

08009b08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d130      	bne.n	8009b7c <USBD_SetAddress+0x74>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	88db      	ldrh	r3, [r3, #6]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d12c      	bne.n	8009b7c <USBD_SetAddress+0x74>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	885b      	ldrh	r3, [r3, #2]
 8009b26:	2b7f      	cmp	r3, #127	; 0x7f
 8009b28:	d828      	bhi.n	8009b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	885b      	ldrh	r3, [r3, #2]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d104      	bne.n	8009b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f988 	bl	8009e58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b48:	e01c      	b.n	8009b84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7bfa      	ldrb	r2, [r7, #15]
 8009b4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fe79 	bl	800a84e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa43 	bl	8009fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b70:	e008      	b.n	8009b84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7a:	e003      	b.n	8009b84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f96a 	bl	8009e58 <USBD_CtlError>
  }
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	885b      	ldrh	r3, [r3, #2]
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	4b41      	ldr	r3, [pc, #260]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ba0:	4b40      	ldr	r3, [pc, #256]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d904      	bls.n	8009bb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f954 	bl	8009e58 <USBD_CtlError>
 8009bb0:	e075      	b.n	8009c9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d002      	beq.n	8009bc2 <USBD_SetConfig+0x36>
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d023      	beq.n	8009c08 <USBD_SetConfig+0x7c>
 8009bc0:	e062      	b.n	8009c88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009bc2:	4b38      	ldr	r3, [pc, #224]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01a      	beq.n	8009c00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009bca:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bdc:	4b31      	ldr	r3, [pc, #196]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff f9f3 	bl	8008fce <USBD_SetClassConfig>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d104      	bne.n	8009bf8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f931 	bl	8009e58 <USBD_CtlError>
            return;
 8009bf6:	e052      	b.n	8009c9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f9f5 	bl	8009fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bfe:	e04e      	b.n	8009c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f9f1 	bl	8009fe8 <USBD_CtlSendStatus>
        break;
 8009c06:	e04a      	b.n	8009c9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c08:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d112      	bne.n	8009c36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009c18:	4b22      	ldr	r3, [pc, #136]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c22:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff f9ef 	bl	800900c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f9da 	bl	8009fe8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c34:	e033      	b.n	8009c9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009c36:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d01d      	beq.n	8009c80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff f9dd 	bl	800900c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009c52:	4b14      	ldr	r3, [pc, #80]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c5c:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff f9b3 	bl	8008fce <USBD_SetClassConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d104      	bne.n	8009c78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f8f1 	bl	8009e58 <USBD_CtlError>
            return;
 8009c76:	e012      	b.n	8009c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f9b5 	bl	8009fe8 <USBD_CtlSendStatus>
        break;
 8009c7e:	e00e      	b.n	8009c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f9b1 	bl	8009fe8 <USBD_CtlSendStatus>
        break;
 8009c86:	e00a      	b.n	8009c9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f8e4 	bl	8009e58 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <USBD_SetConfig+0x118>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff f9b8 	bl	800900c <USBD_ClrClassConfig>
        break;
 8009c9c:	bf00      	nop
    }
  }
}
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20000398 	.word	0x20000398

08009ca8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d004      	beq.n	8009cc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f8cb 	bl	8009e58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cc2:	e021      	b.n	8009d08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	db17      	blt.n	8009cfe <USBD_GetConfig+0x56>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	dd02      	ble.n	8009cd8 <USBD_GetConfig+0x30>
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d00b      	beq.n	8009cee <USBD_GetConfig+0x46>
 8009cd6:	e012      	b.n	8009cfe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f920 	bl	8009f2c <USBD_CtlSendData>
        break;
 8009cec:	e00c      	b.n	8009d08 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f918 	bl	8009f2c <USBD_CtlSendData>
        break;
 8009cfc:	e004      	b.n	8009d08 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8a9 	bl	8009e58 <USBD_CtlError>
        break;
 8009d06:	bf00      	nop
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d20:	3b01      	subs	r3, #1
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d81e      	bhi.n	8009d64 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	88db      	ldrh	r3, [r3, #6]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d004      	beq.n	8009d38 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f891 	bl	8009e58 <USBD_CtlError>
        break;
 8009d36:	e01a      	b.n	8009d6e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f043 0202 	orr.w	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	330c      	adds	r3, #12
 8009d58:	2202      	movs	r2, #2
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f8e5 	bl	8009f2c <USBD_CtlSendData>
      break;
 8009d62:	e004      	b.n	8009d6e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f876 	bl	8009e58 <USBD_CtlError>
      break;
 8009d6c:	bf00      	nop
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	885b      	ldrh	r3, [r3, #2]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d106      	bne.n	8009d96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f929 	bl	8009fe8 <USBD_CtlSendStatus>
  }
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dae:	3b01      	subs	r3, #1
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d80b      	bhi.n	8009dcc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	885b      	ldrh	r3, [r3, #2]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d10c      	bne.n	8009dd6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f90f 	bl	8009fe8 <USBD_CtlSendStatus>
      }
      break;
 8009dca:	e004      	b.n	8009dd6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f842 	bl	8009e58 <USBD_CtlError>
      break;
 8009dd4:	e000      	b.n	8009dd8 <USBD_ClrFeature+0x3a>
      break;
 8009dd6:	bf00      	nop
  }
}
 8009dd8:	bf00      	nop
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	785a      	ldrb	r2, [r3, #1]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3303      	adds	r3, #3
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4413      	add	r3, r2
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	3305      	adds	r3, #5
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4413      	add	r3, r2
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	3306      	adds	r3, #6
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	021b      	lsls	r3, r3, #8
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	80da      	strh	r2, [r3, #6]

}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bc80      	pop	{r7}
 8009e56:	4770      	bx	lr

08009e58 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009e62:	2180      	movs	r1, #128	; 0x80
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fc8f 	bl	800a788 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc8b 	bl	800a788 <USBD_LL_StallEP>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b086      	sub	sp, #24
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d032      	beq.n	8009ef6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f834 	bl	8009efe <USBD_GetLen>
 8009e96:	4603      	mov	r3, r0
 8009e98:	3301      	adds	r3, #1
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	75fa      	strb	r2, [r7, #23]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4413      	add	r3, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	75fa      	strb	r2, [r7, #23]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ec6:	e012      	b.n	8009eee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	60fa      	str	r2, [r7, #12]
 8009ece:	7dfa      	ldrb	r2, [r7, #23]
 8009ed0:	1c51      	adds	r1, r2, #1
 8009ed2:	75f9      	strb	r1, [r7, #23]
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	440a      	add	r2, r1
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	75fa      	strb	r2, [r7, #23]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4413      	add	r3, r2
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e8      	bne.n	8009ec8 <USBD_GetString+0x4e>
    }
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f0a:	e005      	b.n	8009f18 <USBD_GetLen+0x1a>
  {
    len++;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3301      	adds	r3, #1
 8009f16:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1f5      	bne.n	8009f0c <USBD_GetLen+0xe>
  }

  return len;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bc80      	pop	{r7}
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f42:	88fa      	ldrh	r2, [r7, #6]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f48:	88fa      	ldrh	r2, [r7, #6]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	2100      	movs	r1, #0
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fc99 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f72:	88fb      	ldrh	r3, [r7, #6]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	2100      	movs	r1, #0
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f000 fc87 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4613      	mov	r3, r2
 8009f94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009fa6:	88fa      	ldrh	r2, [r7, #6]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 fc8c 	bl	800a8d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fc7a 	bl	800a8d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2204      	movs	r2, #4
 8009ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fc44 	bl	800a88c <USBD_LL_Transmit>

  return USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2205      	movs	r2, #5
 800a01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a01e:	2300      	movs	r3, #0
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fc54 	bl	800a8d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a038:	2200      	movs	r2, #0
 800a03a:	4912      	ldr	r1, [pc, #72]	; (800a084 <MX_USB_DEVICE_Init+0x50>)
 800a03c:	4812      	ldr	r0, [pc, #72]	; (800a088 <MX_USB_DEVICE_Init+0x54>)
 800a03e:	f7fe ff6c 	bl	8008f1a <USBD_Init>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a048:	f7f9 ff52 	bl	8003ef0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a04c:	490f      	ldr	r1, [pc, #60]	; (800a08c <MX_USB_DEVICE_Init+0x58>)
 800a04e:	480e      	ldr	r0, [pc, #56]	; (800a088 <MX_USB_DEVICE_Init+0x54>)
 800a050:	f7fe ff8e 	bl	8008f70 <USBD_RegisterClass>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a05a:	f7f9 ff49 	bl	8003ef0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a05e:	490c      	ldr	r1, [pc, #48]	; (800a090 <MX_USB_DEVICE_Init+0x5c>)
 800a060:	4809      	ldr	r0, [pc, #36]	; (800a088 <MX_USB_DEVICE_Init+0x54>)
 800a062:	f7fe febf 	bl	8008de4 <USBD_CDC_RegisterInterface>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a06c:	f7f9 ff40 	bl	8003ef0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a070:	4805      	ldr	r0, [pc, #20]	; (800a088 <MX_USB_DEVICE_Init+0x54>)
 800a072:	f7fe ff96 	bl	8008fa2 <USBD_Start>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a07c:	f7f9 ff38 	bl	8003ef0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a080:	bf00      	nop
 800a082:	bd80      	pop	{r7, pc}
 800a084:	2000014c 	.word	0x2000014c
 800a088:	20000ac0 	.word	0x20000ac0
 800a08c:	20000038 	.word	0x20000038
 800a090:	2000013c 	.word	0x2000013c

0800a094 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a098:	2200      	movs	r2, #0
 800a09a:	4905      	ldr	r1, [pc, #20]	; (800a0b0 <CDC_Init_FS+0x1c>)
 800a09c:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <CDC_Init_FS+0x20>)
 800a09e:	f7fe feb7 	bl	8008e10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0a2:	4905      	ldr	r1, [pc, #20]	; (800a0b8 <CDC_Init_FS+0x24>)
 800a0a4:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <CDC_Init_FS+0x20>)
 800a0a6:	f7fe fecc 	bl	8008e42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20001174 	.word	0x20001174
 800a0b4:	20000ac0 	.word	0x20000ac0
 800a0b8:	20000d84 	.word	0x20000d84

0800a0bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bc80      	pop	{r7}
 800a0c8:	4770      	bx	lr
	...

0800a0cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b23      	cmp	r3, #35	; 0x23
 800a0e0:	d86e      	bhi.n	800a1c0 <CDC_Control_FS+0xf4>
 800a0e2:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <CDC_Control_FS+0x1c>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a1c1 	.word	0x0800a1c1
 800a0ec:	0800a1c1 	.word	0x0800a1c1
 800a0f0:	0800a1c1 	.word	0x0800a1c1
 800a0f4:	0800a1c1 	.word	0x0800a1c1
 800a0f8:	0800a1c1 	.word	0x0800a1c1
 800a0fc:	0800a1c1 	.word	0x0800a1c1
 800a100:	0800a1c1 	.word	0x0800a1c1
 800a104:	0800a1c1 	.word	0x0800a1c1
 800a108:	0800a1c1 	.word	0x0800a1c1
 800a10c:	0800a1c1 	.word	0x0800a1c1
 800a110:	0800a1c1 	.word	0x0800a1c1
 800a114:	0800a1c1 	.word	0x0800a1c1
 800a118:	0800a1c1 	.word	0x0800a1c1
 800a11c:	0800a1c1 	.word	0x0800a1c1
 800a120:	0800a1c1 	.word	0x0800a1c1
 800a124:	0800a1c1 	.word	0x0800a1c1
 800a128:	0800a1c1 	.word	0x0800a1c1
 800a12c:	0800a1c1 	.word	0x0800a1c1
 800a130:	0800a1c1 	.word	0x0800a1c1
 800a134:	0800a1c1 	.word	0x0800a1c1
 800a138:	0800a1c1 	.word	0x0800a1c1
 800a13c:	0800a1c1 	.word	0x0800a1c1
 800a140:	0800a1c1 	.word	0x0800a1c1
 800a144:	0800a1c1 	.word	0x0800a1c1
 800a148:	0800a1c1 	.word	0x0800a1c1
 800a14c:	0800a1c1 	.word	0x0800a1c1
 800a150:	0800a1c1 	.word	0x0800a1c1
 800a154:	0800a1c1 	.word	0x0800a1c1
 800a158:	0800a1c1 	.word	0x0800a1c1
 800a15c:	0800a1c1 	.word	0x0800a1c1
 800a160:	0800a1c1 	.word	0x0800a1c1
 800a164:	0800a1c1 	.word	0x0800a1c1
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a19d 	.word	0x0800a19d
 800a170:	0800a1c1 	.word	0x0800a1c1
 800a174:	0800a1c1 	.word	0x0800a1c1
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

    	for(uint8_t i=0; i<7 ;i++)
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
 800a17c:	e00a      	b.n	800a194 <CDC_Control_FS+0xc8>
    	{
    		*(LineCoding+i) = *(pbuf+i);
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	441a      	add	r2, r3
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4912      	ldr	r1, [pc, #72]	; (800a1d0 <CDC_Control_FS+0x104>)
 800a188:	440b      	add	r3, r1
 800a18a:	7812      	ldrb	r2, [r2, #0]
 800a18c:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i=0; i<7 ;i++)
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	3301      	adds	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	2b06      	cmp	r3, #6
 800a198:	d9f1      	bls.n	800a17e <CDC_Control_FS+0xb2>
    	}

    break;
 800a19a:	e012      	b.n	800a1c2 <CDC_Control_FS+0xf6>

    case CDC_GET_LINE_CODING:

    	for(uint8_t i=0; i<7 ;i++)
 800a19c:	2300      	movs	r3, #0
 800a19e:	73bb      	strb	r3, [r7, #14]
 800a1a0:	e00a      	b.n	800a1b8 <CDC_Control_FS+0xec>
    	{
    		*(pbuf+i) = *(LineCoding+i);
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <CDC_Control_FS+0x104>)
 800a1a6:	441a      	add	r2, r3
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	440b      	add	r3, r1
 800a1ae:	7812      	ldrb	r2, [r2, #0]
 800a1b0:	701a      	strb	r2, [r3, #0]
    	for(uint8_t i=0; i<7 ;i++)
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	73bb      	strb	r3, [r7, #14]
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	2b06      	cmp	r3, #6
 800a1bc:	d9f1      	bls.n	800a1a2 <CDC_Control_FS+0xd6>
    	}

    break;
 800a1be:	e000      	b.n	800a1c2 <CDC_Control_FS+0xf6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1c0:	bf00      	nop
  }

  return (USBD_OK);
 800a1c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	2000116c 	.word	0x2000116c

0800a1d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4811      	ldr	r0, [pc, #68]	; (800a228 <CDC_Receive_FS+0x54>)
 800a1e2:	f7fe fe2e 	bl	8008e42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1e6:	4810      	ldr	r0, [pc, #64]	; (800a228 <CDC_Receive_FS+0x54>)
 800a1e8:	f7fe fe6d 	bl	8008ec6 <USBD_CDC_ReceivePacket>

  NewDataLineCount = *Len;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <CDC_Receive_FS+0x58>)
 800a1f4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<NewDataLineCount ; i++)
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e00a      	b.n	800a212 <CDC_Receive_FS+0x3e>
  {
	  *(RXBuffer+i) = *(Buf+i);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	441a      	add	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	490a      	ldr	r1, [pc, #40]	; (800a230 <CDC_Receive_FS+0x5c>)
 800a206:	440b      	add	r3, r1
 800a208:	7812      	ldrb	r2, [r2, #0]
 800a20a:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<NewDataLineCount ; i++)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <CDC_Receive_FS+0x58>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	dbee      	blt.n	800a1fc <CDC_Receive_FS+0x28>
  }

  return (USBD_OK);
 800a21e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000ac0 	.word	0x20000ac0
 800a22c:	2000038e 	.word	0x2000038e
 800a230:	20000a40 	.word	0x20000a40

0800a234 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <CDC_Transmit_FS+0x48>)
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a256:	2301      	movs	r3, #1
 800a258:	e00b      	b.n	800a272 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a25a:	887b      	ldrh	r3, [r7, #2]
 800a25c:	461a      	mov	r2, r3
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4806      	ldr	r0, [pc, #24]	; (800a27c <CDC_Transmit_FS+0x48>)
 800a262:	f7fe fdd5 	bl	8008e10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a266:	4805      	ldr	r0, [pc, #20]	; (800a27c <CDC_Transmit_FS+0x48>)
 800a268:	f7fe fdfe 	bl	8008e68 <USBD_CDC_TransmitPacket>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000ac0 	.word	0x20000ac0

0800a280 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	6039      	str	r1, [r7, #0]
 800a28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2212      	movs	r2, #18
 800a290:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a292:	4b03      	ldr	r3, [pc, #12]	; (800a2a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000168 	.word	0x20000168

0800a2a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	; (800a2c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	2000017c 	.word	0x2000017c

0800a2c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	; (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	; (800a300 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2e0:	f7ff fdcb 	bl	8009e7a <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	; (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	; (800a300 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2ec:	f7ff fdc5 	bl	8009e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	2000155c 	.word	0x2000155c
 800a300:	0800f174 	.word	0x0800f174

0800a304 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	4904      	ldr	r1, [pc, #16]	; (800a324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a314:	4804      	ldr	r0, [pc, #16]	; (800a328 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a316:	f7ff fdb0 	bl	8009e7a <USBD_GetString>
  return USBD_StrDesc;
 800a31a:	4b02      	ldr	r3, [pc, #8]	; (800a324 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	2000155c 	.word	0x2000155c
 800a328:	0800f18c 	.word	0x0800f18c

0800a32c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	221a      	movs	r2, #26
 800a33c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a33e:	f000 f843 	bl	800a3c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a342:	4b02      	ldr	r3, [pc, #8]	; (800a34c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000180 	.word	0x20000180

0800a350 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4907      	ldr	r1, [pc, #28]	; (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a366:	4808      	ldr	r0, [pc, #32]	; (800a388 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a368:	f7ff fd87 	bl	8009e7a <USBD_GetString>
 800a36c:	e004      	b.n	800a378 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4904      	ldr	r1, [pc, #16]	; (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a372:	4805      	ldr	r0, [pc, #20]	; (800a388 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a374:	f7ff fd81 	bl	8009e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	2000155c 	.word	0x2000155c
 800a388:	0800f1a0 	.word	0x0800f1a0

0800a38c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4907      	ldr	r1, [pc, #28]	; (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3a2:	4808      	ldr	r0, [pc, #32]	; (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a4:	f7ff fd69 	bl	8009e7a <USBD_GetString>
 800a3a8:	e004      	b.n	800a3b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4904      	ldr	r1, [pc, #16]	; (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3ae:	4805      	ldr	r0, [pc, #20]	; (800a3c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3b0:	f7ff fd63 	bl	8009e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	2000155c 	.word	0x2000155c
 800a3c4:	0800f1ac 	.word	0x0800f1ac

0800a3c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <Get_SerialNum+0x44>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <Get_SerialNum+0x48>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3da:	4b0e      	ldr	r3, [pc, #56]	; (800a414 <Get_SerialNum+0x4c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	4909      	ldr	r1, [pc, #36]	; (800a418 <Get_SerialNum+0x50>)
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f814 	bl	800a420 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	4908      	ldr	r1, [pc, #32]	; (800a41c <Get_SerialNum+0x54>)
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f000 f80f 	bl	800a420 <IntToUnicode>
  }
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	1ffff7e8 	.word	0x1ffff7e8
 800a410:	1ffff7ec 	.word	0x1ffff7ec
 800a414:	1ffff7f0 	.word	0x1ffff7f0
 800a418:	20000182 	.word	0x20000182
 800a41c:	20000192 	.word	0x20000192

0800a420 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
 800a436:	e027      	b.n	800a488 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0f1b      	lsrs	r3, r3, #28
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d80b      	bhi.n	800a458 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	0f1b      	lsrs	r3, r3, #28
 800a444:	b2da      	uxtb	r2, r3
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	440b      	add	r3, r1
 800a450:	3230      	adds	r2, #48	; 0x30
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e00a      	b.n	800a46e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	0f1b      	lsrs	r3, r3, #28
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	4619      	mov	r1, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	440b      	add	r3, r1
 800a468:	3237      	adds	r2, #55	; 0x37
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	3301      	adds	r3, #1
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	3301      	adds	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
 800a488:	7dfa      	ldrb	r2, [r7, #23]
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d3d3      	bcc.n	800a438 <IntToUnicode+0x18>
  }
}
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr
	...

0800a49c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <HAL_PCD_MspInit+0x44>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d113      	bne.n	800a4d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a4ae:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	4a0c      	ldr	r2, [pc, #48]	; (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4b8:	61d3      	str	r3, [r2, #28]
 800a4ba:	4b0a      	ldr	r3, [pc, #40]	; (800a4e4 <HAL_PCD_MspInit+0x48>)
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	2014      	movs	r0, #20
 800a4cc:	f7fa f877 	bl	80045be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a4d0:	2014      	movs	r0, #20
 800a4d2:	f7fa f890 	bl	80045f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40005c00 	.word	0x40005c00
 800a4e4:	40021000 	.word	0x40021000

0800a4e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fe fd97 	bl	8009032 <USBD_LL_SetupStage>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	015b      	lsls	r3, r3, #5
 800a524:	4413      	add	r3, r2
 800a526:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	4619      	mov	r1, r3
 800a530:	f7fe fdca 	bl	80090c8 <USBD_LL_DataOutStage>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800a54e:	78fb      	ldrb	r3, [r7, #3]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	015b      	lsls	r3, r3, #5
 800a554:	4413      	add	r3, r2
 800a556:	333c      	adds	r3, #60	; 0x3c
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	4619      	mov	r1, r3
 800a55e:	f7fe fe24 	bl	80091aa <USBD_LL_DataInStage>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe ff34 	bl	80093e6 <USBD_LL_SOF>
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d001      	beq.n	800a59e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a59a:	f7f9 fca9 	bl	8003ef0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a5a4:	7bfa      	ldrb	r2, [r7, #15]
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fee4 	bl	8009376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe fe9d 	bl	80092f4 <USBD_LL_Reset>
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fede 	bl	8009394 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e0:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	4a03      	ldr	r2, [pc, #12]	; (800a5f4 <HAL_PCD_SuspendCallback+0x30>)
 800a5e6:	f043 0306 	orr.w	r3, r3, #6
 800a5ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fed8 	bl	80093bc <USBD_LL_Resume>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a61c:	4a28      	ldr	r2, [pc, #160]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a26      	ldr	r2, [pc, #152]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a628:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a62c:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a62e:	4a25      	ldr	r2, [pc, #148]	; (800a6c4 <USBD_LL_Init+0xb0>)
 800a630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a632:	4b23      	ldr	r3, [pc, #140]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a634:	2208      	movs	r2, #8
 800a636:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a638:	4b21      	ldr	r3, [pc, #132]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a63a:	2202      	movs	r2, #2
 800a63c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a63e:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a640:	2200      	movs	r2, #0
 800a642:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a644:	4b1e      	ldr	r3, [pc, #120]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a646:	2200      	movs	r2, #0
 800a648:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a64a:	4b1d      	ldr	r3, [pc, #116]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a650:	481b      	ldr	r0, [pc, #108]	; (800a6c0 <USBD_LL_Init+0xac>)
 800a652:	f7fa fbd3 	bl	8004dfc <HAL_PCD_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a65c:	f7f9 fc48 	bl	8003ef0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a666:	2318      	movs	r3, #24
 800a668:	2200      	movs	r2, #0
 800a66a:	2100      	movs	r1, #0
 800a66c:	f7fb fa6c 	bl	8005b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a676:	2358      	movs	r3, #88	; 0x58
 800a678:	2200      	movs	r2, #0
 800a67a:	2180      	movs	r1, #128	; 0x80
 800a67c:	f7fb fa64 	bl	8005b48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a686:	23c0      	movs	r3, #192	; 0xc0
 800a688:	2200      	movs	r2, #0
 800a68a:	2181      	movs	r1, #129	; 0x81
 800a68c:	f7fb fa5c 	bl	8005b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a696:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a69a:	2200      	movs	r2, #0
 800a69c:	2101      	movs	r1, #1
 800a69e:	f7fb fa53 	bl	8005b48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2182      	movs	r1, #130	; 0x82
 800a6b0:	f7fb fa4a 	bl	8005b48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	2000175c 	.word	0x2000175c
 800a6c4:	40005c00 	.word	0x40005c00

0800a6c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fa fc6d 	bl	8004fbe <HAL_PCD_Start>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f948 	bl	800a980 <USBD_Get_USB_Status>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	70fb      	strb	r3, [r7, #3]
 800a710:	460b      	mov	r3, r1
 800a712:	70bb      	strb	r3, [r7, #2]
 800a714:	4613      	mov	r3, r2
 800a716:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a726:	78bb      	ldrb	r3, [r7, #2]
 800a728:	883a      	ldrh	r2, [r7, #0]
 800a72a:	78f9      	ldrb	r1, [r7, #3]
 800a72c:	f7fa fda0 	bl	8005270 <HAL_PCD_EP_Open>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f922 	bl	800a980 <USBD_Get_USB_Status>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a740:	7bbb      	ldrb	r3, [r7, #14]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fa fde1 	bl	8005330 <HAL_PCD_EP_Close>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f903 	bl	800a980 <USBD_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fa fe8b 	bl	80054c2 <HAL_PCD_EP_SetStall>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f8e4 	bl	800a980 <USBD_Get_USB_Status>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fa fec6 	bl	8005576 <HAL_PCD_EP_ClrStall>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 f8c5 	bl	800a980 <USBD_Get_USB_Status>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	da08      	bge.n	800a832 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	015b      	lsls	r3, r3, #5
 800a82a:	4413      	add	r3, r2
 800a82c:	332a      	adds	r3, #42	; 0x2a
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	e008      	b.n	800a844 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	015b      	lsls	r3, r3, #5
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a842:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	bc80      	pop	{r7}
 800a84c:	4770      	bx	lr

0800a84e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	4611      	mov	r1, r2
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fa fcda 	bl	8005226 <HAL_PCD_SetAddress>
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f881 	bl	800a980 <USBD_Get_USB_Status>
 800a87e:	4603      	mov	r3, r0
 800a880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a882:	7bbb      	ldrb	r3, [r7, #14]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	461a      	mov	r2, r3
 800a898:	460b      	mov	r3, r1
 800a89a:	72fb      	strb	r3, [r7, #11]
 800a89c:	4613      	mov	r3, r2
 800a89e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8ae:	893b      	ldrh	r3, [r7, #8]
 800a8b0:	7af9      	ldrb	r1, [r7, #11]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	f7fa fdcc 	bl	8005450 <HAL_PCD_EP_Transmit>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 f85e 	bl	800a980 <USBD_Get_USB_Status>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b086      	sub	sp, #24
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	460b      	mov	r3, r1
 800a8e0:	72fb      	strb	r3, [r7, #11]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8f4:	893b      	ldrh	r3, [r7, #8]
 800a8f6:	7af9      	ldrb	r1, [r7, #11]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	f7fa fd5b 	bl	80053b4 <HAL_PCD_EP_Receive>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	4618      	mov	r0, r3
 800a906:	f000 f83b 	bl	800a980 <USBD_Get_USB_Status>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a90e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fa fd7a 	bl	8005428 <HAL_PCD_EP_GetRxCount>
 800a934:	4603      	mov	r3, r0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a948:	4b02      	ldr	r3, [pc, #8]	; (800a954 <USBD_static_malloc+0x14>)
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	bc80      	pop	{r7}
 800a952:	4770      	bx	lr
 800a954:	2000039c 	.word	0x2000039c

0800a958 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]

}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	bc80      	pop	{r7}
 800a968:	4770      	bx	lr

0800a96a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a96a:	b480      	push	{r7}
 800a96c:	b083      	sub	sp, #12
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bc80      	pop	{r7}
 800a97e:	4770      	bx	lr

0800a980 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d817      	bhi.n	800a9c4 <USBD_Get_USB_Status+0x44>
 800a994:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <USBD_Get_USB_Status+0x1c>)
 800a996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99a:	bf00      	nop
 800a99c:	0800a9ad 	.word	0x0800a9ad
 800a9a0:	0800a9b3 	.word	0x0800a9b3
 800a9a4:	0800a9b9 	.word	0x0800a9b9
 800a9a8:	0800a9bf 	.word	0x0800a9bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b0:	e00b      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9b6:	e008      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a9bc:	e005      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c2:	e002      	b.n	800a9ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	bf00      	nop
  }
  return usb_status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop

0800a9d8 <atof>:
 800a9d8:	2100      	movs	r1, #0
 800a9da:	f001 bd05 	b.w	800c3e8 <strtod>

0800a9de <atoi>:
 800a9de:	220a      	movs	r2, #10
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	f001 bda1 	b.w	800c528 <strtol>
	...

0800a9e8 <__errno>:
 800a9e8:	4b01      	ldr	r3, [pc, #4]	; (800a9f0 <__errno+0x8>)
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	2000019c 	.word	0x2000019c

0800a9f4 <__libc_init_array>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	4e0c      	ldr	r6, [pc, #48]	; (800aa2c <__libc_init_array+0x38>)
 800a9fa:	4c0d      	ldr	r4, [pc, #52]	; (800aa30 <__libc_init_array+0x3c>)
 800a9fc:	1ba4      	subs	r4, r4, r6
 800a9fe:	10a4      	asrs	r4, r4, #2
 800aa00:	42a5      	cmp	r5, r4
 800aa02:	d109      	bne.n	800aa18 <__libc_init_array+0x24>
 800aa04:	f004 f9d4 	bl	800edb0 <_init>
 800aa08:	2500      	movs	r5, #0
 800aa0a:	4e0a      	ldr	r6, [pc, #40]	; (800aa34 <__libc_init_array+0x40>)
 800aa0c:	4c0a      	ldr	r4, [pc, #40]	; (800aa38 <__libc_init_array+0x44>)
 800aa0e:	1ba4      	subs	r4, r4, r6
 800aa10:	10a4      	asrs	r4, r4, #2
 800aa12:	42a5      	cmp	r5, r4
 800aa14:	d105      	bne.n	800aa22 <__libc_init_array+0x2e>
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa1c:	4798      	blx	r3
 800aa1e:	3501      	adds	r5, #1
 800aa20:	e7ee      	b.n	800aa00 <__libc_init_array+0xc>
 800aa22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa26:	4798      	blx	r3
 800aa28:	3501      	adds	r5, #1
 800aa2a:	e7f2      	b.n	800aa12 <__libc_init_array+0x1e>
 800aa2c:	0800f634 	.word	0x0800f634
 800aa30:	0800f634 	.word	0x0800f634
 800aa34:	0800f634 	.word	0x0800f634
 800aa38:	0800f638 	.word	0x0800f638

0800aa3c <memset>:
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	4402      	add	r2, r0
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d100      	bne.n	800aa46 <memset+0xa>
 800aa44:	4770      	bx	lr
 800aa46:	f803 1b01 	strb.w	r1, [r3], #1
 800aa4a:	e7f9      	b.n	800aa40 <memset+0x4>

0800aa4c <__cvt>:
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa52:	461e      	mov	r6, r3
 800aa54:	bfbb      	ittet	lt
 800aa56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aa5a:	461e      	movlt	r6, r3
 800aa5c:	2300      	movge	r3, #0
 800aa5e:	232d      	movlt	r3, #45	; 0x2d
 800aa60:	b088      	sub	sp, #32
 800aa62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa64:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800aa68:	f027 0720 	bic.w	r7, r7, #32
 800aa6c:	2f46      	cmp	r7, #70	; 0x46
 800aa6e:	4614      	mov	r4, r2
 800aa70:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aa72:	700b      	strb	r3, [r1, #0]
 800aa74:	d004      	beq.n	800aa80 <__cvt+0x34>
 800aa76:	2f45      	cmp	r7, #69	; 0x45
 800aa78:	d100      	bne.n	800aa7c <__cvt+0x30>
 800aa7a:	3501      	adds	r5, #1
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e000      	b.n	800aa82 <__cvt+0x36>
 800aa80:	2303      	movs	r3, #3
 800aa82:	aa07      	add	r2, sp, #28
 800aa84:	9204      	str	r2, [sp, #16]
 800aa86:	aa06      	add	r2, sp, #24
 800aa88:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aa8c:	e9cd 3500 	strd	r3, r5, [sp]
 800aa90:	4622      	mov	r2, r4
 800aa92:	4633      	mov	r3, r6
 800aa94:	f001 fdec 	bl	800c670 <_dtoa_r>
 800aa98:	2f47      	cmp	r7, #71	; 0x47
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	d102      	bne.n	800aaa4 <__cvt+0x58>
 800aa9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaa0:	07db      	lsls	r3, r3, #31
 800aaa2:	d526      	bpl.n	800aaf2 <__cvt+0xa6>
 800aaa4:	2f46      	cmp	r7, #70	; 0x46
 800aaa6:	eb08 0905 	add.w	r9, r8, r5
 800aaaa:	d111      	bne.n	800aad0 <__cvt+0x84>
 800aaac:	f898 3000 	ldrb.w	r3, [r8]
 800aab0:	2b30      	cmp	r3, #48	; 0x30
 800aab2:	d10a      	bne.n	800aaca <__cvt+0x7e>
 800aab4:	2200      	movs	r2, #0
 800aab6:	2300      	movs	r3, #0
 800aab8:	4620      	mov	r0, r4
 800aaba:	4631      	mov	r1, r6
 800aabc:	f7f5 ff74 	bl	80009a8 <__aeabi_dcmpeq>
 800aac0:	b918      	cbnz	r0, 800aaca <__cvt+0x7e>
 800aac2:	f1c5 0501 	rsb	r5, r5, #1
 800aac6:	f8ca 5000 	str.w	r5, [sl]
 800aaca:	f8da 3000 	ldr.w	r3, [sl]
 800aace:	4499      	add	r9, r3
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	4620      	mov	r0, r4
 800aad6:	4631      	mov	r1, r6
 800aad8:	f7f5 ff66 	bl	80009a8 <__aeabi_dcmpeq>
 800aadc:	b938      	cbnz	r0, 800aaee <__cvt+0xa2>
 800aade:	2230      	movs	r2, #48	; 0x30
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	454b      	cmp	r3, r9
 800aae4:	d205      	bcs.n	800aaf2 <__cvt+0xa6>
 800aae6:	1c59      	adds	r1, r3, #1
 800aae8:	9107      	str	r1, [sp, #28]
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e7f8      	b.n	800aae0 <__cvt+0x94>
 800aaee:	f8cd 901c 	str.w	r9, [sp, #28]
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaf8:	eba3 0308 	sub.w	r3, r3, r8
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	b008      	add	sp, #32
 800ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab04 <__exponent>:
 800ab04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab06:	2900      	cmp	r1, #0
 800ab08:	bfb4      	ite	lt
 800ab0a:	232d      	movlt	r3, #45	; 0x2d
 800ab0c:	232b      	movge	r3, #43	; 0x2b
 800ab0e:	4604      	mov	r4, r0
 800ab10:	bfb8      	it	lt
 800ab12:	4249      	neglt	r1, r1
 800ab14:	2909      	cmp	r1, #9
 800ab16:	f804 2b02 	strb.w	r2, [r4], #2
 800ab1a:	7043      	strb	r3, [r0, #1]
 800ab1c:	dd21      	ble.n	800ab62 <__exponent+0x5e>
 800ab1e:	f10d 0307 	add.w	r3, sp, #7
 800ab22:	461f      	mov	r7, r3
 800ab24:	260a      	movs	r6, #10
 800ab26:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab2a:	fb06 1115 	mls	r1, r6, r5, r1
 800ab2e:	2d09      	cmp	r5, #9
 800ab30:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800ab34:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab38:	f103 32ff 	add.w	r2, r3, #4294967295
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	dc09      	bgt.n	800ab54 <__exponent+0x50>
 800ab40:	3130      	adds	r1, #48	; 0x30
 800ab42:	3b02      	subs	r3, #2
 800ab44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab48:	42bb      	cmp	r3, r7
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	d304      	bcc.n	800ab58 <__exponent+0x54>
 800ab4e:	1a10      	subs	r0, r2, r0
 800ab50:	b003      	add	sp, #12
 800ab52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab54:	4613      	mov	r3, r2
 800ab56:	e7e6      	b.n	800ab26 <__exponent+0x22>
 800ab58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab5c:	f804 2b01 	strb.w	r2, [r4], #1
 800ab60:	e7f2      	b.n	800ab48 <__exponent+0x44>
 800ab62:	2330      	movs	r3, #48	; 0x30
 800ab64:	4419      	add	r1, r3
 800ab66:	7083      	strb	r3, [r0, #2]
 800ab68:	1d02      	adds	r2, r0, #4
 800ab6a:	70c1      	strb	r1, [r0, #3]
 800ab6c:	e7ef      	b.n	800ab4e <__exponent+0x4a>
	...

0800ab70 <_printf_float>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	b091      	sub	sp, #68	; 0x44
 800ab76:	460c      	mov	r4, r1
 800ab78:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ab7a:	4693      	mov	fp, r2
 800ab7c:	461e      	mov	r6, r3
 800ab7e:	4605      	mov	r5, r0
 800ab80:	f002 fe66 	bl	800d850 <_localeconv_r>
 800ab84:	6803      	ldr	r3, [r0, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8a:	f7f5 fae1 	bl	8000150 <strlen>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	930e      	str	r3, [sp, #56]	; 0x38
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	900a      	str	r0, [sp, #40]	; 0x28
 800ab96:	3307      	adds	r3, #7
 800ab98:	f023 0307 	bic.w	r3, r3, #7
 800ab9c:	f103 0208 	add.w	r2, r3, #8
 800aba0:	f894 8018 	ldrb.w	r8, [r4, #24]
 800aba4:	f8d4 a000 	ldr.w	sl, [r4]
 800aba8:	603a      	str	r2, [r7, #0]
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abb2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800abb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abba:	930b      	str	r3, [sp, #44]	; 0x2c
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	4ba6      	ldr	r3, [pc, #664]	; (800ae5c <_printf_float+0x2ec>)
 800abc2:	4638      	mov	r0, r7
 800abc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abc6:	f7f5 ff21 	bl	8000a0c <__aeabi_dcmpun>
 800abca:	bb68      	cbnz	r0, 800ac28 <_printf_float+0xb8>
 800abcc:	f04f 32ff 	mov.w	r2, #4294967295
 800abd0:	4ba2      	ldr	r3, [pc, #648]	; (800ae5c <_printf_float+0x2ec>)
 800abd2:	4638      	mov	r0, r7
 800abd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abd6:	f7f5 fefb 	bl	80009d0 <__aeabi_dcmple>
 800abda:	bb28      	cbnz	r0, 800ac28 <_printf_float+0xb8>
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	4638      	mov	r0, r7
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 feea 	bl	80009bc <__aeabi_dcmplt>
 800abe8:	b110      	cbz	r0, 800abf0 <_printf_float+0x80>
 800abea:	232d      	movs	r3, #45	; 0x2d
 800abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf0:	4f9b      	ldr	r7, [pc, #620]	; (800ae60 <_printf_float+0x2f0>)
 800abf2:	4b9c      	ldr	r3, [pc, #624]	; (800ae64 <_printf_float+0x2f4>)
 800abf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abf8:	bf98      	it	ls
 800abfa:	461f      	movls	r7, r3
 800abfc:	2303      	movs	r3, #3
 800abfe:	f04f 0900 	mov.w	r9, #0
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	f02a 0304 	bic.w	r3, sl, #4
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	9600      	str	r6, [sp, #0]
 800ac0c:	465b      	mov	r3, fp
 800ac0e:	aa0f      	add	r2, sp, #60	; 0x3c
 800ac10:	4621      	mov	r1, r4
 800ac12:	4628      	mov	r0, r5
 800ac14:	f000 f9e2 	bl	800afdc <_printf_common>
 800ac18:	3001      	adds	r0, #1
 800ac1a:	f040 8090 	bne.w	800ad3e <_printf_float+0x1ce>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	b011      	add	sp, #68	; 0x44
 800ac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac28:	463a      	mov	r2, r7
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	4649      	mov	r1, r9
 800ac30:	f7f5 feec 	bl	8000a0c <__aeabi_dcmpun>
 800ac34:	b110      	cbz	r0, 800ac3c <_printf_float+0xcc>
 800ac36:	4f8c      	ldr	r7, [pc, #560]	; (800ae68 <_printf_float+0x2f8>)
 800ac38:	4b8c      	ldr	r3, [pc, #560]	; (800ae6c <_printf_float+0x2fc>)
 800ac3a:	e7db      	b.n	800abf4 <_printf_float+0x84>
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800ac42:	1c59      	adds	r1, r3, #1
 800ac44:	a80d      	add	r0, sp, #52	; 0x34
 800ac46:	a90e      	add	r1, sp, #56	; 0x38
 800ac48:	d140      	bne.n	800accc <_printf_float+0x15c>
 800ac4a:	2306      	movs	r3, #6
 800ac4c:	6063      	str	r3, [r4, #4]
 800ac4e:	f04f 0c00 	mov.w	ip, #0
 800ac52:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800ac56:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ac5a:	6863      	ldr	r3, [r4, #4]
 800ac5c:	6022      	str	r2, [r4, #0]
 800ac5e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	463a      	mov	r2, r7
 800ac66:	464b      	mov	r3, r9
 800ac68:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7ff feed 	bl	800aa4c <__cvt>
 800ac72:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800ac76:	2b47      	cmp	r3, #71	; 0x47
 800ac78:	4607      	mov	r7, r0
 800ac7a:	d109      	bne.n	800ac90 <_printf_float+0x120>
 800ac7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7e:	1cd8      	adds	r0, r3, #3
 800ac80:	db02      	blt.n	800ac88 <_printf_float+0x118>
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	dd47      	ble.n	800ad18 <_printf_float+0x1a8>
 800ac88:	f1a8 0802 	sub.w	r8, r8, #2
 800ac8c:	fa5f f888 	uxtb.w	r8, r8
 800ac90:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ac94:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac96:	d824      	bhi.n	800ace2 <_printf_float+0x172>
 800ac98:	3901      	subs	r1, #1
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aca0:	910d      	str	r1, [sp, #52]	; 0x34
 800aca2:	f7ff ff2f 	bl	800ab04 <__exponent>
 800aca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aca8:	4681      	mov	r9, r0
 800acaa:	1813      	adds	r3, r2, r0
 800acac:	2a01      	cmp	r2, #1
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	dc02      	bgt.n	800acb8 <_printf_float+0x148>
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	07d1      	lsls	r1, r2, #31
 800acb6:	d501      	bpl.n	800acbc <_printf_float+0x14c>
 800acb8:	3301      	adds	r3, #1
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0a2      	beq.n	800ac0a <_printf_float+0x9a>
 800acc4:	232d      	movs	r3, #45	; 0x2d
 800acc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acca:	e79e      	b.n	800ac0a <_printf_float+0x9a>
 800accc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800acd0:	f000 816e 	beq.w	800afb0 <_printf_float+0x440>
 800acd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800acd8:	d1b9      	bne.n	800ac4e <_printf_float+0xde>
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1b7      	bne.n	800ac4e <_printf_float+0xde>
 800acde:	2301      	movs	r3, #1
 800ace0:	e7b4      	b.n	800ac4c <_printf_float+0xdc>
 800ace2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800ace6:	d119      	bne.n	800ad1c <_printf_float+0x1ac>
 800ace8:	2900      	cmp	r1, #0
 800acea:	6863      	ldr	r3, [r4, #4]
 800acec:	dd0c      	ble.n	800ad08 <_printf_float+0x198>
 800acee:	6121      	str	r1, [r4, #16]
 800acf0:	b913      	cbnz	r3, 800acf8 <_printf_float+0x188>
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	07d2      	lsls	r2, r2, #31
 800acf6:	d502      	bpl.n	800acfe <_printf_float+0x18e>
 800acf8:	3301      	adds	r3, #1
 800acfa:	440b      	add	r3, r1
 800acfc:	6123      	str	r3, [r4, #16]
 800acfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad00:	f04f 0900 	mov.w	r9, #0
 800ad04:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad06:	e7d9      	b.n	800acbc <_printf_float+0x14c>
 800ad08:	b913      	cbnz	r3, 800ad10 <_printf_float+0x1a0>
 800ad0a:	6822      	ldr	r2, [r4, #0]
 800ad0c:	07d0      	lsls	r0, r2, #31
 800ad0e:	d501      	bpl.n	800ad14 <_printf_float+0x1a4>
 800ad10:	3302      	adds	r3, #2
 800ad12:	e7f3      	b.n	800acfc <_printf_float+0x18c>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e7f1      	b.n	800acfc <_printf_float+0x18c>
 800ad18:	f04f 0867 	mov.w	r8, #103	; 0x67
 800ad1c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ad20:	4293      	cmp	r3, r2
 800ad22:	db05      	blt.n	800ad30 <_printf_float+0x1c0>
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	07d1      	lsls	r1, r2, #31
 800ad2a:	d5e8      	bpl.n	800acfe <_printf_float+0x18e>
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	e7e5      	b.n	800acfc <_printf_float+0x18c>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bfcc      	ite	gt
 800ad34:	2301      	movgt	r3, #1
 800ad36:	f1c3 0302 	rsble	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	e7de      	b.n	800acfc <_printf_float+0x18c>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	055a      	lsls	r2, r3, #21
 800ad42:	d407      	bmi.n	800ad54 <_printf_float+0x1e4>
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	463a      	mov	r2, r7
 800ad48:	4659      	mov	r1, fp
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b0      	blx	r6
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d129      	bne.n	800ada6 <_printf_float+0x236>
 800ad52:	e764      	b.n	800ac1e <_printf_float+0xae>
 800ad54:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ad58:	f240 80d7 	bls.w	800af0a <_printf_float+0x39a>
 800ad5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad60:	2200      	movs	r2, #0
 800ad62:	2300      	movs	r3, #0
 800ad64:	f7f5 fe20 	bl	80009a8 <__aeabi_dcmpeq>
 800ad68:	b388      	cbz	r0, 800adce <_printf_float+0x25e>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4a40      	ldr	r2, [pc, #256]	; (800ae70 <_printf_float+0x300>)
 800ad6e:	4659      	mov	r1, fp
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	3001      	adds	r0, #1
 800ad76:	f43f af52 	beq.w	800ac1e <_printf_float+0xae>
 800ad7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	db02      	blt.n	800ad88 <_printf_float+0x218>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	07d8      	lsls	r0, r3, #31
 800ad86:	d50e      	bpl.n	800ada6 <_printf_float+0x236>
 800ad88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b0      	blx	r6
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f af43 	beq.w	800ac1e <_printf_float+0xae>
 800ad98:	2700      	movs	r7, #0
 800ad9a:	f104 081a 	add.w	r8, r4, #26
 800ad9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ada0:	3b01      	subs	r3, #1
 800ada2:	42bb      	cmp	r3, r7
 800ada4:	dc09      	bgt.n	800adba <_printf_float+0x24a>
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	079f      	lsls	r7, r3, #30
 800adaa:	f100 80fd 	bmi.w	800afa8 <_printf_float+0x438>
 800adae:	68e0      	ldr	r0, [r4, #12]
 800adb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adb2:	4298      	cmp	r0, r3
 800adb4:	bfb8      	it	lt
 800adb6:	4618      	movlt	r0, r3
 800adb8:	e733      	b.n	800ac22 <_printf_float+0xb2>
 800adba:	2301      	movs	r3, #1
 800adbc:	4642      	mov	r2, r8
 800adbe:	4659      	mov	r1, fp
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b0      	blx	r6
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f af2a 	beq.w	800ac1e <_printf_float+0xae>
 800adca:	3701      	adds	r7, #1
 800adcc:	e7e7      	b.n	800ad9e <_printf_float+0x22e>
 800adce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add0:	2b00      	cmp	r3, #0
 800add2:	dc2b      	bgt.n	800ae2c <_printf_float+0x2bc>
 800add4:	2301      	movs	r3, #1
 800add6:	4a26      	ldr	r2, [pc, #152]	; (800ae70 <_printf_float+0x300>)
 800add8:	4659      	mov	r1, fp
 800adda:	4628      	mov	r0, r5
 800addc:	47b0      	blx	r6
 800adde:	3001      	adds	r0, #1
 800ade0:	f43f af1d 	beq.w	800ac1e <_printf_float+0xae>
 800ade4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade6:	b923      	cbnz	r3, 800adf2 <_printf_float+0x282>
 800ade8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adea:	b913      	cbnz	r3, 800adf2 <_printf_float+0x282>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	07d9      	lsls	r1, r3, #31
 800adf0:	d5d9      	bpl.n	800ada6 <_printf_float+0x236>
 800adf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adf6:	4659      	mov	r1, fp
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b0      	blx	r6
 800adfc:	3001      	adds	r0, #1
 800adfe:	f43f af0e 	beq.w	800ac1e <_printf_float+0xae>
 800ae02:	f04f 0800 	mov.w	r8, #0
 800ae06:	f104 091a 	add.w	r9, r4, #26
 800ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae0c:	425b      	negs	r3, r3
 800ae0e:	4543      	cmp	r3, r8
 800ae10:	dc01      	bgt.n	800ae16 <_printf_float+0x2a6>
 800ae12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae14:	e797      	b.n	800ad46 <_printf_float+0x1d6>
 800ae16:	2301      	movs	r3, #1
 800ae18:	464a      	mov	r2, r9
 800ae1a:	4659      	mov	r1, fp
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b0      	blx	r6
 800ae20:	3001      	adds	r0, #1
 800ae22:	f43f aefc 	beq.w	800ac1e <_printf_float+0xae>
 800ae26:	f108 0801 	add.w	r8, r8, #1
 800ae2a:	e7ee      	b.n	800ae0a <_printf_float+0x29a>
 800ae2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae30:	429a      	cmp	r2, r3
 800ae32:	bfa8      	it	ge
 800ae34:	461a      	movge	r2, r3
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	4690      	mov	r8, r2
 800ae3a:	dd07      	ble.n	800ae4c <_printf_float+0x2dc>
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	4659      	mov	r1, fp
 800ae40:	463a      	mov	r2, r7
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b0      	blx	r6
 800ae46:	3001      	adds	r0, #1
 800ae48:	f43f aee9 	beq.w	800ac1e <_printf_float+0xae>
 800ae4c:	f104 031a 	add.w	r3, r4, #26
 800ae50:	f04f 0a00 	mov.w	sl, #0
 800ae54:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800ae58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae5a:	e015      	b.n	800ae88 <_printf_float+0x318>
 800ae5c:	7fefffff 	.word	0x7fefffff
 800ae60:	0800f308 	.word	0x0800f308
 800ae64:	0800f304 	.word	0x0800f304
 800ae68:	0800f310 	.word	0x0800f310
 800ae6c:	0800f30c 	.word	0x0800f30c
 800ae70:	0800f4cb 	.word	0x0800f4cb
 800ae74:	2301      	movs	r3, #1
 800ae76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae78:	4659      	mov	r1, fp
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b0      	blx	r6
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f43f aecd 	beq.w	800ac1e <_printf_float+0xae>
 800ae84:	f10a 0a01 	add.w	sl, sl, #1
 800ae88:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ae8c:	eba9 0308 	sub.w	r3, r9, r8
 800ae90:	4553      	cmp	r3, sl
 800ae92:	dcef      	bgt.n	800ae74 <_printf_float+0x304>
 800ae94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	444f      	add	r7, r9
 800ae9c:	db14      	blt.n	800aec8 <_printf_float+0x358>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	07da      	lsls	r2, r3, #31
 800aea2:	d411      	bmi.n	800aec8 <_printf_float+0x358>
 800aea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aea6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aea8:	eba3 0209 	sub.w	r2, r3, r9
 800aeac:	eba3 0901 	sub.w	r9, r3, r1
 800aeb0:	4591      	cmp	r9, r2
 800aeb2:	bfa8      	it	ge
 800aeb4:	4691      	movge	r9, r2
 800aeb6:	f1b9 0f00 	cmp.w	r9, #0
 800aeba:	dc0d      	bgt.n	800aed8 <_printf_float+0x368>
 800aebc:	2700      	movs	r7, #0
 800aebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aec2:	f104 081a 	add.w	r8, r4, #26
 800aec6:	e018      	b.n	800aefa <_printf_float+0x38a>
 800aec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aecc:	4659      	mov	r1, fp
 800aece:	4628      	mov	r0, r5
 800aed0:	47b0      	blx	r6
 800aed2:	3001      	adds	r0, #1
 800aed4:	d1e6      	bne.n	800aea4 <_printf_float+0x334>
 800aed6:	e6a2      	b.n	800ac1e <_printf_float+0xae>
 800aed8:	464b      	mov	r3, r9
 800aeda:	463a      	mov	r2, r7
 800aedc:	4659      	mov	r1, fp
 800aede:	4628      	mov	r0, r5
 800aee0:	47b0      	blx	r6
 800aee2:	3001      	adds	r0, #1
 800aee4:	d1ea      	bne.n	800aebc <_printf_float+0x34c>
 800aee6:	e69a      	b.n	800ac1e <_printf_float+0xae>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4642      	mov	r2, r8
 800aeec:	4659      	mov	r1, fp
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b0      	blx	r6
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f ae93 	beq.w	800ac1e <_printf_float+0xae>
 800aef8:	3701      	adds	r7, #1
 800aefa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	eba3 0309 	sub.w	r3, r3, r9
 800af04:	42bb      	cmp	r3, r7
 800af06:	dcef      	bgt.n	800aee8 <_printf_float+0x378>
 800af08:	e74d      	b.n	800ada6 <_printf_float+0x236>
 800af0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af0c:	2a01      	cmp	r2, #1
 800af0e:	dc01      	bgt.n	800af14 <_printf_float+0x3a4>
 800af10:	07db      	lsls	r3, r3, #31
 800af12:	d538      	bpl.n	800af86 <_printf_float+0x416>
 800af14:	2301      	movs	r3, #1
 800af16:	463a      	mov	r2, r7
 800af18:	4659      	mov	r1, fp
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b0      	blx	r6
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f ae7d 	beq.w	800ac1e <_printf_float+0xae>
 800af24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af28:	4659      	mov	r1, fp
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b0      	blx	r6
 800af2e:	3001      	adds	r0, #1
 800af30:	f107 0701 	add.w	r7, r7, #1
 800af34:	f43f ae73 	beq.w	800ac1e <_printf_float+0xae>
 800af38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3e:	2200      	movs	r2, #0
 800af40:	f103 38ff 	add.w	r8, r3, #4294967295
 800af44:	2300      	movs	r3, #0
 800af46:	f7f5 fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 800af4a:	b9c0      	cbnz	r0, 800af7e <_printf_float+0x40e>
 800af4c:	4643      	mov	r3, r8
 800af4e:	463a      	mov	r2, r7
 800af50:	4659      	mov	r1, fp
 800af52:	4628      	mov	r0, r5
 800af54:	47b0      	blx	r6
 800af56:	3001      	adds	r0, #1
 800af58:	d10d      	bne.n	800af76 <_printf_float+0x406>
 800af5a:	e660      	b.n	800ac1e <_printf_float+0xae>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4642      	mov	r2, r8
 800af60:	4659      	mov	r1, fp
 800af62:	4628      	mov	r0, r5
 800af64:	47b0      	blx	r6
 800af66:	3001      	adds	r0, #1
 800af68:	f43f ae59 	beq.w	800ac1e <_printf_float+0xae>
 800af6c:	3701      	adds	r7, #1
 800af6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af70:	3b01      	subs	r3, #1
 800af72:	42bb      	cmp	r3, r7
 800af74:	dcf2      	bgt.n	800af5c <_printf_float+0x3ec>
 800af76:	464b      	mov	r3, r9
 800af78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af7c:	e6e4      	b.n	800ad48 <_printf_float+0x1d8>
 800af7e:	2700      	movs	r7, #0
 800af80:	f104 081a 	add.w	r8, r4, #26
 800af84:	e7f3      	b.n	800af6e <_printf_float+0x3fe>
 800af86:	2301      	movs	r3, #1
 800af88:	e7e1      	b.n	800af4e <_printf_float+0x3de>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4642      	mov	r2, r8
 800af8e:	4659      	mov	r1, fp
 800af90:	4628      	mov	r0, r5
 800af92:	47b0      	blx	r6
 800af94:	3001      	adds	r0, #1
 800af96:	f43f ae42 	beq.w	800ac1e <_printf_float+0xae>
 800af9a:	3701      	adds	r7, #1
 800af9c:	68e3      	ldr	r3, [r4, #12]
 800af9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	42bb      	cmp	r3, r7
 800afa4:	dcf1      	bgt.n	800af8a <_printf_float+0x41a>
 800afa6:	e702      	b.n	800adae <_printf_float+0x23e>
 800afa8:	2700      	movs	r7, #0
 800afaa:	f104 0819 	add.w	r8, r4, #25
 800afae:	e7f5      	b.n	800af9c <_printf_float+0x42c>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f43f ae94 	beq.w	800acde <_printf_float+0x16e>
 800afb6:	f04f 0c00 	mov.w	ip, #0
 800afba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800afbe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800afc2:	6022      	str	r2, [r4, #0]
 800afc4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800afc8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	463a      	mov	r2, r7
 800afd0:	464b      	mov	r3, r9
 800afd2:	4628      	mov	r0, r5
 800afd4:	f7ff fd3a 	bl	800aa4c <__cvt>
 800afd8:	4607      	mov	r7, r0
 800afda:	e64f      	b.n	800ac7c <_printf_float+0x10c>

0800afdc <_printf_common>:
 800afdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe0:	4691      	mov	r9, r2
 800afe2:	461f      	mov	r7, r3
 800afe4:	688a      	ldr	r2, [r1, #8]
 800afe6:	690b      	ldr	r3, [r1, #16]
 800afe8:	4606      	mov	r6, r0
 800afea:	4293      	cmp	r3, r2
 800afec:	bfb8      	it	lt
 800afee:	4613      	movlt	r3, r2
 800aff0:	f8c9 3000 	str.w	r3, [r9]
 800aff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aff8:	460c      	mov	r4, r1
 800affa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800affe:	b112      	cbz	r2, 800b006 <_printf_common+0x2a>
 800b000:	3301      	adds	r3, #1
 800b002:	f8c9 3000 	str.w	r3, [r9]
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	0699      	lsls	r1, r3, #26
 800b00a:	bf42      	ittt	mi
 800b00c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b010:	3302      	addmi	r3, #2
 800b012:	f8c9 3000 	strmi.w	r3, [r9]
 800b016:	6825      	ldr	r5, [r4, #0]
 800b018:	f015 0506 	ands.w	r5, r5, #6
 800b01c:	d107      	bne.n	800b02e <_printf_common+0x52>
 800b01e:	f104 0a19 	add.w	sl, r4, #25
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	f8d9 2000 	ldr.w	r2, [r9]
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	42ab      	cmp	r3, r5
 800b02c:	dc29      	bgt.n	800b082 <_printf_common+0xa6>
 800b02e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	3300      	adds	r3, #0
 800b036:	bf18      	it	ne
 800b038:	2301      	movne	r3, #1
 800b03a:	0692      	lsls	r2, r2, #26
 800b03c:	d42e      	bmi.n	800b09c <_printf_common+0xc0>
 800b03e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b042:	4639      	mov	r1, r7
 800b044:	4630      	mov	r0, r6
 800b046:	47c0      	blx	r8
 800b048:	3001      	adds	r0, #1
 800b04a:	d021      	beq.n	800b090 <_printf_common+0xb4>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	68e5      	ldr	r5, [r4, #12]
 800b050:	f003 0306 	and.w	r3, r3, #6
 800b054:	2b04      	cmp	r3, #4
 800b056:	bf18      	it	ne
 800b058:	2500      	movne	r5, #0
 800b05a:	f8d9 2000 	ldr.w	r2, [r9]
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	bf08      	it	eq
 800b064:	1aad      	subeq	r5, r5, r2
 800b066:	68a3      	ldr	r3, [r4, #8]
 800b068:	6922      	ldr	r2, [r4, #16]
 800b06a:	bf08      	it	eq
 800b06c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b070:	4293      	cmp	r3, r2
 800b072:	bfc4      	itt	gt
 800b074:	1a9b      	subgt	r3, r3, r2
 800b076:	18ed      	addgt	r5, r5, r3
 800b078:	341a      	adds	r4, #26
 800b07a:	454d      	cmp	r5, r9
 800b07c:	d11a      	bne.n	800b0b4 <_printf_common+0xd8>
 800b07e:	2000      	movs	r0, #0
 800b080:	e008      	b.n	800b094 <_printf_common+0xb8>
 800b082:	2301      	movs	r3, #1
 800b084:	4652      	mov	r2, sl
 800b086:	4639      	mov	r1, r7
 800b088:	4630      	mov	r0, r6
 800b08a:	47c0      	blx	r8
 800b08c:	3001      	adds	r0, #1
 800b08e:	d103      	bne.n	800b098 <_printf_common+0xbc>
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b098:	3501      	adds	r5, #1
 800b09a:	e7c2      	b.n	800b022 <_printf_common+0x46>
 800b09c:	2030      	movs	r0, #48	; 0x30
 800b09e:	18e1      	adds	r1, r4, r3
 800b0a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0aa:	4422      	add	r2, r4
 800b0ac:	3302      	adds	r3, #2
 800b0ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0b2:	e7c4      	b.n	800b03e <_printf_common+0x62>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	47c0      	blx	r8
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d0e6      	beq.n	800b090 <_printf_common+0xb4>
 800b0c2:	f109 0901 	add.w	r9, r9, #1
 800b0c6:	e7d8      	b.n	800b07a <_printf_common+0x9e>

0800b0c8 <_printf_i>:
 800b0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	7e09      	ldrb	r1, [r1, #24]
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	296e      	cmp	r1, #110	; 0x6e
 800b0d8:	4617      	mov	r7, r2
 800b0da:	4606      	mov	r6, r0
 800b0dc:	4698      	mov	r8, r3
 800b0de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e0:	f000 80b3 	beq.w	800b24a <_printf_i+0x182>
 800b0e4:	d822      	bhi.n	800b12c <_printf_i+0x64>
 800b0e6:	2963      	cmp	r1, #99	; 0x63
 800b0e8:	d036      	beq.n	800b158 <_printf_i+0x90>
 800b0ea:	d80a      	bhi.n	800b102 <_printf_i+0x3a>
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	f000 80b9 	beq.w	800b264 <_printf_i+0x19c>
 800b0f2:	2958      	cmp	r1, #88	; 0x58
 800b0f4:	f000 8083 	beq.w	800b1fe <_printf_i+0x136>
 800b0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b100:	e032      	b.n	800b168 <_printf_i+0xa0>
 800b102:	2964      	cmp	r1, #100	; 0x64
 800b104:	d001      	beq.n	800b10a <_printf_i+0x42>
 800b106:	2969      	cmp	r1, #105	; 0x69
 800b108:	d1f6      	bne.n	800b0f8 <_printf_i+0x30>
 800b10a:	6820      	ldr	r0, [r4, #0]
 800b10c:	6813      	ldr	r3, [r2, #0]
 800b10e:	0605      	lsls	r5, r0, #24
 800b110:	f103 0104 	add.w	r1, r3, #4
 800b114:	d52a      	bpl.n	800b16c <_printf_i+0xa4>
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6011      	str	r1, [r2, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da03      	bge.n	800b126 <_printf_i+0x5e>
 800b11e:	222d      	movs	r2, #45	; 0x2d
 800b120:	425b      	negs	r3, r3
 800b122:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b126:	486f      	ldr	r0, [pc, #444]	; (800b2e4 <_printf_i+0x21c>)
 800b128:	220a      	movs	r2, #10
 800b12a:	e039      	b.n	800b1a0 <_printf_i+0xd8>
 800b12c:	2973      	cmp	r1, #115	; 0x73
 800b12e:	f000 809d 	beq.w	800b26c <_printf_i+0x1a4>
 800b132:	d808      	bhi.n	800b146 <_printf_i+0x7e>
 800b134:	296f      	cmp	r1, #111	; 0x6f
 800b136:	d020      	beq.n	800b17a <_printf_i+0xb2>
 800b138:	2970      	cmp	r1, #112	; 0x70
 800b13a:	d1dd      	bne.n	800b0f8 <_printf_i+0x30>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	f043 0320 	orr.w	r3, r3, #32
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	e003      	b.n	800b14e <_printf_i+0x86>
 800b146:	2975      	cmp	r1, #117	; 0x75
 800b148:	d017      	beq.n	800b17a <_printf_i+0xb2>
 800b14a:	2978      	cmp	r1, #120	; 0x78
 800b14c:	d1d4      	bne.n	800b0f8 <_printf_i+0x30>
 800b14e:	2378      	movs	r3, #120	; 0x78
 800b150:	4865      	ldr	r0, [pc, #404]	; (800b2e8 <_printf_i+0x220>)
 800b152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b156:	e055      	b.n	800b204 <_printf_i+0x13c>
 800b158:	6813      	ldr	r3, [r2, #0]
 800b15a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b15e:	1d19      	adds	r1, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6011      	str	r1, [r2, #0]
 800b164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b168:	2301      	movs	r3, #1
 800b16a:	e08c      	b.n	800b286 <_printf_i+0x1be>
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b172:	6011      	str	r1, [r2, #0]
 800b174:	bf18      	it	ne
 800b176:	b21b      	sxthne	r3, r3
 800b178:	e7cf      	b.n	800b11a <_printf_i+0x52>
 800b17a:	6813      	ldr	r3, [r2, #0]
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	1d18      	adds	r0, r3, #4
 800b180:	6010      	str	r0, [r2, #0]
 800b182:	0628      	lsls	r0, r5, #24
 800b184:	d501      	bpl.n	800b18a <_printf_i+0xc2>
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	e002      	b.n	800b190 <_printf_i+0xc8>
 800b18a:	0668      	lsls	r0, r5, #25
 800b18c:	d5fb      	bpl.n	800b186 <_printf_i+0xbe>
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	296f      	cmp	r1, #111	; 0x6f
 800b192:	bf14      	ite	ne
 800b194:	220a      	movne	r2, #10
 800b196:	2208      	moveq	r2, #8
 800b198:	4852      	ldr	r0, [pc, #328]	; (800b2e4 <_printf_i+0x21c>)
 800b19a:	2100      	movs	r1, #0
 800b19c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1a0:	6865      	ldr	r5, [r4, #4]
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	60a5      	str	r5, [r4, #8]
 800b1a6:	f2c0 8095 	blt.w	800b2d4 <_printf_i+0x20c>
 800b1aa:	6821      	ldr	r1, [r4, #0]
 800b1ac:	f021 0104 	bic.w	r1, r1, #4
 800b1b0:	6021      	str	r1, [r4, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d13d      	bne.n	800b232 <_printf_i+0x16a>
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	f040 808e 	bne.w	800b2d8 <_printf_i+0x210>
 800b1bc:	4665      	mov	r5, ip
 800b1be:	2a08      	cmp	r2, #8
 800b1c0:	d10b      	bne.n	800b1da <_printf_i+0x112>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	07db      	lsls	r3, r3, #31
 800b1c6:	d508      	bpl.n	800b1da <_printf_i+0x112>
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	6862      	ldr	r2, [r4, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	bfde      	ittt	le
 800b1d0:	2330      	movle	r3, #48	; 0x30
 800b1d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1da:	ebac 0305 	sub.w	r3, ip, r5
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	f8cd 8000 	str.w	r8, [sp]
 800b1e4:	463b      	mov	r3, r7
 800b1e6:	aa03      	add	r2, sp, #12
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff fef6 	bl	800afdc <_printf_common>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d14d      	bne.n	800b290 <_printf_i+0x1c8>
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	b005      	add	sp, #20
 800b1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1fe:	4839      	ldr	r0, [pc, #228]	; (800b2e4 <_printf_i+0x21c>)
 800b200:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b204:	6813      	ldr	r3, [r2, #0]
 800b206:	6821      	ldr	r1, [r4, #0]
 800b208:	1d1d      	adds	r5, r3, #4
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6015      	str	r5, [r2, #0]
 800b20e:	060a      	lsls	r2, r1, #24
 800b210:	d50b      	bpl.n	800b22a <_printf_i+0x162>
 800b212:	07ca      	lsls	r2, r1, #31
 800b214:	bf44      	itt	mi
 800b216:	f041 0120 	orrmi.w	r1, r1, #32
 800b21a:	6021      	strmi	r1, [r4, #0]
 800b21c:	b91b      	cbnz	r3, 800b226 <_printf_i+0x15e>
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	f022 0220 	bic.w	r2, r2, #32
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	2210      	movs	r2, #16
 800b228:	e7b7      	b.n	800b19a <_printf_i+0xd2>
 800b22a:	064d      	lsls	r5, r1, #25
 800b22c:	bf48      	it	mi
 800b22e:	b29b      	uxthmi	r3, r3
 800b230:	e7ef      	b.n	800b212 <_printf_i+0x14a>
 800b232:	4665      	mov	r5, ip
 800b234:	fbb3 f1f2 	udiv	r1, r3, r2
 800b238:	fb02 3311 	mls	r3, r2, r1, r3
 800b23c:	5cc3      	ldrb	r3, [r0, r3]
 800b23e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b242:	460b      	mov	r3, r1
 800b244:	2900      	cmp	r1, #0
 800b246:	d1f5      	bne.n	800b234 <_printf_i+0x16c>
 800b248:	e7b9      	b.n	800b1be <_printf_i+0xf6>
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	6825      	ldr	r5, [r4, #0]
 800b24e:	1d18      	adds	r0, r3, #4
 800b250:	6961      	ldr	r1, [r4, #20]
 800b252:	6010      	str	r0, [r2, #0]
 800b254:	0628      	lsls	r0, r5, #24
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	d501      	bpl.n	800b25e <_printf_i+0x196>
 800b25a:	6019      	str	r1, [r3, #0]
 800b25c:	e002      	b.n	800b264 <_printf_i+0x19c>
 800b25e:	066a      	lsls	r2, r5, #25
 800b260:	d5fb      	bpl.n	800b25a <_printf_i+0x192>
 800b262:	8019      	strh	r1, [r3, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	4665      	mov	r5, ip
 800b268:	6123      	str	r3, [r4, #16]
 800b26a:	e7b9      	b.n	800b1e0 <_printf_i+0x118>
 800b26c:	6813      	ldr	r3, [r2, #0]
 800b26e:	1d19      	adds	r1, r3, #4
 800b270:	6011      	str	r1, [r2, #0]
 800b272:	681d      	ldr	r5, [r3, #0]
 800b274:	6862      	ldr	r2, [r4, #4]
 800b276:	2100      	movs	r1, #0
 800b278:	4628      	mov	r0, r5
 800b27a:	f002 fb11 	bl	800d8a0 <memchr>
 800b27e:	b108      	cbz	r0, 800b284 <_printf_i+0x1bc>
 800b280:	1b40      	subs	r0, r0, r5
 800b282:	6060      	str	r0, [r4, #4]
 800b284:	6863      	ldr	r3, [r4, #4]
 800b286:	6123      	str	r3, [r4, #16]
 800b288:	2300      	movs	r3, #0
 800b28a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b28e:	e7a7      	b.n	800b1e0 <_printf_i+0x118>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	462a      	mov	r2, r5
 800b294:	4639      	mov	r1, r7
 800b296:	4630      	mov	r0, r6
 800b298:	47c0      	blx	r8
 800b29a:	3001      	adds	r0, #1
 800b29c:	d0aa      	beq.n	800b1f4 <_printf_i+0x12c>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	079b      	lsls	r3, r3, #30
 800b2a2:	d413      	bmi.n	800b2cc <_printf_i+0x204>
 800b2a4:	68e0      	ldr	r0, [r4, #12]
 800b2a6:	9b03      	ldr	r3, [sp, #12]
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	bfb8      	it	lt
 800b2ac:	4618      	movlt	r0, r3
 800b2ae:	e7a3      	b.n	800b1f8 <_printf_i+0x130>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	464a      	mov	r2, r9
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	47c0      	blx	r8
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d09a      	beq.n	800b1f4 <_printf_i+0x12c>
 800b2be:	3501      	adds	r5, #1
 800b2c0:	68e3      	ldr	r3, [r4, #12]
 800b2c2:	9a03      	ldr	r2, [sp, #12]
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	42ab      	cmp	r3, r5
 800b2c8:	dcf2      	bgt.n	800b2b0 <_printf_i+0x1e8>
 800b2ca:	e7eb      	b.n	800b2a4 <_printf_i+0x1dc>
 800b2cc:	2500      	movs	r5, #0
 800b2ce:	f104 0919 	add.w	r9, r4, #25
 800b2d2:	e7f5      	b.n	800b2c0 <_printf_i+0x1f8>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1ac      	bne.n	800b232 <_printf_i+0x16a>
 800b2d8:	7803      	ldrb	r3, [r0, #0]
 800b2da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2e2:	e76c      	b.n	800b1be <_printf_i+0xf6>
 800b2e4:	0800f314 	.word	0x0800f314
 800b2e8:	0800f325 	.word	0x0800f325

0800b2ec <_scanf_float>:
 800b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	688b      	ldr	r3, [r1, #8]
 800b2f4:	4616      	mov	r6, r2
 800b2f6:	1e5a      	subs	r2, r3, #1
 800b2f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b2fc:	bf88      	it	hi
 800b2fe:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b302:	b087      	sub	sp, #28
 800b304:	bf85      	ittet	hi
 800b306:	189b      	addhi	r3, r3, r2
 800b308:	9301      	strhi	r3, [sp, #4]
 800b30a:	2300      	movls	r3, #0
 800b30c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b310:	4688      	mov	r8, r1
 800b312:	f04f 0b00 	mov.w	fp, #0
 800b316:	bf8c      	ite	hi
 800b318:	608b      	strhi	r3, [r1, #8]
 800b31a:	9301      	strls	r3, [sp, #4]
 800b31c:	680b      	ldr	r3, [r1, #0]
 800b31e:	4607      	mov	r7, r0
 800b320:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b324:	f848 3b1c 	str.w	r3, [r8], #28
 800b328:	460c      	mov	r4, r1
 800b32a:	4645      	mov	r5, r8
 800b32c:	465a      	mov	r2, fp
 800b32e:	46d9      	mov	r9, fp
 800b330:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b334:	f8cd b008 	str.w	fp, [sp, #8]
 800b338:	68a1      	ldr	r1, [r4, #8]
 800b33a:	b181      	cbz	r1, 800b35e <_scanf_float+0x72>
 800b33c:	6833      	ldr	r3, [r6, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b49      	cmp	r3, #73	; 0x49
 800b342:	d071      	beq.n	800b428 <_scanf_float+0x13c>
 800b344:	d84d      	bhi.n	800b3e2 <_scanf_float+0xf6>
 800b346:	2b39      	cmp	r3, #57	; 0x39
 800b348:	d840      	bhi.n	800b3cc <_scanf_float+0xe0>
 800b34a:	2b31      	cmp	r3, #49	; 0x31
 800b34c:	f080 8088 	bcs.w	800b460 <_scanf_float+0x174>
 800b350:	2b2d      	cmp	r3, #45	; 0x2d
 800b352:	f000 8090 	beq.w	800b476 <_scanf_float+0x18a>
 800b356:	d815      	bhi.n	800b384 <_scanf_float+0x98>
 800b358:	2b2b      	cmp	r3, #43	; 0x2b
 800b35a:	f000 808c 	beq.w	800b476 <_scanf_float+0x18a>
 800b35e:	f1b9 0f00 	cmp.w	r9, #0
 800b362:	d003      	beq.n	800b36c <_scanf_float+0x80>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	3a01      	subs	r2, #1
 800b36e:	2a01      	cmp	r2, #1
 800b370:	f200 80ea 	bhi.w	800b548 <_scanf_float+0x25c>
 800b374:	4545      	cmp	r5, r8
 800b376:	f200 80dc 	bhi.w	800b532 <_scanf_float+0x246>
 800b37a:	2601      	movs	r6, #1
 800b37c:	4630      	mov	r0, r6
 800b37e:	b007      	add	sp, #28
 800b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b384:	2b2e      	cmp	r3, #46	; 0x2e
 800b386:	f000 809f 	beq.w	800b4c8 <_scanf_float+0x1dc>
 800b38a:	2b30      	cmp	r3, #48	; 0x30
 800b38c:	d1e7      	bne.n	800b35e <_scanf_float+0x72>
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b394:	d064      	beq.n	800b460 <_scanf_float+0x174>
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b39c:	6020      	str	r0, [r4, #0]
 800b39e:	f109 0901 	add.w	r9, r9, #1
 800b3a2:	b11b      	cbz	r3, 800b3ac <_scanf_float+0xc0>
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	3101      	adds	r1, #1
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	60a1      	str	r1, [r4, #8]
 800b3ac:	68a3      	ldr	r3, [r4, #8]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	6123      	str	r3, [r4, #16]
 800b3b8:	6873      	ldr	r3, [r6, #4]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	6073      	str	r3, [r6, #4]
 800b3c0:	f340 80ac 	ble.w	800b51c <_scanf_float+0x230>
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	6033      	str	r3, [r6, #0]
 800b3ca:	e7b5      	b.n	800b338 <_scanf_float+0x4c>
 800b3cc:	2b45      	cmp	r3, #69	; 0x45
 800b3ce:	f000 8085 	beq.w	800b4dc <_scanf_float+0x1f0>
 800b3d2:	2b46      	cmp	r3, #70	; 0x46
 800b3d4:	d06a      	beq.n	800b4ac <_scanf_float+0x1c0>
 800b3d6:	2b41      	cmp	r3, #65	; 0x41
 800b3d8:	d1c1      	bne.n	800b35e <_scanf_float+0x72>
 800b3da:	2a01      	cmp	r2, #1
 800b3dc:	d1bf      	bne.n	800b35e <_scanf_float+0x72>
 800b3de:	2202      	movs	r2, #2
 800b3e0:	e046      	b.n	800b470 <_scanf_float+0x184>
 800b3e2:	2b65      	cmp	r3, #101	; 0x65
 800b3e4:	d07a      	beq.n	800b4dc <_scanf_float+0x1f0>
 800b3e6:	d818      	bhi.n	800b41a <_scanf_float+0x12e>
 800b3e8:	2b54      	cmp	r3, #84	; 0x54
 800b3ea:	d066      	beq.n	800b4ba <_scanf_float+0x1ce>
 800b3ec:	d811      	bhi.n	800b412 <_scanf_float+0x126>
 800b3ee:	2b4e      	cmp	r3, #78	; 0x4e
 800b3f0:	d1b5      	bne.n	800b35e <_scanf_float+0x72>
 800b3f2:	2a00      	cmp	r2, #0
 800b3f4:	d146      	bne.n	800b484 <_scanf_float+0x198>
 800b3f6:	f1b9 0f00 	cmp.w	r9, #0
 800b3fa:	d145      	bne.n	800b488 <_scanf_float+0x19c>
 800b3fc:	6821      	ldr	r1, [r4, #0]
 800b3fe:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b402:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b406:	d13f      	bne.n	800b488 <_scanf_float+0x19c>
 800b408:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b40c:	6021      	str	r1, [r4, #0]
 800b40e:	2201      	movs	r2, #1
 800b410:	e02e      	b.n	800b470 <_scanf_float+0x184>
 800b412:	2b59      	cmp	r3, #89	; 0x59
 800b414:	d01e      	beq.n	800b454 <_scanf_float+0x168>
 800b416:	2b61      	cmp	r3, #97	; 0x61
 800b418:	e7de      	b.n	800b3d8 <_scanf_float+0xec>
 800b41a:	2b6e      	cmp	r3, #110	; 0x6e
 800b41c:	d0e9      	beq.n	800b3f2 <_scanf_float+0x106>
 800b41e:	d815      	bhi.n	800b44c <_scanf_float+0x160>
 800b420:	2b66      	cmp	r3, #102	; 0x66
 800b422:	d043      	beq.n	800b4ac <_scanf_float+0x1c0>
 800b424:	2b69      	cmp	r3, #105	; 0x69
 800b426:	d19a      	bne.n	800b35e <_scanf_float+0x72>
 800b428:	f1bb 0f00 	cmp.w	fp, #0
 800b42c:	d138      	bne.n	800b4a0 <_scanf_float+0x1b4>
 800b42e:	f1b9 0f00 	cmp.w	r9, #0
 800b432:	d197      	bne.n	800b364 <_scanf_float+0x78>
 800b434:	6821      	ldr	r1, [r4, #0]
 800b436:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b43a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b43e:	d195      	bne.n	800b36c <_scanf_float+0x80>
 800b440:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b444:	6021      	str	r1, [r4, #0]
 800b446:	f04f 0b01 	mov.w	fp, #1
 800b44a:	e011      	b.n	800b470 <_scanf_float+0x184>
 800b44c:	2b74      	cmp	r3, #116	; 0x74
 800b44e:	d034      	beq.n	800b4ba <_scanf_float+0x1ce>
 800b450:	2b79      	cmp	r3, #121	; 0x79
 800b452:	d184      	bne.n	800b35e <_scanf_float+0x72>
 800b454:	f1bb 0f07 	cmp.w	fp, #7
 800b458:	d181      	bne.n	800b35e <_scanf_float+0x72>
 800b45a:	f04f 0b08 	mov.w	fp, #8
 800b45e:	e007      	b.n	800b470 <_scanf_float+0x184>
 800b460:	eb12 0f0b 	cmn.w	r2, fp
 800b464:	f47f af7b 	bne.w	800b35e <_scanf_float+0x72>
 800b468:	6821      	ldr	r1, [r4, #0]
 800b46a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b46e:	6021      	str	r1, [r4, #0]
 800b470:	702b      	strb	r3, [r5, #0]
 800b472:	3501      	adds	r5, #1
 800b474:	e79a      	b.n	800b3ac <_scanf_float+0xc0>
 800b476:	6821      	ldr	r1, [r4, #0]
 800b478:	0608      	lsls	r0, r1, #24
 800b47a:	f57f af70 	bpl.w	800b35e <_scanf_float+0x72>
 800b47e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b482:	e7f4      	b.n	800b46e <_scanf_float+0x182>
 800b484:	2a02      	cmp	r2, #2
 800b486:	d047      	beq.n	800b518 <_scanf_float+0x22c>
 800b488:	f1bb 0f01 	cmp.w	fp, #1
 800b48c:	d003      	beq.n	800b496 <_scanf_float+0x1aa>
 800b48e:	f1bb 0f04 	cmp.w	fp, #4
 800b492:	f47f af64 	bne.w	800b35e <_scanf_float+0x72>
 800b496:	f10b 0b01 	add.w	fp, fp, #1
 800b49a:	fa5f fb8b 	uxtb.w	fp, fp
 800b49e:	e7e7      	b.n	800b470 <_scanf_float+0x184>
 800b4a0:	f1bb 0f03 	cmp.w	fp, #3
 800b4a4:	d0f7      	beq.n	800b496 <_scanf_float+0x1aa>
 800b4a6:	f1bb 0f05 	cmp.w	fp, #5
 800b4aa:	e7f2      	b.n	800b492 <_scanf_float+0x1a6>
 800b4ac:	f1bb 0f02 	cmp.w	fp, #2
 800b4b0:	f47f af55 	bne.w	800b35e <_scanf_float+0x72>
 800b4b4:	f04f 0b03 	mov.w	fp, #3
 800b4b8:	e7da      	b.n	800b470 <_scanf_float+0x184>
 800b4ba:	f1bb 0f06 	cmp.w	fp, #6
 800b4be:	f47f af4e 	bne.w	800b35e <_scanf_float+0x72>
 800b4c2:	f04f 0b07 	mov.w	fp, #7
 800b4c6:	e7d3      	b.n	800b470 <_scanf_float+0x184>
 800b4c8:	6821      	ldr	r1, [r4, #0]
 800b4ca:	0588      	lsls	r0, r1, #22
 800b4cc:	f57f af47 	bpl.w	800b35e <_scanf_float+0x72>
 800b4d0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b4d4:	6021      	str	r1, [r4, #0]
 800b4d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4da:	e7c9      	b.n	800b470 <_scanf_float+0x184>
 800b4dc:	6821      	ldr	r1, [r4, #0]
 800b4de:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b4e2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b4e6:	d006      	beq.n	800b4f6 <_scanf_float+0x20a>
 800b4e8:	0548      	lsls	r0, r1, #21
 800b4ea:	f57f af38 	bpl.w	800b35e <_scanf_float+0x72>
 800b4ee:	f1b9 0f00 	cmp.w	r9, #0
 800b4f2:	f43f af3b 	beq.w	800b36c <_scanf_float+0x80>
 800b4f6:	0588      	lsls	r0, r1, #22
 800b4f8:	bf58      	it	pl
 800b4fa:	9802      	ldrpl	r0, [sp, #8]
 800b4fc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b500:	bf58      	it	pl
 800b502:	eba9 0000 	subpl.w	r0, r9, r0
 800b506:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b50a:	bf58      	it	pl
 800b50c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b510:	6021      	str	r1, [r4, #0]
 800b512:	f04f 0900 	mov.w	r9, #0
 800b516:	e7ab      	b.n	800b470 <_scanf_float+0x184>
 800b518:	2203      	movs	r2, #3
 800b51a:	e7a9      	b.n	800b470 <_scanf_float+0x184>
 800b51c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b520:	4631      	mov	r1, r6
 800b522:	4638      	mov	r0, r7
 800b524:	9205      	str	r2, [sp, #20]
 800b526:	4798      	blx	r3
 800b528:	9a05      	ldr	r2, [sp, #20]
 800b52a:	2800      	cmp	r0, #0
 800b52c:	f43f af04 	beq.w	800b338 <_scanf_float+0x4c>
 800b530:	e715      	b.n	800b35e <_scanf_float+0x72>
 800b532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b536:	4632      	mov	r2, r6
 800b538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b53c:	4638      	mov	r0, r7
 800b53e:	4798      	blx	r3
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	3b01      	subs	r3, #1
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	e715      	b.n	800b374 <_scanf_float+0x88>
 800b548:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b54c:	2b06      	cmp	r3, #6
 800b54e:	d80a      	bhi.n	800b566 <_scanf_float+0x27a>
 800b550:	f1bb 0f02 	cmp.w	fp, #2
 800b554:	d967      	bls.n	800b626 <_scanf_float+0x33a>
 800b556:	f1ab 0b03 	sub.w	fp, fp, #3
 800b55a:	fa5f fb8b 	uxtb.w	fp, fp
 800b55e:	eba5 0b0b 	sub.w	fp, r5, fp
 800b562:	455d      	cmp	r5, fp
 800b564:	d14a      	bne.n	800b5fc <_scanf_float+0x310>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	05da      	lsls	r2, r3, #23
 800b56a:	d51f      	bpl.n	800b5ac <_scanf_float+0x2c0>
 800b56c:	055b      	lsls	r3, r3, #21
 800b56e:	d467      	bmi.n	800b640 <_scanf_float+0x354>
 800b570:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	2965      	cmp	r1, #101	; 0x65
 800b578:	f103 33ff 	add.w	r3, r3, #4294967295
 800b57c:	f105 3bff 	add.w	fp, r5, #4294967295
 800b580:	6123      	str	r3, [r4, #16]
 800b582:	d00d      	beq.n	800b5a0 <_scanf_float+0x2b4>
 800b584:	2945      	cmp	r1, #69	; 0x45
 800b586:	d00b      	beq.n	800b5a0 <_scanf_float+0x2b4>
 800b588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b58c:	4632      	mov	r2, r6
 800b58e:	4638      	mov	r0, r7
 800b590:	4798      	blx	r3
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b598:	3b01      	subs	r3, #1
 800b59a:	f1a5 0b02 	sub.w	fp, r5, #2
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	4798      	blx	r3
 800b5aa:	465d      	mov	r5, fp
 800b5ac:	6826      	ldr	r6, [r4, #0]
 800b5ae:	f016 0610 	ands.w	r6, r6, #16
 800b5b2:	d176      	bne.n	800b6a2 <_scanf_float+0x3b6>
 800b5b4:	702e      	strb	r6, [r5, #0]
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5c0:	d141      	bne.n	800b646 <_scanf_float+0x35a>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	eba9 0303 	sub.w	r3, r9, r3
 800b5c8:	425a      	negs	r2, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d148      	bne.n	800b660 <_scanf_float+0x374>
 800b5ce:	4641      	mov	r1, r8
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f000 fef8 	bl	800c3c8 <_strtod_r>
 800b5d8:	6825      	ldr	r5, [r4, #0]
 800b5da:	4680      	mov	r8, r0
 800b5dc:	f015 0f02 	tst.w	r5, #2
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	f8da 3000 	ldr.w	r3, [sl]
 800b5e6:	d046      	beq.n	800b676 <_scanf_float+0x38a>
 800b5e8:	1d1a      	adds	r2, r3, #4
 800b5ea:	f8ca 2000 	str.w	r2, [sl]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	e9c3 8900 	strd	r8, r9, [r3]
 800b5f4:	68e3      	ldr	r3, [r4, #12]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	60e3      	str	r3, [r4, #12]
 800b5fa:	e6bf      	b.n	800b37c <_scanf_float+0x90>
 800b5fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b600:	4632      	mov	r2, r6
 800b602:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b606:	4638      	mov	r0, r7
 800b608:	4798      	blx	r3
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	e7a7      	b.n	800b562 <_scanf_float+0x276>
 800b612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b616:	4632      	mov	r2, r6
 800b618:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b61c:	4638      	mov	r0, r7
 800b61e:	4798      	blx	r3
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	3b01      	subs	r3, #1
 800b624:	6123      	str	r3, [r4, #16]
 800b626:	4545      	cmp	r5, r8
 800b628:	d8f3      	bhi.n	800b612 <_scanf_float+0x326>
 800b62a:	e6a6      	b.n	800b37a <_scanf_float+0x8e>
 800b62c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b630:	4632      	mov	r2, r6
 800b632:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b636:	4638      	mov	r0, r7
 800b638:	4798      	blx	r3
 800b63a:	6923      	ldr	r3, [r4, #16]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	4545      	cmp	r5, r8
 800b642:	d8f3      	bhi.n	800b62c <_scanf_float+0x340>
 800b644:	e699      	b.n	800b37a <_scanf_float+0x8e>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0c0      	beq.n	800b5ce <_scanf_float+0x2e2>
 800b64c:	9904      	ldr	r1, [sp, #16]
 800b64e:	230a      	movs	r3, #10
 800b650:	4632      	mov	r2, r6
 800b652:	3101      	adds	r1, #1
 800b654:	4638      	mov	r0, r7
 800b656:	f000 ff55 	bl	800c504 <_strtol_r>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	9d04      	ldr	r5, [sp, #16]
 800b65e:	1ac2      	subs	r2, r0, r3
 800b660:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b664:	429d      	cmp	r5, r3
 800b666:	bf28      	it	cs
 800b668:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b66c:	490e      	ldr	r1, [pc, #56]	; (800b6a8 <_scanf_float+0x3bc>)
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 f820 	bl	800b6b4 <siprintf>
 800b674:	e7ab      	b.n	800b5ce <_scanf_float+0x2e2>
 800b676:	1d1f      	adds	r7, r3, #4
 800b678:	f015 0504 	ands.w	r5, r5, #4
 800b67c:	f8ca 7000 	str.w	r7, [sl]
 800b680:	d1b5      	bne.n	800b5ee <_scanf_float+0x302>
 800b682:	681f      	ldr	r7, [r3, #0]
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	f7f5 f9c0 	bl	8000a0c <__aeabi_dcmpun>
 800b68c:	b120      	cbz	r0, 800b698 <_scanf_float+0x3ac>
 800b68e:	4628      	mov	r0, r5
 800b690:	f000 f80c 	bl	800b6ac <nanf>
 800b694:	6038      	str	r0, [r7, #0]
 800b696:	e7ad      	b.n	800b5f4 <_scanf_float+0x308>
 800b698:	4640      	mov	r0, r8
 800b69a:	4649      	mov	r1, r9
 800b69c:	f7f5 fa14 	bl	8000ac8 <__aeabi_d2f>
 800b6a0:	e7f8      	b.n	800b694 <_scanf_float+0x3a8>
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	e66a      	b.n	800b37c <_scanf_float+0x90>
 800b6a6:	bf00      	nop
 800b6a8:	0800f336 	.word	0x0800f336

0800b6ac <nanf>:
 800b6ac:	4800      	ldr	r0, [pc, #0]	; (800b6b0 <nanf+0x4>)
 800b6ae:	4770      	bx	lr
 800b6b0:	7fc00000 	.word	0x7fc00000

0800b6b4 <siprintf>:
 800b6b4:	b40e      	push	{r1, r2, r3}
 800b6b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6ba:	b500      	push	{lr}
 800b6bc:	b09c      	sub	sp, #112	; 0x70
 800b6be:	ab1d      	add	r3, sp, #116	; 0x74
 800b6c0:	9002      	str	r0, [sp, #8]
 800b6c2:	9006      	str	r0, [sp, #24]
 800b6c4:	9107      	str	r1, [sp, #28]
 800b6c6:	9104      	str	r1, [sp, #16]
 800b6c8:	4808      	ldr	r0, [pc, #32]	; (800b6ec <siprintf+0x38>)
 800b6ca:	4909      	ldr	r1, [pc, #36]	; (800b6f0 <siprintf+0x3c>)
 800b6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d0:	9105      	str	r1, [sp, #20]
 800b6d2:	6800      	ldr	r0, [r0, #0]
 800b6d4:	a902      	add	r1, sp, #8
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	f002 fe02 	bl	800e2e0 <_svfiprintf_r>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	b01c      	add	sp, #112	; 0x70
 800b6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e8:	b003      	add	sp, #12
 800b6ea:	4770      	bx	lr
 800b6ec:	2000019c 	.word	0x2000019c
 800b6f0:	ffff0208 	.word	0xffff0208

0800b6f4 <siscanf>:
 800b6f4:	b40e      	push	{r1, r2, r3}
 800b6f6:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b6fa:	b530      	push	{r4, r5, lr}
 800b6fc:	b09c      	sub	sp, #112	; 0x70
 800b6fe:	ac1f      	add	r4, sp, #124	; 0x7c
 800b700:	f854 5b04 	ldr.w	r5, [r4], #4
 800b704:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b708:	9002      	str	r0, [sp, #8]
 800b70a:	9006      	str	r0, [sp, #24]
 800b70c:	f7f4 fd20 	bl	8000150 <strlen>
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <siscanf+0x4c>)
 800b712:	9003      	str	r0, [sp, #12]
 800b714:	930b      	str	r3, [sp, #44]	; 0x2c
 800b716:	2300      	movs	r3, #0
 800b718:	930f      	str	r3, [sp, #60]	; 0x3c
 800b71a:	9314      	str	r3, [sp, #80]	; 0x50
 800b71c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b720:	9007      	str	r0, [sp, #28]
 800b722:	4808      	ldr	r0, [pc, #32]	; (800b744 <siscanf+0x50>)
 800b724:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b728:	462a      	mov	r2, r5
 800b72a:	4623      	mov	r3, r4
 800b72c:	a902      	add	r1, sp, #8
 800b72e:	6800      	ldr	r0, [r0, #0]
 800b730:	9401      	str	r4, [sp, #4]
 800b732:	f002 ff27 	bl	800e584 <__ssvfiscanf_r>
 800b736:	b01c      	add	sp, #112	; 0x70
 800b738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b73c:	b003      	add	sp, #12
 800b73e:	4770      	bx	lr
 800b740:	0800b749 	.word	0x0800b749
 800b744:	2000019c 	.word	0x2000019c

0800b748 <__seofread>:
 800b748:	2000      	movs	r0, #0
 800b74a:	4770      	bx	lr

0800b74c <strstr>:
 800b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74e:	7803      	ldrb	r3, [r0, #0]
 800b750:	b17b      	cbz	r3, 800b772 <strstr+0x26>
 800b752:	4604      	mov	r4, r0
 800b754:	7823      	ldrb	r3, [r4, #0]
 800b756:	4620      	mov	r0, r4
 800b758:	1c66      	adds	r6, r4, #1
 800b75a:	b17b      	cbz	r3, 800b77c <strstr+0x30>
 800b75c:	1e4a      	subs	r2, r1, #1
 800b75e:	1e63      	subs	r3, r4, #1
 800b760:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b764:	b14d      	cbz	r5, 800b77a <strstr+0x2e>
 800b766:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b76a:	4634      	mov	r4, r6
 800b76c:	42af      	cmp	r7, r5
 800b76e:	d0f7      	beq.n	800b760 <strstr+0x14>
 800b770:	e7f0      	b.n	800b754 <strstr+0x8>
 800b772:	780b      	ldrb	r3, [r1, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	bf18      	it	ne
 800b778:	2000      	movne	r0, #0
 800b77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77c:	4618      	mov	r0, r3
 800b77e:	e7fc      	b.n	800b77a <strstr+0x2e>

0800b780 <sulp>:
 800b780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b784:	460f      	mov	r7, r1
 800b786:	4690      	mov	r8, r2
 800b788:	f002 fb6e 	bl	800de68 <__ulp>
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	f1b8 0f00 	cmp.w	r8, #0
 800b794:	d011      	beq.n	800b7ba <sulp+0x3a>
 800b796:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b79a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	dd0b      	ble.n	800b7ba <sulp+0x3a>
 800b7a2:	2400      	movs	r4, #0
 800b7a4:	051b      	lsls	r3, r3, #20
 800b7a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b7aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	f7f4 fe91 	bl	80004d8 <__aeabi_dmul>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c2:	0000      	movs	r0, r0
 800b7c4:	0000      	movs	r0, r0
	...

0800b7c8 <_strtod_l>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	461f      	mov	r7, r3
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	b0a1      	sub	sp, #132	; 0x84
 800b7d2:	4683      	mov	fp, r0
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	460e      	mov	r6, r1
 800b7d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7da:	931c      	str	r3, [sp, #112]	; 0x70
 800b7dc:	f002 f836 	bl	800d84c <__localeconv_l>
 800b7e0:	4680      	mov	r8, r0
 800b7e2:	6800      	ldr	r0, [r0, #0]
 800b7e4:	f7f4 fcb4 	bl	8000150 <strlen>
 800b7e8:	f04f 0900 	mov.w	r9, #0
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	f04f 0a00 	mov.w	sl, #0
 800b7f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b7f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	2a0d      	cmp	r2, #13
 800b7fa:	d832      	bhi.n	800b862 <_strtod_l+0x9a>
 800b7fc:	2a09      	cmp	r2, #9
 800b7fe:	d236      	bcs.n	800b86e <_strtod_l+0xa6>
 800b800:	2a00      	cmp	r2, #0
 800b802:	d03e      	beq.n	800b882 <_strtod_l+0xba>
 800b804:	2300      	movs	r3, #0
 800b806:	930d      	str	r3, [sp, #52]	; 0x34
 800b808:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b80a:	782b      	ldrb	r3, [r5, #0]
 800b80c:	2b30      	cmp	r3, #48	; 0x30
 800b80e:	f040 80ac 	bne.w	800b96a <_strtod_l+0x1a2>
 800b812:	786b      	ldrb	r3, [r5, #1]
 800b814:	2b58      	cmp	r3, #88	; 0x58
 800b816:	d001      	beq.n	800b81c <_strtod_l+0x54>
 800b818:	2b78      	cmp	r3, #120	; 0x78
 800b81a:	d167      	bne.n	800b8ec <_strtod_l+0x124>
 800b81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81e:	9702      	str	r7, [sp, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	ab1c      	add	r3, sp, #112	; 0x70
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4a89      	ldr	r2, [pc, #548]	; (800ba4c <_strtod_l+0x284>)
 800b828:	ab1d      	add	r3, sp, #116	; 0x74
 800b82a:	a91b      	add	r1, sp, #108	; 0x6c
 800b82c:	4658      	mov	r0, fp
 800b82e:	f001 fd23 	bl	800d278 <__gethex>
 800b832:	f010 0407 	ands.w	r4, r0, #7
 800b836:	4606      	mov	r6, r0
 800b838:	d005      	beq.n	800b846 <_strtod_l+0x7e>
 800b83a:	2c06      	cmp	r4, #6
 800b83c:	d12b      	bne.n	800b896 <_strtod_l+0xce>
 800b83e:	2300      	movs	r3, #0
 800b840:	3501      	adds	r5, #1
 800b842:	951b      	str	r5, [sp, #108]	; 0x6c
 800b844:	930d      	str	r3, [sp, #52]	; 0x34
 800b846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f040 85a6 	bne.w	800c39a <_strtod_l+0xbd2>
 800b84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b850:	b1e3      	cbz	r3, 800b88c <_strtod_l+0xc4>
 800b852:	464a      	mov	r2, r9
 800b854:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b858:	4610      	mov	r0, r2
 800b85a:	4619      	mov	r1, r3
 800b85c:	b021      	add	sp, #132	; 0x84
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	2a2b      	cmp	r2, #43	; 0x2b
 800b864:	d015      	beq.n	800b892 <_strtod_l+0xca>
 800b866:	2a2d      	cmp	r2, #45	; 0x2d
 800b868:	d004      	beq.n	800b874 <_strtod_l+0xac>
 800b86a:	2a20      	cmp	r2, #32
 800b86c:	d1ca      	bne.n	800b804 <_strtod_l+0x3c>
 800b86e:	3301      	adds	r3, #1
 800b870:	931b      	str	r3, [sp, #108]	; 0x6c
 800b872:	e7bf      	b.n	800b7f4 <_strtod_l+0x2c>
 800b874:	2201      	movs	r2, #1
 800b876:	920d      	str	r2, [sp, #52]	; 0x34
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1c2      	bne.n	800b808 <_strtod_l+0x40>
 800b882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b884:	961b      	str	r6, [sp, #108]	; 0x6c
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 8585 	bne.w	800c396 <_strtod_l+0xbce>
 800b88c:	464a      	mov	r2, r9
 800b88e:	4653      	mov	r3, sl
 800b890:	e7e2      	b.n	800b858 <_strtod_l+0x90>
 800b892:	2200      	movs	r2, #0
 800b894:	e7ef      	b.n	800b876 <_strtod_l+0xae>
 800b896:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b898:	b13a      	cbz	r2, 800b8aa <_strtod_l+0xe2>
 800b89a:	2135      	movs	r1, #53	; 0x35
 800b89c:	a81e      	add	r0, sp, #120	; 0x78
 800b89e:	f002 fbd6 	bl	800e04e <__copybits>
 800b8a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8a4:	4658      	mov	r0, fp
 800b8a6:	f002 f848 	bl	800d93a <_Bfree>
 800b8aa:	3c01      	subs	r4, #1
 800b8ac:	2c04      	cmp	r4, #4
 800b8ae:	d806      	bhi.n	800b8be <_strtod_l+0xf6>
 800b8b0:	e8df f004 	tbb	[pc, r4]
 800b8b4:	1714030a 	.word	0x1714030a
 800b8b8:	0a          	.byte	0x0a
 800b8b9:	00          	.byte	0x00
 800b8ba:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800b8be:	0731      	lsls	r1, r6, #28
 800b8c0:	d5c1      	bpl.n	800b846 <_strtod_l+0x7e>
 800b8c2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800b8c6:	e7be      	b.n	800b846 <_strtod_l+0x7e>
 800b8c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b8ca:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800b8ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8d6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800b8da:	e7f0      	b.n	800b8be <_strtod_l+0xf6>
 800b8dc:	f8df a170 	ldr.w	sl, [pc, #368]	; 800ba50 <_strtod_l+0x288>
 800b8e0:	e7ed      	b.n	800b8be <_strtod_l+0xf6>
 800b8e2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800b8e6:	f04f 39ff 	mov.w	r9, #4294967295
 800b8ea:	e7e8      	b.n	800b8be <_strtod_l+0xf6>
 800b8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b8f2:	785b      	ldrb	r3, [r3, #1]
 800b8f4:	2b30      	cmp	r3, #48	; 0x30
 800b8f6:	d0f9      	beq.n	800b8ec <_strtod_l+0x124>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0a4      	beq.n	800b846 <_strtod_l+0x7e>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	2500      	movs	r5, #0
 800b900:	220a      	movs	r2, #10
 800b902:	9307      	str	r3, [sp, #28]
 800b904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b906:	9506      	str	r5, [sp, #24]
 800b908:	9308      	str	r3, [sp, #32]
 800b90a:	9504      	str	r5, [sp, #16]
 800b90c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b90e:	7807      	ldrb	r7, [r0, #0]
 800b910:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b914:	b2d9      	uxtb	r1, r3
 800b916:	2909      	cmp	r1, #9
 800b918:	d929      	bls.n	800b96e <_strtod_l+0x1a6>
 800b91a:	4622      	mov	r2, r4
 800b91c:	f8d8 1000 	ldr.w	r1, [r8]
 800b920:	f003 f919 	bl	800eb56 <strncmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	d031      	beq.n	800b98c <_strtod_l+0x1c4>
 800b928:	2000      	movs	r0, #0
 800b92a:	463b      	mov	r3, r7
 800b92c:	4602      	mov	r2, r0
 800b92e:	9c04      	ldr	r4, [sp, #16]
 800b930:	9005      	str	r0, [sp, #20]
 800b932:	2b65      	cmp	r3, #101	; 0x65
 800b934:	d001      	beq.n	800b93a <_strtod_l+0x172>
 800b936:	2b45      	cmp	r3, #69	; 0x45
 800b938:	d114      	bne.n	800b964 <_strtod_l+0x19c>
 800b93a:	b924      	cbnz	r4, 800b946 <_strtod_l+0x17e>
 800b93c:	b910      	cbnz	r0, 800b944 <_strtod_l+0x17c>
 800b93e:	9b07      	ldr	r3, [sp, #28]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d09e      	beq.n	800b882 <_strtod_l+0xba>
 800b944:	2400      	movs	r4, #0
 800b946:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b948:	1c73      	adds	r3, r6, #1
 800b94a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b94c:	7873      	ldrb	r3, [r6, #1]
 800b94e:	2b2b      	cmp	r3, #43	; 0x2b
 800b950:	d078      	beq.n	800ba44 <_strtod_l+0x27c>
 800b952:	2b2d      	cmp	r3, #45	; 0x2d
 800b954:	d070      	beq.n	800ba38 <_strtod_l+0x270>
 800b956:	f04f 0c00 	mov.w	ip, #0
 800b95a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b95e:	2f09      	cmp	r7, #9
 800b960:	d97c      	bls.n	800ba5c <_strtod_l+0x294>
 800b962:	961b      	str	r6, [sp, #108]	; 0x6c
 800b964:	f04f 0e00 	mov.w	lr, #0
 800b968:	e09a      	b.n	800baa0 <_strtod_l+0x2d8>
 800b96a:	2300      	movs	r3, #0
 800b96c:	e7c7      	b.n	800b8fe <_strtod_l+0x136>
 800b96e:	9904      	ldr	r1, [sp, #16]
 800b970:	3001      	adds	r0, #1
 800b972:	2908      	cmp	r1, #8
 800b974:	bfd7      	itett	le
 800b976:	9906      	ldrle	r1, [sp, #24]
 800b978:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b97c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b980:	9306      	strle	r3, [sp, #24]
 800b982:	9b04      	ldr	r3, [sp, #16]
 800b984:	901b      	str	r0, [sp, #108]	; 0x6c
 800b986:	3301      	adds	r3, #1
 800b988:	9304      	str	r3, [sp, #16]
 800b98a:	e7bf      	b.n	800b90c <_strtod_l+0x144>
 800b98c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b98e:	191a      	adds	r2, r3, r4
 800b990:	921b      	str	r2, [sp, #108]	; 0x6c
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	5d1b      	ldrb	r3, [r3, r4]
 800b996:	2a00      	cmp	r2, #0
 800b998:	d037      	beq.n	800ba0a <_strtod_l+0x242>
 800b99a:	4602      	mov	r2, r0
 800b99c:	9c04      	ldr	r4, [sp, #16]
 800b99e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b9a2:	2909      	cmp	r1, #9
 800b9a4:	d913      	bls.n	800b9ce <_strtod_l+0x206>
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	9105      	str	r1, [sp, #20]
 800b9aa:	e7c2      	b.n	800b932 <_strtod_l+0x16a>
 800b9ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b30      	cmp	r3, #48	; 0x30
 800b9b8:	d0f8      	beq.n	800b9ac <_strtod_l+0x1e4>
 800b9ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b9be:	2a08      	cmp	r2, #8
 800b9c0:	f200 84f0 	bhi.w	800c3a4 <_strtod_l+0xbdc>
 800b9c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9c6:	9208      	str	r2, [sp, #32]
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b9d2:	f100 0101 	add.w	r1, r0, #1
 800b9d6:	d012      	beq.n	800b9fe <_strtod_l+0x236>
 800b9d8:	440a      	add	r2, r1
 800b9da:	270a      	movs	r7, #10
 800b9dc:	4621      	mov	r1, r4
 800b9de:	eb00 0c04 	add.w	ip, r0, r4
 800b9e2:	458c      	cmp	ip, r1
 800b9e4:	d113      	bne.n	800ba0e <_strtod_l+0x246>
 800b9e6:	1821      	adds	r1, r4, r0
 800b9e8:	2908      	cmp	r1, #8
 800b9ea:	f104 0401 	add.w	r4, r4, #1
 800b9ee:	4404      	add	r4, r0
 800b9f0:	dc19      	bgt.n	800ba26 <_strtod_l+0x25e>
 800b9f2:	210a      	movs	r1, #10
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	fb01 e303 	mla	r3, r1, r3, lr
 800b9fa:	9306      	str	r3, [sp, #24]
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba00:	1c58      	adds	r0, r3, #1
 800ba02:	901b      	str	r0, [sp, #108]	; 0x6c
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	4608      	mov	r0, r1
 800ba08:	e7c9      	b.n	800b99e <_strtod_l+0x1d6>
 800ba0a:	9804      	ldr	r0, [sp, #16]
 800ba0c:	e7d3      	b.n	800b9b6 <_strtod_l+0x1ee>
 800ba0e:	2908      	cmp	r1, #8
 800ba10:	f101 0101 	add.w	r1, r1, #1
 800ba14:	dc03      	bgt.n	800ba1e <_strtod_l+0x256>
 800ba16:	9b06      	ldr	r3, [sp, #24]
 800ba18:	437b      	muls	r3, r7
 800ba1a:	9306      	str	r3, [sp, #24]
 800ba1c:	e7e1      	b.n	800b9e2 <_strtod_l+0x21a>
 800ba1e:	2910      	cmp	r1, #16
 800ba20:	bfd8      	it	le
 800ba22:	437d      	mulle	r5, r7
 800ba24:	e7dd      	b.n	800b9e2 <_strtod_l+0x21a>
 800ba26:	2c10      	cmp	r4, #16
 800ba28:	bfdc      	itt	le
 800ba2a:	210a      	movle	r1, #10
 800ba2c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ba30:	e7e4      	b.n	800b9fc <_strtod_l+0x234>
 800ba32:	2301      	movs	r3, #1
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	e781      	b.n	800b93c <_strtod_l+0x174>
 800ba38:	f04f 0c01 	mov.w	ip, #1
 800ba3c:	1cb3      	adds	r3, r6, #2
 800ba3e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba40:	78b3      	ldrb	r3, [r6, #2]
 800ba42:	e78a      	b.n	800b95a <_strtod_l+0x192>
 800ba44:	f04f 0c00 	mov.w	ip, #0
 800ba48:	e7f8      	b.n	800ba3c <_strtod_l+0x274>
 800ba4a:	bf00      	nop
 800ba4c:	0800f33c 	.word	0x0800f33c
 800ba50:	7ff00000 	.word	0x7ff00000
 800ba54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba56:	1c5f      	adds	r7, r3, #1
 800ba58:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	2b30      	cmp	r3, #48	; 0x30
 800ba5e:	d0f9      	beq.n	800ba54 <_strtod_l+0x28c>
 800ba60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ba64:	2f08      	cmp	r7, #8
 800ba66:	f63f af7d 	bhi.w	800b964 <_strtod_l+0x19c>
 800ba6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ba6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba70:	9309      	str	r3, [sp, #36]	; 0x24
 800ba72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba74:	1c5f      	adds	r7, r3, #1
 800ba76:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ba7e:	f1b8 0f09 	cmp.w	r8, #9
 800ba82:	d937      	bls.n	800baf4 <_strtod_l+0x32c>
 800ba84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba86:	1a7f      	subs	r7, r7, r1
 800ba88:	2f08      	cmp	r7, #8
 800ba8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba8e:	dc37      	bgt.n	800bb00 <_strtod_l+0x338>
 800ba90:	45be      	cmp	lr, r7
 800ba92:	bfa8      	it	ge
 800ba94:	46be      	movge	lr, r7
 800ba96:	f1bc 0f00 	cmp.w	ip, #0
 800ba9a:	d001      	beq.n	800baa0 <_strtod_l+0x2d8>
 800ba9c:	f1ce 0e00 	rsb	lr, lr, #0
 800baa0:	2c00      	cmp	r4, #0
 800baa2:	d151      	bne.n	800bb48 <_strtod_l+0x380>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f47f aece 	bne.w	800b846 <_strtod_l+0x7e>
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	2a00      	cmp	r2, #0
 800baae:	f47f aeca 	bne.w	800b846 <_strtod_l+0x7e>
 800bab2:	9a05      	ldr	r2, [sp, #20]
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	f47f aee4 	bne.w	800b882 <_strtod_l+0xba>
 800baba:	2b4e      	cmp	r3, #78	; 0x4e
 800babc:	d027      	beq.n	800bb0e <_strtod_l+0x346>
 800babe:	dc21      	bgt.n	800bb04 <_strtod_l+0x33c>
 800bac0:	2b49      	cmp	r3, #73	; 0x49
 800bac2:	f47f aede 	bne.w	800b882 <_strtod_l+0xba>
 800bac6:	49a4      	ldr	r1, [pc, #656]	; (800bd58 <_strtod_l+0x590>)
 800bac8:	a81b      	add	r0, sp, #108	; 0x6c
 800baca:	f001 fe09 	bl	800d6e0 <__match>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f43f aed7 	beq.w	800b882 <_strtod_l+0xba>
 800bad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bad6:	49a1      	ldr	r1, [pc, #644]	; (800bd5c <_strtod_l+0x594>)
 800bad8:	3b01      	subs	r3, #1
 800bada:	a81b      	add	r0, sp, #108	; 0x6c
 800badc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bade:	f001 fdff 	bl	800d6e0 <__match>
 800bae2:	b910      	cbnz	r0, 800baea <_strtod_l+0x322>
 800bae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bae6:	3301      	adds	r3, #1
 800bae8:	931b      	str	r3, [sp, #108]	; 0x6c
 800baea:	f8df a284 	ldr.w	sl, [pc, #644]	; 800bd70 <_strtod_l+0x5a8>
 800baee:	f04f 0900 	mov.w	r9, #0
 800baf2:	e6a8      	b.n	800b846 <_strtod_l+0x7e>
 800baf4:	210a      	movs	r1, #10
 800baf6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bafa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bafe:	e7b8      	b.n	800ba72 <_strtod_l+0x2aa>
 800bb00:	46be      	mov	lr, r7
 800bb02:	e7c8      	b.n	800ba96 <_strtod_l+0x2ce>
 800bb04:	2b69      	cmp	r3, #105	; 0x69
 800bb06:	d0de      	beq.n	800bac6 <_strtod_l+0x2fe>
 800bb08:	2b6e      	cmp	r3, #110	; 0x6e
 800bb0a:	f47f aeba 	bne.w	800b882 <_strtod_l+0xba>
 800bb0e:	4994      	ldr	r1, [pc, #592]	; (800bd60 <_strtod_l+0x598>)
 800bb10:	a81b      	add	r0, sp, #108	; 0x6c
 800bb12:	f001 fde5 	bl	800d6e0 <__match>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	f43f aeb3 	beq.w	800b882 <_strtod_l+0xba>
 800bb1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b28      	cmp	r3, #40	; 0x28
 800bb22:	d10e      	bne.n	800bb42 <_strtod_l+0x37a>
 800bb24:	aa1e      	add	r2, sp, #120	; 0x78
 800bb26:	498f      	ldr	r1, [pc, #572]	; (800bd64 <_strtod_l+0x59c>)
 800bb28:	a81b      	add	r0, sp, #108	; 0x6c
 800bb2a:	f001 fded 	bl	800d708 <__hexnan>
 800bb2e:	2805      	cmp	r0, #5
 800bb30:	d107      	bne.n	800bb42 <_strtod_l+0x37a>
 800bb32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb34:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800bb38:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800bb3c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800bb40:	e681      	b.n	800b846 <_strtod_l+0x7e>
 800bb42:	f8df a234 	ldr.w	sl, [pc, #564]	; 800bd78 <_strtod_l+0x5b0>
 800bb46:	e7d2      	b.n	800baee <_strtod_l+0x326>
 800bb48:	ebae 0302 	sub.w	r3, lr, r2
 800bb4c:	9307      	str	r3, [sp, #28]
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	9806      	ldr	r0, [sp, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bf08      	it	eq
 800bb56:	4623      	moveq	r3, r4
 800bb58:	2c10      	cmp	r4, #16
 800bb5a:	9304      	str	r3, [sp, #16]
 800bb5c:	46a0      	mov	r8, r4
 800bb5e:	bfa8      	it	ge
 800bb60:	f04f 0810 	movge.w	r8, #16
 800bb64:	f7f4 fc3e 	bl	80003e4 <__aeabi_ui2d>
 800bb68:	2c09      	cmp	r4, #9
 800bb6a:	4681      	mov	r9, r0
 800bb6c:	468a      	mov	sl, r1
 800bb6e:	dc13      	bgt.n	800bb98 <_strtod_l+0x3d0>
 800bb70:	9b07      	ldr	r3, [sp, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f43f ae67 	beq.w	800b846 <_strtod_l+0x7e>
 800bb78:	9b07      	ldr	r3, [sp, #28]
 800bb7a:	dd7e      	ble.n	800bc7a <_strtod_l+0x4b2>
 800bb7c:	2b16      	cmp	r3, #22
 800bb7e:	dc65      	bgt.n	800bc4c <_strtod_l+0x484>
 800bb80:	4a79      	ldr	r2, [pc, #484]	; (800bd68 <_strtod_l+0x5a0>)
 800bb82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bb86:	464a      	mov	r2, r9
 800bb88:	e9de 0100 	ldrd	r0, r1, [lr]
 800bb8c:	4653      	mov	r3, sl
 800bb8e:	f7f4 fca3 	bl	80004d8 <__aeabi_dmul>
 800bb92:	4681      	mov	r9, r0
 800bb94:	468a      	mov	sl, r1
 800bb96:	e656      	b.n	800b846 <_strtod_l+0x7e>
 800bb98:	4b73      	ldr	r3, [pc, #460]	; (800bd68 <_strtod_l+0x5a0>)
 800bb9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bba2:	f7f4 fc99 	bl	80004d8 <__aeabi_dmul>
 800bba6:	4606      	mov	r6, r0
 800bba8:	4628      	mov	r0, r5
 800bbaa:	460f      	mov	r7, r1
 800bbac:	f7f4 fc1a 	bl	80003e4 <__aeabi_ui2d>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	f7f4 fad8 	bl	800016c <__adddf3>
 800bbbc:	2c0f      	cmp	r4, #15
 800bbbe:	4681      	mov	r9, r0
 800bbc0:	468a      	mov	sl, r1
 800bbc2:	ddd5      	ble.n	800bb70 <_strtod_l+0x3a8>
 800bbc4:	9b07      	ldr	r3, [sp, #28]
 800bbc6:	eba4 0808 	sub.w	r8, r4, r8
 800bbca:	4498      	add	r8, r3
 800bbcc:	f1b8 0f00 	cmp.w	r8, #0
 800bbd0:	f340 809a 	ble.w	800bd08 <_strtod_l+0x540>
 800bbd4:	f018 030f 	ands.w	r3, r8, #15
 800bbd8:	d00a      	beq.n	800bbf0 <_strtod_l+0x428>
 800bbda:	4963      	ldr	r1, [pc, #396]	; (800bd68 <_strtod_l+0x5a0>)
 800bbdc:	464a      	mov	r2, r9
 800bbde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe6:	4653      	mov	r3, sl
 800bbe8:	f7f4 fc76 	bl	80004d8 <__aeabi_dmul>
 800bbec:	4681      	mov	r9, r0
 800bbee:	468a      	mov	sl, r1
 800bbf0:	f038 080f 	bics.w	r8, r8, #15
 800bbf4:	d077      	beq.n	800bce6 <_strtod_l+0x51e>
 800bbf6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bbfa:	dd4b      	ble.n	800bc94 <_strtod_l+0x4cc>
 800bbfc:	f04f 0800 	mov.w	r8, #0
 800bc00:	f8cd 8010 	str.w	r8, [sp, #16]
 800bc04:	f8cd 8020 	str.w	r8, [sp, #32]
 800bc08:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc0c:	2322      	movs	r3, #34	; 0x22
 800bc0e:	f04f 0900 	mov.w	r9, #0
 800bc12:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800bd70 <_strtod_l+0x5a8>
 800bc16:	f8cb 3000 	str.w	r3, [fp]
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f43f ae12 	beq.w	800b846 <_strtod_l+0x7e>
 800bc22:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc24:	4658      	mov	r0, fp
 800bc26:	f001 fe88 	bl	800d93a <_Bfree>
 800bc2a:	9906      	ldr	r1, [sp, #24]
 800bc2c:	4658      	mov	r0, fp
 800bc2e:	f001 fe84 	bl	800d93a <_Bfree>
 800bc32:	9904      	ldr	r1, [sp, #16]
 800bc34:	4658      	mov	r0, fp
 800bc36:	f001 fe80 	bl	800d93a <_Bfree>
 800bc3a:	9908      	ldr	r1, [sp, #32]
 800bc3c:	4658      	mov	r0, fp
 800bc3e:	f001 fe7c 	bl	800d93a <_Bfree>
 800bc42:	4641      	mov	r1, r8
 800bc44:	4658      	mov	r0, fp
 800bc46:	f001 fe78 	bl	800d93a <_Bfree>
 800bc4a:	e5fc      	b.n	800b846 <_strtod_l+0x7e>
 800bc4c:	9a07      	ldr	r2, [sp, #28]
 800bc4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bc52:	4293      	cmp	r3, r2
 800bc54:	dbb6      	blt.n	800bbc4 <_strtod_l+0x3fc>
 800bc56:	4d44      	ldr	r5, [pc, #272]	; (800bd68 <_strtod_l+0x5a0>)
 800bc58:	f1c4 040f 	rsb	r4, r4, #15
 800bc5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bc60:	464a      	mov	r2, r9
 800bc62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc66:	4653      	mov	r3, sl
 800bc68:	f7f4 fc36 	bl	80004d8 <__aeabi_dmul>
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	1b1c      	subs	r4, r3, r4
 800bc70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bc74:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc78:	e789      	b.n	800bb8e <_strtod_l+0x3c6>
 800bc7a:	f113 0f16 	cmn.w	r3, #22
 800bc7e:	dba1      	blt.n	800bbc4 <_strtod_l+0x3fc>
 800bc80:	4a39      	ldr	r2, [pc, #228]	; (800bd68 <_strtod_l+0x5a0>)
 800bc82:	4648      	mov	r0, r9
 800bc84:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bc88:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bc8c:	4651      	mov	r1, sl
 800bc8e:	f7f4 fd4d 	bl	800072c <__aeabi_ddiv>
 800bc92:	e77e      	b.n	800bb92 <_strtod_l+0x3ca>
 800bc94:	2300      	movs	r3, #0
 800bc96:	4648      	mov	r0, r9
 800bc98:	4651      	mov	r1, sl
 800bc9a:	461d      	mov	r5, r3
 800bc9c:	4e33      	ldr	r6, [pc, #204]	; (800bd6c <_strtod_l+0x5a4>)
 800bc9e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bca2:	f1b8 0f01 	cmp.w	r8, #1
 800bca6:	dc21      	bgt.n	800bcec <_strtod_l+0x524>
 800bca8:	b10b      	cbz	r3, 800bcae <_strtod_l+0x4e6>
 800bcaa:	4681      	mov	r9, r0
 800bcac:	468a      	mov	sl, r1
 800bcae:	4b2f      	ldr	r3, [pc, #188]	; (800bd6c <_strtod_l+0x5a4>)
 800bcb0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800bcb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bcb8:	464a      	mov	r2, r9
 800bcba:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bcbe:	4653      	mov	r3, sl
 800bcc0:	f7f4 fc0a 	bl	80004d8 <__aeabi_dmul>
 800bcc4:	4b2a      	ldr	r3, [pc, #168]	; (800bd70 <_strtod_l+0x5a8>)
 800bcc6:	460a      	mov	r2, r1
 800bcc8:	400b      	ands	r3, r1
 800bcca:	492a      	ldr	r1, [pc, #168]	; (800bd74 <_strtod_l+0x5ac>)
 800bccc:	4681      	mov	r9, r0
 800bcce:	428b      	cmp	r3, r1
 800bcd0:	d894      	bhi.n	800bbfc <_strtod_l+0x434>
 800bcd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcd6:	428b      	cmp	r3, r1
 800bcd8:	bf86      	itte	hi
 800bcda:	f04f 39ff 	movhi.w	r9, #4294967295
 800bcde:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800bd7c <_strtod_l+0x5b4>
 800bce2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800bce6:	2300      	movs	r3, #0
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	e07b      	b.n	800bde4 <_strtod_l+0x61c>
 800bcec:	f018 0f01 	tst.w	r8, #1
 800bcf0:	d006      	beq.n	800bd00 <_strtod_l+0x538>
 800bcf2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f7f4 fbed 	bl	80004d8 <__aeabi_dmul>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	3501      	adds	r5, #1
 800bd02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd06:	e7cc      	b.n	800bca2 <_strtod_l+0x4da>
 800bd08:	d0ed      	beq.n	800bce6 <_strtod_l+0x51e>
 800bd0a:	f1c8 0800 	rsb	r8, r8, #0
 800bd0e:	f018 020f 	ands.w	r2, r8, #15
 800bd12:	d00a      	beq.n	800bd2a <_strtod_l+0x562>
 800bd14:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <_strtod_l+0x5a0>)
 800bd16:	4648      	mov	r0, r9
 800bd18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd1c:	4651      	mov	r1, sl
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fd03 	bl	800072c <__aeabi_ddiv>
 800bd26:	4681      	mov	r9, r0
 800bd28:	468a      	mov	sl, r1
 800bd2a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd2e:	d0da      	beq.n	800bce6 <_strtod_l+0x51e>
 800bd30:	f1b8 0f1f 	cmp.w	r8, #31
 800bd34:	dd24      	ble.n	800bd80 <_strtod_l+0x5b8>
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd3e:	f8cd 8020 	str.w	r8, [sp, #32]
 800bd42:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd46:	2322      	movs	r3, #34	; 0x22
 800bd48:	f04f 0900 	mov.w	r9, #0
 800bd4c:	f04f 0a00 	mov.w	sl, #0
 800bd50:	f8cb 3000 	str.w	r3, [fp]
 800bd54:	e761      	b.n	800bc1a <_strtod_l+0x452>
 800bd56:	bf00      	nop
 800bd58:	0800f309 	.word	0x0800f309
 800bd5c:	0800f393 	.word	0x0800f393
 800bd60:	0800f311 	.word	0x0800f311
 800bd64:	0800f350 	.word	0x0800f350
 800bd68:	0800f3d0 	.word	0x0800f3d0
 800bd6c:	0800f3a8 	.word	0x0800f3a8
 800bd70:	7ff00000 	.word	0x7ff00000
 800bd74:	7ca00000 	.word	0x7ca00000
 800bd78:	fff80000 	.word	0xfff80000
 800bd7c:	7fefffff 	.word	0x7fefffff
 800bd80:	f018 0310 	ands.w	r3, r8, #16
 800bd84:	bf18      	it	ne
 800bd86:	236a      	movne	r3, #106	; 0x6a
 800bd88:	4648      	mov	r0, r9
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	4651      	mov	r1, sl
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4da1      	ldr	r5, [pc, #644]	; (800c018 <_strtod_l+0x850>)
 800bd92:	f1b8 0f00 	cmp.w	r8, #0
 800bd96:	f300 8113 	bgt.w	800bfc0 <_strtod_l+0x7f8>
 800bd9a:	b10b      	cbz	r3, 800bda0 <_strtod_l+0x5d8>
 800bd9c:	4681      	mov	r9, r0
 800bd9e:	468a      	mov	sl, r1
 800bda0:	9b05      	ldr	r3, [sp, #20]
 800bda2:	b1bb      	cbz	r3, 800bdd4 <_strtod_l+0x60c>
 800bda4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800bda8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	4651      	mov	r1, sl
 800bdb0:	dd10      	ble.n	800bdd4 <_strtod_l+0x60c>
 800bdb2:	2b1f      	cmp	r3, #31
 800bdb4:	f340 8110 	ble.w	800bfd8 <_strtod_l+0x810>
 800bdb8:	2b34      	cmp	r3, #52	; 0x34
 800bdba:	bfd8      	it	le
 800bdbc:	f04f 32ff 	movle.w	r2, #4294967295
 800bdc0:	f04f 0900 	mov.w	r9, #0
 800bdc4:	bfcf      	iteee	gt
 800bdc6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800bdca:	3b20      	suble	r3, #32
 800bdcc:	fa02 f303 	lslle.w	r3, r2, r3
 800bdd0:	ea03 0a01 	andle.w	sl, r3, r1
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4648      	mov	r0, r9
 800bdda:	4651      	mov	r1, sl
 800bddc:	f7f4 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d1a8      	bne.n	800bd36 <_strtod_l+0x56e>
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	9a04      	ldr	r2, [sp, #16]
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	9908      	ldr	r1, [sp, #32]
 800bdec:	4623      	mov	r3, r4
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f001 fdf5 	bl	800d9de <__s2b>
 800bdf4:	9008      	str	r0, [sp, #32]
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f af00 	beq.w	800bbfc <_strtod_l+0x434>
 800bdfc:	9a07      	ldr	r2, [sp, #28]
 800bdfe:	9b07      	ldr	r3, [sp, #28]
 800be00:	2a00      	cmp	r2, #0
 800be02:	f1c3 0300 	rsb	r3, r3, #0
 800be06:	bfa8      	it	ge
 800be08:	2300      	movge	r3, #0
 800be0a:	f04f 0800 	mov.w	r8, #0
 800be0e:	930e      	str	r3, [sp, #56]	; 0x38
 800be10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be14:	9316      	str	r3, [sp, #88]	; 0x58
 800be16:	f8cd 8010 	str.w	r8, [sp, #16]
 800be1a:	9b08      	ldr	r3, [sp, #32]
 800be1c:	4658      	mov	r0, fp
 800be1e:	6859      	ldr	r1, [r3, #4]
 800be20:	f001 fd57 	bl	800d8d2 <_Balloc>
 800be24:	9006      	str	r0, [sp, #24]
 800be26:	2800      	cmp	r0, #0
 800be28:	f43f aef0 	beq.w	800bc0c <_strtod_l+0x444>
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	300c      	adds	r0, #12
 800be30:	691a      	ldr	r2, [r3, #16]
 800be32:	f103 010c 	add.w	r1, r3, #12
 800be36:	3202      	adds	r2, #2
 800be38:	0092      	lsls	r2, r2, #2
 800be3a:	f001 fd3f 	bl	800d8bc <memcpy>
 800be3e:	ab1e      	add	r3, sp, #120	; 0x78
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	ab1d      	add	r3, sp, #116	; 0x74
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	464a      	mov	r2, r9
 800be48:	4653      	mov	r3, sl
 800be4a:	4658      	mov	r0, fp
 800be4c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800be50:	f002 f880 	bl	800df54 <__d2b>
 800be54:	901c      	str	r0, [sp, #112]	; 0x70
 800be56:	2800      	cmp	r0, #0
 800be58:	f43f aed8 	beq.w	800bc0c <_strtod_l+0x444>
 800be5c:	2101      	movs	r1, #1
 800be5e:	4658      	mov	r0, fp
 800be60:	f001 fe49 	bl	800daf6 <__i2b>
 800be64:	9004      	str	r0, [sp, #16]
 800be66:	4603      	mov	r3, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	f43f aecf 	beq.w	800bc0c <_strtod_l+0x444>
 800be6e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800be70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be72:	2d00      	cmp	r5, #0
 800be74:	bfab      	itete	ge
 800be76:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800be78:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800be7a:	18ee      	addge	r6, r5, r3
 800be7c:	1b5c      	sublt	r4, r3, r5
 800be7e:	9b05      	ldr	r3, [sp, #20]
 800be80:	bfa8      	it	ge
 800be82:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800be84:	eba5 0503 	sub.w	r5, r5, r3
 800be88:	4415      	add	r5, r2
 800be8a:	4b64      	ldr	r3, [pc, #400]	; (800c01c <_strtod_l+0x854>)
 800be8c:	f105 35ff 	add.w	r5, r5, #4294967295
 800be90:	bfb8      	it	lt
 800be92:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800be94:	429d      	cmp	r5, r3
 800be96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be9a:	f280 80af 	bge.w	800bffc <_strtod_l+0x834>
 800be9e:	1b5b      	subs	r3, r3, r5
 800bea0:	2b1f      	cmp	r3, #31
 800bea2:	eba2 0203 	sub.w	r2, r2, r3
 800bea6:	f04f 0701 	mov.w	r7, #1
 800beaa:	f300 809c 	bgt.w	800bfe6 <_strtod_l+0x81e>
 800beae:	2500      	movs	r5, #0
 800beb0:	fa07 f303 	lsl.w	r3, r7, r3
 800beb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb6:	18b7      	adds	r7, r6, r2
 800beb8:	9b05      	ldr	r3, [sp, #20]
 800beba:	42be      	cmp	r6, r7
 800bebc:	4414      	add	r4, r2
 800bebe:	441c      	add	r4, r3
 800bec0:	4633      	mov	r3, r6
 800bec2:	bfa8      	it	ge
 800bec4:	463b      	movge	r3, r7
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	bfa8      	it	ge
 800beca:	4623      	movge	r3, r4
 800becc:	2b00      	cmp	r3, #0
 800bece:	bfc2      	ittt	gt
 800bed0:	1aff      	subgt	r7, r7, r3
 800bed2:	1ae4      	subgt	r4, r4, r3
 800bed4:	1af6      	subgt	r6, r6, r3
 800bed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed8:	b1bb      	cbz	r3, 800bf0a <_strtod_l+0x742>
 800beda:	461a      	mov	r2, r3
 800bedc:	9904      	ldr	r1, [sp, #16]
 800bede:	4658      	mov	r0, fp
 800bee0:	f001 fea8 	bl	800dc34 <__pow5mult>
 800bee4:	9004      	str	r0, [sp, #16]
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f ae90 	beq.w	800bc0c <_strtod_l+0x444>
 800beec:	4601      	mov	r1, r0
 800beee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bef0:	4658      	mov	r0, fp
 800bef2:	f001 fe09 	bl	800db08 <__multiply>
 800bef6:	9009      	str	r0, [sp, #36]	; 0x24
 800bef8:	2800      	cmp	r0, #0
 800befa:	f43f ae87 	beq.w	800bc0c <_strtod_l+0x444>
 800befe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf00:	4658      	mov	r0, fp
 800bf02:	f001 fd1a 	bl	800d93a <_Bfree>
 800bf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf08:	931c      	str	r3, [sp, #112]	; 0x70
 800bf0a:	2f00      	cmp	r7, #0
 800bf0c:	dc7a      	bgt.n	800c004 <_strtod_l+0x83c>
 800bf0e:	9b07      	ldr	r3, [sp, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dd08      	ble.n	800bf26 <_strtod_l+0x75e>
 800bf14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf16:	9906      	ldr	r1, [sp, #24]
 800bf18:	4658      	mov	r0, fp
 800bf1a:	f001 fe8b 	bl	800dc34 <__pow5mult>
 800bf1e:	9006      	str	r0, [sp, #24]
 800bf20:	2800      	cmp	r0, #0
 800bf22:	f43f ae73 	beq.w	800bc0c <_strtod_l+0x444>
 800bf26:	2c00      	cmp	r4, #0
 800bf28:	dd08      	ble.n	800bf3c <_strtod_l+0x774>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	9906      	ldr	r1, [sp, #24]
 800bf2e:	4658      	mov	r0, fp
 800bf30:	f001 fece 	bl	800dcd0 <__lshift>
 800bf34:	9006      	str	r0, [sp, #24]
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f43f ae68 	beq.w	800bc0c <_strtod_l+0x444>
 800bf3c:	2e00      	cmp	r6, #0
 800bf3e:	dd08      	ble.n	800bf52 <_strtod_l+0x78a>
 800bf40:	4632      	mov	r2, r6
 800bf42:	9904      	ldr	r1, [sp, #16]
 800bf44:	4658      	mov	r0, fp
 800bf46:	f001 fec3 	bl	800dcd0 <__lshift>
 800bf4a:	9004      	str	r0, [sp, #16]
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f43f ae5d 	beq.w	800bc0c <_strtod_l+0x444>
 800bf52:	9a06      	ldr	r2, [sp, #24]
 800bf54:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf56:	4658      	mov	r0, fp
 800bf58:	f001 ff28 	bl	800ddac <__mdiff>
 800bf5c:	4680      	mov	r8, r0
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f43f ae54 	beq.w	800bc0c <_strtod_l+0x444>
 800bf64:	2400      	movs	r4, #0
 800bf66:	68c3      	ldr	r3, [r0, #12]
 800bf68:	9904      	ldr	r1, [sp, #16]
 800bf6a:	60c4      	str	r4, [r0, #12]
 800bf6c:	930c      	str	r3, [sp, #48]	; 0x30
 800bf6e:	f001 ff03 	bl	800dd78 <__mcmp>
 800bf72:	42a0      	cmp	r0, r4
 800bf74:	da54      	bge.n	800c020 <_strtod_l+0x858>
 800bf76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf78:	b9f3      	cbnz	r3, 800bfb8 <_strtod_l+0x7f0>
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d11b      	bne.n	800bfb8 <_strtod_l+0x7f0>
 800bf80:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800bf84:	b9c3      	cbnz	r3, 800bfb8 <_strtod_l+0x7f0>
 800bf86:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bf8a:	0d1b      	lsrs	r3, r3, #20
 800bf8c:	051b      	lsls	r3, r3, #20
 800bf8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf92:	d911      	bls.n	800bfb8 <_strtod_l+0x7f0>
 800bf94:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf98:	b91b      	cbnz	r3, 800bfa2 <_strtod_l+0x7da>
 800bf9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	dd0a      	ble.n	800bfb8 <_strtod_l+0x7f0>
 800bfa2:	4641      	mov	r1, r8
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	4658      	mov	r0, fp
 800bfa8:	f001 fe92 	bl	800dcd0 <__lshift>
 800bfac:	9904      	ldr	r1, [sp, #16]
 800bfae:	4680      	mov	r8, r0
 800bfb0:	f001 fee2 	bl	800dd78 <__mcmp>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	dc68      	bgt.n	800c08a <_strtod_l+0x8c2>
 800bfb8:	9b05      	ldr	r3, [sp, #20]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d172      	bne.n	800c0a4 <_strtod_l+0x8dc>
 800bfbe:	e630      	b.n	800bc22 <_strtod_l+0x45a>
 800bfc0:	f018 0f01 	tst.w	r8, #1
 800bfc4:	d004      	beq.n	800bfd0 <_strtod_l+0x808>
 800bfc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfca:	f7f4 fa85 	bl	80004d8 <__aeabi_dmul>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bfd4:	3508      	adds	r5, #8
 800bfd6:	e6dc      	b.n	800bd92 <_strtod_l+0x5ca>
 800bfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe0:	ea03 0909 	and.w	r9, r3, r9
 800bfe4:	e6f6      	b.n	800bdd4 <_strtod_l+0x60c>
 800bfe6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800bfea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800bfee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800bff2:	35e2      	adds	r5, #226	; 0xe2
 800bff4:	fa07 f505 	lsl.w	r5, r7, r5
 800bff8:	970f      	str	r7, [sp, #60]	; 0x3c
 800bffa:	e75c      	b.n	800beb6 <_strtod_l+0x6ee>
 800bffc:	2301      	movs	r3, #1
 800bffe:	2500      	movs	r5, #0
 800c000:	930f      	str	r3, [sp, #60]	; 0x3c
 800c002:	e758      	b.n	800beb6 <_strtod_l+0x6ee>
 800c004:	463a      	mov	r2, r7
 800c006:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c008:	4658      	mov	r0, fp
 800c00a:	f001 fe61 	bl	800dcd0 <__lshift>
 800c00e:	901c      	str	r0, [sp, #112]	; 0x70
 800c010:	2800      	cmp	r0, #0
 800c012:	f47f af7c 	bne.w	800bf0e <_strtod_l+0x746>
 800c016:	e5f9      	b.n	800bc0c <_strtod_l+0x444>
 800c018:	0800f368 	.word	0x0800f368
 800c01c:	fffffc02 	.word	0xfffffc02
 800c020:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c024:	f040 8089 	bne.w	800c13a <_strtod_l+0x972>
 800c028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c02a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800c02e:	b342      	cbz	r2, 800c082 <_strtod_l+0x8ba>
 800c030:	4aaf      	ldr	r2, [pc, #700]	; (800c2f0 <_strtod_l+0xb28>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d156      	bne.n	800c0e4 <_strtod_l+0x91c>
 800c036:	9b05      	ldr	r3, [sp, #20]
 800c038:	4648      	mov	r0, r9
 800c03a:	b1eb      	cbz	r3, 800c078 <_strtod_l+0x8b0>
 800c03c:	4653      	mov	r3, sl
 800c03e:	4aad      	ldr	r2, [pc, #692]	; (800c2f4 <_strtod_l+0xb2c>)
 800c040:	f04f 31ff 	mov.w	r1, #4294967295
 800c044:	401a      	ands	r2, r3
 800c046:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c04a:	d818      	bhi.n	800c07e <_strtod_l+0x8b6>
 800c04c:	0d12      	lsrs	r2, r2, #20
 800c04e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c052:	fa01 f303 	lsl.w	r3, r1, r3
 800c056:	4298      	cmp	r0, r3
 800c058:	d144      	bne.n	800c0e4 <_strtod_l+0x91c>
 800c05a:	4ba7      	ldr	r3, [pc, #668]	; (800c2f8 <_strtod_l+0xb30>)
 800c05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c05e:	429a      	cmp	r2, r3
 800c060:	d102      	bne.n	800c068 <_strtod_l+0x8a0>
 800c062:	3001      	adds	r0, #1
 800c064:	f43f add2 	beq.w	800bc0c <_strtod_l+0x444>
 800c068:	4ba2      	ldr	r3, [pc, #648]	; (800c2f4 <_strtod_l+0xb2c>)
 800c06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c06c:	f04f 0900 	mov.w	r9, #0
 800c070:	401a      	ands	r2, r3
 800c072:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800c076:	e79f      	b.n	800bfb8 <_strtod_l+0x7f0>
 800c078:	f04f 33ff 	mov.w	r3, #4294967295
 800c07c:	e7eb      	b.n	800c056 <_strtod_l+0x88e>
 800c07e:	460b      	mov	r3, r1
 800c080:	e7e9      	b.n	800c056 <_strtod_l+0x88e>
 800c082:	bb7b      	cbnz	r3, 800c0e4 <_strtod_l+0x91c>
 800c084:	f1b9 0f00 	cmp.w	r9, #0
 800c088:	d12c      	bne.n	800c0e4 <_strtod_l+0x91c>
 800c08a:	9905      	ldr	r1, [sp, #20]
 800c08c:	4653      	mov	r3, sl
 800c08e:	4a99      	ldr	r2, [pc, #612]	; (800c2f4 <_strtod_l+0xb2c>)
 800c090:	b1f1      	cbz	r1, 800c0d0 <_strtod_l+0x908>
 800c092:	ea02 010a 	and.w	r1, r2, sl
 800c096:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c09a:	dc19      	bgt.n	800c0d0 <_strtod_l+0x908>
 800c09c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c0a0:	f77f ae51 	ble.w	800bd46 <_strtod_l+0x57e>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4a95      	ldr	r2, [pc, #596]	; (800c2fc <_strtod_l+0xb34>)
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c0ae:	4651      	mov	r1, sl
 800c0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c0b4:	f7f4 fa10 	bl	80004d8 <__aeabi_dmul>
 800c0b8:	4681      	mov	r9, r0
 800c0ba:	468a      	mov	sl, r1
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	f47f adb0 	bne.w	800bc22 <_strtod_l+0x45a>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f47f adad 	bne.w	800bc22 <_strtod_l+0x45a>
 800c0c8:	2322      	movs	r3, #34	; 0x22
 800c0ca:	f8cb 3000 	str.w	r3, [fp]
 800c0ce:	e5a8      	b.n	800bc22 <_strtod_l+0x45a>
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0d6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800c0da:	f04f 39ff 	mov.w	r9, #4294967295
 800c0de:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800c0e2:	e769      	b.n	800bfb8 <_strtod_l+0x7f0>
 800c0e4:	b19d      	cbz	r5, 800c10e <_strtod_l+0x946>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	421d      	tst	r5, r3
 800c0ea:	f43f af65 	beq.w	800bfb8 <_strtod_l+0x7f0>
 800c0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0f0:	9a05      	ldr	r2, [sp, #20]
 800c0f2:	4648      	mov	r0, r9
 800c0f4:	4651      	mov	r1, sl
 800c0f6:	b173      	cbz	r3, 800c116 <_strtod_l+0x94e>
 800c0f8:	f7ff fb42 	bl	800b780 <sulp>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c104:	f7f4 f832 	bl	800016c <__adddf3>
 800c108:	4681      	mov	r9, r0
 800c10a:	468a      	mov	sl, r1
 800c10c:	e754      	b.n	800bfb8 <_strtod_l+0x7f0>
 800c10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c110:	ea13 0f09 	tst.w	r3, r9
 800c114:	e7e9      	b.n	800c0ea <_strtod_l+0x922>
 800c116:	f7ff fb33 	bl	800b780 <sulp>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c122:	f7f4 f821 	bl	8000168 <__aeabi_dsub>
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	4681      	mov	r9, r0
 800c12c:	468a      	mov	sl, r1
 800c12e:	f7f4 fc3b 	bl	80009a8 <__aeabi_dcmpeq>
 800c132:	2800      	cmp	r0, #0
 800c134:	f47f ae07 	bne.w	800bd46 <_strtod_l+0x57e>
 800c138:	e73e      	b.n	800bfb8 <_strtod_l+0x7f0>
 800c13a:	9904      	ldr	r1, [sp, #16]
 800c13c:	4640      	mov	r0, r8
 800c13e:	f001 ff58 	bl	800dff2 <__ratio>
 800c142:	2200      	movs	r2, #0
 800c144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c148:	4606      	mov	r6, r0
 800c14a:	460f      	mov	r7, r1
 800c14c:	f7f4 fc40 	bl	80009d0 <__aeabi_dcmple>
 800c150:	2800      	cmp	r0, #0
 800c152:	d075      	beq.n	800c240 <_strtod_l+0xa78>
 800c154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c156:	2b00      	cmp	r3, #0
 800c158:	d047      	beq.n	800c1ea <_strtod_l+0xa22>
 800c15a:	2600      	movs	r6, #0
 800c15c:	4f68      	ldr	r7, [pc, #416]	; (800c300 <_strtod_l+0xb38>)
 800c15e:	4d68      	ldr	r5, [pc, #416]	; (800c300 <_strtod_l+0xb38>)
 800c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c166:	0d1b      	lsrs	r3, r3, #20
 800c168:	051b      	lsls	r3, r3, #20
 800c16a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c16c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c16e:	4b65      	ldr	r3, [pc, #404]	; (800c304 <_strtod_l+0xb3c>)
 800c170:	429a      	cmp	r2, r3
 800c172:	f040 80cf 	bne.w	800c314 <_strtod_l+0xb4c>
 800c176:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c17a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c180:	4648      	mov	r0, r9
 800c182:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800c186:	4651      	mov	r1, sl
 800c188:	f001 fe6e 	bl	800de68 <__ulp>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4630      	mov	r0, r6
 800c192:	4639      	mov	r1, r7
 800c194:	f7f4 f9a0 	bl	80004d8 <__aeabi_dmul>
 800c198:	464a      	mov	r2, r9
 800c19a:	4653      	mov	r3, sl
 800c19c:	f7f3 ffe6 	bl	800016c <__adddf3>
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4954      	ldr	r1, [pc, #336]	; (800c2f4 <_strtod_l+0xb2c>)
 800c1a4:	4a58      	ldr	r2, [pc, #352]	; (800c308 <_strtod_l+0xb40>)
 800c1a6:	4019      	ands	r1, r3
 800c1a8:	4291      	cmp	r1, r2
 800c1aa:	4681      	mov	r9, r0
 800c1ac:	d95e      	bls.n	800c26c <_strtod_l+0xaa4>
 800c1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d103      	bne.n	800c1c0 <_strtod_l+0x9f8>
 800c1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	f43f ad26 	beq.w	800bc0c <_strtod_l+0x444>
 800c1c0:	f04f 39ff 	mov.w	r9, #4294967295
 800c1c4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800c2f8 <_strtod_l+0xb30>
 800c1c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1ca:	4658      	mov	r0, fp
 800c1cc:	f001 fbb5 	bl	800d93a <_Bfree>
 800c1d0:	9906      	ldr	r1, [sp, #24]
 800c1d2:	4658      	mov	r0, fp
 800c1d4:	f001 fbb1 	bl	800d93a <_Bfree>
 800c1d8:	9904      	ldr	r1, [sp, #16]
 800c1da:	4658      	mov	r0, fp
 800c1dc:	f001 fbad 	bl	800d93a <_Bfree>
 800c1e0:	4641      	mov	r1, r8
 800c1e2:	4658      	mov	r0, fp
 800c1e4:	f001 fba9 	bl	800d93a <_Bfree>
 800c1e8:	e617      	b.n	800be1a <_strtod_l+0x652>
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	d119      	bne.n	800c224 <_strtod_l+0xa5c>
 800c1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1f6:	b9e3      	cbnz	r3, 800c232 <_strtod_l+0xa6a>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4b41      	ldr	r3, [pc, #260]	; (800c300 <_strtod_l+0xb38>)
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	4639      	mov	r1, r7
 800c200:	f7f4 fbdc 	bl	80009bc <__aeabi_dcmplt>
 800c204:	b9c8      	cbnz	r0, 800c23a <_strtod_l+0xa72>
 800c206:	2200      	movs	r2, #0
 800c208:	4b40      	ldr	r3, [pc, #256]	; (800c30c <_strtod_l+0xb44>)
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7f4 f963 	bl	80004d8 <__aeabi_dmul>
 800c212:	4604      	mov	r4, r0
 800c214:	460d      	mov	r5, r1
 800c216:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c21a:	9418      	str	r4, [sp, #96]	; 0x60
 800c21c:	9319      	str	r3, [sp, #100]	; 0x64
 800c21e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c222:	e79d      	b.n	800c160 <_strtod_l+0x998>
 800c224:	f1b9 0f01 	cmp.w	r9, #1
 800c228:	d103      	bne.n	800c232 <_strtod_l+0xa6a>
 800c22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f43f ad8a 	beq.w	800bd46 <_strtod_l+0x57e>
 800c232:	2600      	movs	r6, #0
 800c234:	4f36      	ldr	r7, [pc, #216]	; (800c310 <_strtod_l+0xb48>)
 800c236:	2400      	movs	r4, #0
 800c238:	e791      	b.n	800c15e <_strtod_l+0x996>
 800c23a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c23c:	4d33      	ldr	r5, [pc, #204]	; (800c30c <_strtod_l+0xb44>)
 800c23e:	e7ea      	b.n	800c216 <_strtod_l+0xa4e>
 800c240:	4b32      	ldr	r3, [pc, #200]	; (800c30c <_strtod_l+0xb44>)
 800c242:	2200      	movs	r2, #0
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 f946 	bl	80004d8 <__aeabi_dmul>
 800c24c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c24e:	4604      	mov	r4, r0
 800c250:	460d      	mov	r5, r1
 800c252:	b933      	cbnz	r3, 800c262 <_strtod_l+0xa9a>
 800c254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c258:	9010      	str	r0, [sp, #64]	; 0x40
 800c25a:	9311      	str	r3, [sp, #68]	; 0x44
 800c25c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c260:	e77e      	b.n	800c160 <_strtod_l+0x998>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c26a:	e7f7      	b.n	800c25c <_strtod_l+0xa94>
 800c26c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800c270:	9b05      	ldr	r3, [sp, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1a8      	bne.n	800c1c8 <_strtod_l+0xa00>
 800c276:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c27a:	0d1b      	lsrs	r3, r3, #20
 800c27c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c27e:	051b      	lsls	r3, r3, #20
 800c280:	429a      	cmp	r2, r3
 800c282:	4656      	mov	r6, sl
 800c284:	d1a0      	bne.n	800c1c8 <_strtod_l+0xa00>
 800c286:	4629      	mov	r1, r5
 800c288:	4620      	mov	r0, r4
 800c28a:	f7f4 fbd5 	bl	8000a38 <__aeabi_d2iz>
 800c28e:	f7f4 f8b9 	bl	8000404 <__aeabi_i2d>
 800c292:	460b      	mov	r3, r1
 800c294:	4602      	mov	r2, r0
 800c296:	4629      	mov	r1, r5
 800c298:	4620      	mov	r0, r4
 800c29a:	f7f3 ff65 	bl	8000168 <__aeabi_dsub>
 800c29e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	460d      	mov	r5, r1
 800c2a4:	b933      	cbnz	r3, 800c2b4 <_strtod_l+0xaec>
 800c2a6:	f1b9 0f00 	cmp.w	r9, #0
 800c2aa:	d103      	bne.n	800c2b4 <_strtod_l+0xaec>
 800c2ac:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800c2b0:	2e00      	cmp	r6, #0
 800c2b2:	d06a      	beq.n	800c38a <_strtod_l+0xbc2>
 800c2b4:	a30a      	add	r3, pc, #40	; (adr r3, 800c2e0 <_strtod_l+0xb18>)
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f4 fb7d 	bl	80009bc <__aeabi_dcmplt>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f47f acad 	bne.w	800bc22 <_strtod_l+0x45a>
 800c2c8:	a307      	add	r3, pc, #28	; (adr r3, 800c2e8 <_strtod_l+0xb20>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f4 fb91 	bl	80009f8 <__aeabi_dcmpgt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f43f af76 	beq.w	800c1c8 <_strtod_l+0xa00>
 800c2dc:	e4a1      	b.n	800bc22 <_strtod_l+0x45a>
 800c2de:	bf00      	nop
 800c2e0:	94a03595 	.word	0x94a03595
 800c2e4:	3fdfffff 	.word	0x3fdfffff
 800c2e8:	35afe535 	.word	0x35afe535
 800c2ec:	3fe00000 	.word	0x3fe00000
 800c2f0:	000fffff 	.word	0x000fffff
 800c2f4:	7ff00000 	.word	0x7ff00000
 800c2f8:	7fefffff 	.word	0x7fefffff
 800c2fc:	39500000 	.word	0x39500000
 800c300:	3ff00000 	.word	0x3ff00000
 800c304:	7fe00000 	.word	0x7fe00000
 800c308:	7c9fffff 	.word	0x7c9fffff
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	bff00000 	.word	0xbff00000
 800c314:	9b05      	ldr	r3, [sp, #20]
 800c316:	b313      	cbz	r3, 800c35e <_strtod_l+0xb96>
 800c318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c31e:	d81e      	bhi.n	800c35e <_strtod_l+0xb96>
 800c320:	a325      	add	r3, pc, #148	; (adr r3, 800c3b8 <_strtod_l+0xbf0>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	4620      	mov	r0, r4
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f4 fb51 	bl	80009d0 <__aeabi_dcmple>
 800c32e:	b190      	cbz	r0, 800c356 <_strtod_l+0xb8e>
 800c330:	4629      	mov	r1, r5
 800c332:	4620      	mov	r0, r4
 800c334:	f7f4 fba8 	bl	8000a88 <__aeabi_d2uiz>
 800c338:	2800      	cmp	r0, #0
 800c33a:	bf08      	it	eq
 800c33c:	2001      	moveq	r0, #1
 800c33e:	f7f4 f851 	bl	80003e4 <__aeabi_ui2d>
 800c342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	b9d3      	cbnz	r3, 800c380 <_strtod_l+0xbb8>
 800c34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c34e:	9012      	str	r0, [sp, #72]	; 0x48
 800c350:	9313      	str	r3, [sp, #76]	; 0x4c
 800c352:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c358:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c35c:	1a9f      	subs	r7, r3, r2
 800c35e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c362:	f001 fd81 	bl	800de68 <__ulp>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	f7f4 f8b3 	bl	80004d8 <__aeabi_dmul>
 800c372:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c376:	f7f3 fef9 	bl	800016c <__adddf3>
 800c37a:	4681      	mov	r9, r0
 800c37c:	468a      	mov	sl, r1
 800c37e:	e777      	b.n	800c270 <_strtod_l+0xaa8>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c388:	e7e3      	b.n	800c352 <_strtod_l+0xb8a>
 800c38a:	a30d      	add	r3, pc, #52	; (adr r3, 800c3c0 <_strtod_l+0xbf8>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7f4 fb14 	bl	80009bc <__aeabi_dcmplt>
 800c394:	e79f      	b.n	800c2d6 <_strtod_l+0xb0e>
 800c396:	2300      	movs	r3, #0
 800c398:	930d      	str	r3, [sp, #52]	; 0x34
 800c39a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c39c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	f7ff ba55 	b.w	800b84e <_strtod_l+0x86>
 800c3a4:	2b65      	cmp	r3, #101	; 0x65
 800c3a6:	f04f 0200 	mov.w	r2, #0
 800c3aa:	f43f ab42 	beq.w	800ba32 <_strtod_l+0x26a>
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	9105      	str	r1, [sp, #20]
 800c3b4:	f7ff babf 	b.w	800b936 <_strtod_l+0x16e>
 800c3b8:	ffc00000 	.word	0xffc00000
 800c3bc:	41dfffff 	.word	0x41dfffff
 800c3c0:	94a03595 	.word	0x94a03595
 800c3c4:	3fcfffff 	.word	0x3fcfffff

0800c3c8 <_strtod_r>:
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <_strtod_r+0x18>)
 800c3ca:	b410      	push	{r4}
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4c05      	ldr	r4, [pc, #20]	; (800c3e4 <_strtod_r+0x1c>)
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bf08      	it	eq
 800c3d6:	4623      	moveq	r3, r4
 800c3d8:	bc10      	pop	{r4}
 800c3da:	f7ff b9f5 	b.w	800b7c8 <_strtod_l>
 800c3de:	bf00      	nop
 800c3e0:	2000019c 	.word	0x2000019c
 800c3e4:	20000200 	.word	0x20000200

0800c3e8 <strtod>:
 800c3e8:	4b06      	ldr	r3, [pc, #24]	; (800c404 <strtod+0x1c>)
 800c3ea:	b410      	push	{r4}
 800c3ec:	681c      	ldr	r4, [r3, #0]
 800c3ee:	4a06      	ldr	r2, [pc, #24]	; (800c408 <strtod+0x20>)
 800c3f0:	6a23      	ldr	r3, [r4, #32]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bf08      	it	eq
 800c3f6:	4613      	moveq	r3, r2
 800c3f8:	460a      	mov	r2, r1
 800c3fa:	4601      	mov	r1, r0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	bc10      	pop	{r4}
 800c400:	f7ff b9e2 	b.w	800b7c8 <_strtod_l>
 800c404:	2000019c 	.word	0x2000019c
 800c408:	20000200 	.word	0x20000200

0800c40c <_strtol_l.isra.0>:
 800c40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	4680      	mov	r8, r0
 800c412:	4689      	mov	r9, r1
 800c414:	4692      	mov	sl, r2
 800c416:	461e      	mov	r6, r3
 800c418:	460f      	mov	r7, r1
 800c41a:	463d      	mov	r5, r7
 800c41c:	9808      	ldr	r0, [sp, #32]
 800c41e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c422:	f001 fa01 	bl	800d828 <__locale_ctype_ptr_l>
 800c426:	4420      	add	r0, r4
 800c428:	7843      	ldrb	r3, [r0, #1]
 800c42a:	f013 0308 	ands.w	r3, r3, #8
 800c42e:	d132      	bne.n	800c496 <_strtol_l.isra.0+0x8a>
 800c430:	2c2d      	cmp	r4, #45	; 0x2d
 800c432:	d132      	bne.n	800c49a <_strtol_l.isra.0+0x8e>
 800c434:	2201      	movs	r2, #1
 800c436:	787c      	ldrb	r4, [r7, #1]
 800c438:	1cbd      	adds	r5, r7, #2
 800c43a:	2e00      	cmp	r6, #0
 800c43c:	d05d      	beq.n	800c4fa <_strtol_l.isra.0+0xee>
 800c43e:	2e10      	cmp	r6, #16
 800c440:	d109      	bne.n	800c456 <_strtol_l.isra.0+0x4a>
 800c442:	2c30      	cmp	r4, #48	; 0x30
 800c444:	d107      	bne.n	800c456 <_strtol_l.isra.0+0x4a>
 800c446:	782b      	ldrb	r3, [r5, #0]
 800c448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c44c:	2b58      	cmp	r3, #88	; 0x58
 800c44e:	d14f      	bne.n	800c4f0 <_strtol_l.isra.0+0xe4>
 800c450:	2610      	movs	r6, #16
 800c452:	786c      	ldrb	r4, [r5, #1]
 800c454:	3502      	adds	r5, #2
 800c456:	2a00      	cmp	r2, #0
 800c458:	bf14      	ite	ne
 800c45a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c45e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c462:	2700      	movs	r7, #0
 800c464:	fbb1 fcf6 	udiv	ip, r1, r6
 800c468:	4638      	mov	r0, r7
 800c46a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c46e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c472:	2b09      	cmp	r3, #9
 800c474:	d817      	bhi.n	800c4a6 <_strtol_l.isra.0+0x9a>
 800c476:	461c      	mov	r4, r3
 800c478:	42a6      	cmp	r6, r4
 800c47a:	dd23      	ble.n	800c4c4 <_strtol_l.isra.0+0xb8>
 800c47c:	1c7b      	adds	r3, r7, #1
 800c47e:	d007      	beq.n	800c490 <_strtol_l.isra.0+0x84>
 800c480:	4584      	cmp	ip, r0
 800c482:	d31c      	bcc.n	800c4be <_strtol_l.isra.0+0xb2>
 800c484:	d101      	bne.n	800c48a <_strtol_l.isra.0+0x7e>
 800c486:	45a6      	cmp	lr, r4
 800c488:	db19      	blt.n	800c4be <_strtol_l.isra.0+0xb2>
 800c48a:	2701      	movs	r7, #1
 800c48c:	fb00 4006 	mla	r0, r0, r6, r4
 800c490:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c494:	e7eb      	b.n	800c46e <_strtol_l.isra.0+0x62>
 800c496:	462f      	mov	r7, r5
 800c498:	e7bf      	b.n	800c41a <_strtol_l.isra.0+0xe>
 800c49a:	2c2b      	cmp	r4, #43	; 0x2b
 800c49c:	bf04      	itt	eq
 800c49e:	1cbd      	addeq	r5, r7, #2
 800c4a0:	787c      	ldrbeq	r4, [r7, #1]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	e7c9      	b.n	800c43a <_strtol_l.isra.0+0x2e>
 800c4a6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c4aa:	2b19      	cmp	r3, #25
 800c4ac:	d801      	bhi.n	800c4b2 <_strtol_l.isra.0+0xa6>
 800c4ae:	3c37      	subs	r4, #55	; 0x37
 800c4b0:	e7e2      	b.n	800c478 <_strtol_l.isra.0+0x6c>
 800c4b2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c4b6:	2b19      	cmp	r3, #25
 800c4b8:	d804      	bhi.n	800c4c4 <_strtol_l.isra.0+0xb8>
 800c4ba:	3c57      	subs	r4, #87	; 0x57
 800c4bc:	e7dc      	b.n	800c478 <_strtol_l.isra.0+0x6c>
 800c4be:	f04f 37ff 	mov.w	r7, #4294967295
 800c4c2:	e7e5      	b.n	800c490 <_strtol_l.isra.0+0x84>
 800c4c4:	1c7b      	adds	r3, r7, #1
 800c4c6:	d108      	bne.n	800c4da <_strtol_l.isra.0+0xce>
 800c4c8:	2322      	movs	r3, #34	; 0x22
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	f8c8 3000 	str.w	r3, [r8]
 800c4d0:	f1ba 0f00 	cmp.w	sl, #0
 800c4d4:	d107      	bne.n	800c4e6 <_strtol_l.isra.0+0xda>
 800c4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4da:	b102      	cbz	r2, 800c4de <_strtol_l.isra.0+0xd2>
 800c4dc:	4240      	negs	r0, r0
 800c4de:	f1ba 0f00 	cmp.w	sl, #0
 800c4e2:	d0f8      	beq.n	800c4d6 <_strtol_l.isra.0+0xca>
 800c4e4:	b10f      	cbz	r7, 800c4ea <_strtol_l.isra.0+0xde>
 800c4e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c4ea:	f8ca 9000 	str.w	r9, [sl]
 800c4ee:	e7f2      	b.n	800c4d6 <_strtol_l.isra.0+0xca>
 800c4f0:	2430      	movs	r4, #48	; 0x30
 800c4f2:	2e00      	cmp	r6, #0
 800c4f4:	d1af      	bne.n	800c456 <_strtol_l.isra.0+0x4a>
 800c4f6:	2608      	movs	r6, #8
 800c4f8:	e7ad      	b.n	800c456 <_strtol_l.isra.0+0x4a>
 800c4fa:	2c30      	cmp	r4, #48	; 0x30
 800c4fc:	d0a3      	beq.n	800c446 <_strtol_l.isra.0+0x3a>
 800c4fe:	260a      	movs	r6, #10
 800c500:	e7a9      	b.n	800c456 <_strtol_l.isra.0+0x4a>
	...

0800c504 <_strtol_r>:
 800c504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c506:	4c06      	ldr	r4, [pc, #24]	; (800c520 <_strtol_r+0x1c>)
 800c508:	4d06      	ldr	r5, [pc, #24]	; (800c524 <_strtol_r+0x20>)
 800c50a:	6824      	ldr	r4, [r4, #0]
 800c50c:	6a24      	ldr	r4, [r4, #32]
 800c50e:	2c00      	cmp	r4, #0
 800c510:	bf08      	it	eq
 800c512:	462c      	moveq	r4, r5
 800c514:	9400      	str	r4, [sp, #0]
 800c516:	f7ff ff79 	bl	800c40c <_strtol_l.isra.0>
 800c51a:	b003      	add	sp, #12
 800c51c:	bd30      	pop	{r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	2000019c 	.word	0x2000019c
 800c524:	20000200 	.word	0x20000200

0800c528 <strtol>:
 800c528:	4b08      	ldr	r3, [pc, #32]	; (800c54c <strtol+0x24>)
 800c52a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c52c:	681c      	ldr	r4, [r3, #0]
 800c52e:	4d08      	ldr	r5, [pc, #32]	; (800c550 <strtol+0x28>)
 800c530:	6a23      	ldr	r3, [r4, #32]
 800c532:	2b00      	cmp	r3, #0
 800c534:	bf08      	it	eq
 800c536:	462b      	moveq	r3, r5
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	460a      	mov	r2, r1
 800c53e:	4601      	mov	r1, r0
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff ff63 	bl	800c40c <_strtol_l.isra.0>
 800c546:	b003      	add	sp, #12
 800c548:	bd30      	pop	{r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	2000019c 	.word	0x2000019c
 800c550:	20000200 	.word	0x20000200

0800c554 <quorem>:
 800c554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	6903      	ldr	r3, [r0, #16]
 800c55a:	690c      	ldr	r4, [r1, #16]
 800c55c:	4680      	mov	r8, r0
 800c55e:	42a3      	cmp	r3, r4
 800c560:	f2c0 8084 	blt.w	800c66c <quorem+0x118>
 800c564:	3c01      	subs	r4, #1
 800c566:	f101 0714 	add.w	r7, r1, #20
 800c56a:	f100 0614 	add.w	r6, r0, #20
 800c56e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c572:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c576:	3501      	adds	r5, #1
 800c578:	fbb0 f5f5 	udiv	r5, r0, r5
 800c57c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c580:	eb06 030c 	add.w	r3, r6, ip
 800c584:	eb07 090c 	add.w	r9, r7, ip
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	b39d      	cbz	r5, 800c5f4 <quorem+0xa0>
 800c58c:	f04f 0a00 	mov.w	sl, #0
 800c590:	4638      	mov	r0, r7
 800c592:	46b6      	mov	lr, r6
 800c594:	46d3      	mov	fp, sl
 800c596:	f850 2b04 	ldr.w	r2, [r0], #4
 800c59a:	b293      	uxth	r3, r2
 800c59c:	fb05 a303 	mla	r3, r5, r3, sl
 800c5a0:	0c12      	lsrs	r2, r2, #16
 800c5a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5a6:	fb05 a202 	mla	r2, r5, r2, sl
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	ebab 0303 	sub.w	r3, fp, r3
 800c5b0:	f8de b000 	ldr.w	fp, [lr]
 800c5b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c5b8:	fa1f fb8b 	uxth.w	fp, fp
 800c5bc:	445b      	add	r3, fp
 800c5be:	fa1f fb82 	uxth.w	fp, r2
 800c5c2:	f8de 2000 	ldr.w	r2, [lr]
 800c5c6:	4581      	cmp	r9, r0
 800c5c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c5cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5d6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c5da:	f84e 3b04 	str.w	r3, [lr], #4
 800c5de:	d2da      	bcs.n	800c596 <quorem+0x42>
 800c5e0:	f856 300c 	ldr.w	r3, [r6, ip]
 800c5e4:	b933      	cbnz	r3, 800c5f4 <quorem+0xa0>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	3b04      	subs	r3, #4
 800c5ea:	429e      	cmp	r6, r3
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	d331      	bcc.n	800c654 <quorem+0x100>
 800c5f0:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	f001 fbbf 	bl	800dd78 <__mcmp>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	db26      	blt.n	800c64c <quorem+0xf8>
 800c5fe:	4630      	mov	r0, r6
 800c600:	f04f 0c00 	mov.w	ip, #0
 800c604:	3501      	adds	r5, #1
 800c606:	f857 1b04 	ldr.w	r1, [r7], #4
 800c60a:	f8d0 e000 	ldr.w	lr, [r0]
 800c60e:	b28b      	uxth	r3, r1
 800c610:	ebac 0303 	sub.w	r3, ip, r3
 800c614:	fa1f f28e 	uxth.w	r2, lr
 800c618:	4413      	add	r3, r2
 800c61a:	0c0a      	lsrs	r2, r1, #16
 800c61c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c624:	b29b      	uxth	r3, r3
 800c626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c62a:	45b9      	cmp	r9, r7
 800c62c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c630:	f840 3b04 	str.w	r3, [r0], #4
 800c634:	d2e7      	bcs.n	800c606 <quorem+0xb2>
 800c636:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c63a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c63e:	b92a      	cbnz	r2, 800c64c <quorem+0xf8>
 800c640:	3b04      	subs	r3, #4
 800c642:	429e      	cmp	r6, r3
 800c644:	461a      	mov	r2, r3
 800c646:	d30b      	bcc.n	800c660 <quorem+0x10c>
 800c648:	f8c8 4010 	str.w	r4, [r8, #16]
 800c64c:	4628      	mov	r0, r5
 800c64e:	b003      	add	sp, #12
 800c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c654:	6812      	ldr	r2, [r2, #0]
 800c656:	3b04      	subs	r3, #4
 800c658:	2a00      	cmp	r2, #0
 800c65a:	d1c9      	bne.n	800c5f0 <quorem+0x9c>
 800c65c:	3c01      	subs	r4, #1
 800c65e:	e7c4      	b.n	800c5ea <quorem+0x96>
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	3b04      	subs	r3, #4
 800c664:	2a00      	cmp	r2, #0
 800c666:	d1ef      	bne.n	800c648 <quorem+0xf4>
 800c668:	3c01      	subs	r4, #1
 800c66a:	e7ea      	b.n	800c642 <quorem+0xee>
 800c66c:	2000      	movs	r0, #0
 800c66e:	e7ee      	b.n	800c64e <quorem+0xfa>

0800c670 <_dtoa_r>:
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	4616      	mov	r6, r2
 800c676:	461f      	mov	r7, r3
 800c678:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c67a:	b095      	sub	sp, #84	; 0x54
 800c67c:	4604      	mov	r4, r0
 800c67e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c682:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c686:	b93d      	cbnz	r5, 800c698 <_dtoa_r+0x28>
 800c688:	2010      	movs	r0, #16
 800c68a:	f001 f8ef 	bl	800d86c <malloc>
 800c68e:	6260      	str	r0, [r4, #36]	; 0x24
 800c690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c694:	6005      	str	r5, [r0, #0]
 800c696:	60c5      	str	r5, [r0, #12]
 800c698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69a:	6819      	ldr	r1, [r3, #0]
 800c69c:	b151      	cbz	r1, 800c6b4 <_dtoa_r+0x44>
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4093      	lsls	r3, r2
 800c6a4:	604a      	str	r2, [r1, #4]
 800c6a6:	608b      	str	r3, [r1, #8]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f001 f946 	bl	800d93a <_Bfree>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	1e3b      	subs	r3, r7, #0
 800c6b6:	bfaf      	iteee	ge
 800c6b8:	2300      	movge	r3, #0
 800c6ba:	2201      	movlt	r2, #1
 800c6bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c6c0:	9303      	strlt	r3, [sp, #12]
 800c6c2:	bfac      	ite	ge
 800c6c4:	f8c8 3000 	strge.w	r3, [r8]
 800c6c8:	f8c8 2000 	strlt.w	r2, [r8]
 800c6cc:	4bae      	ldr	r3, [pc, #696]	; (800c988 <_dtoa_r+0x318>)
 800c6ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c6d2:	ea33 0308 	bics.w	r3, r3, r8
 800c6d6:	d11b      	bne.n	800c710 <_dtoa_r+0xa0>
 800c6d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	b923      	cbnz	r3, 800c6ee <_dtoa_r+0x7e>
 800c6e4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f000 8545 	beq.w	800d178 <_dtoa_r+0xb08>
 800c6ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6f0:	b953      	cbnz	r3, 800c708 <_dtoa_r+0x98>
 800c6f2:	4ba6      	ldr	r3, [pc, #664]	; (800c98c <_dtoa_r+0x31c>)
 800c6f4:	e021      	b.n	800c73a <_dtoa_r+0xca>
 800c6f6:	4ba6      	ldr	r3, [pc, #664]	; (800c990 <_dtoa_r+0x320>)
 800c6f8:	9306      	str	r3, [sp, #24]
 800c6fa:	3308      	adds	r3, #8
 800c6fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	9806      	ldr	r0, [sp, #24]
 800c702:	b015      	add	sp, #84	; 0x54
 800c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	4ba0      	ldr	r3, [pc, #640]	; (800c98c <_dtoa_r+0x31c>)
 800c70a:	9306      	str	r3, [sp, #24]
 800c70c:	3303      	adds	r3, #3
 800c70e:	e7f5      	b.n	800c6fc <_dtoa_r+0x8c>
 800c710:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	2300      	movs	r3, #0
 800c718:	4630      	mov	r0, r6
 800c71a:	4639      	mov	r1, r7
 800c71c:	f7f4 f944 	bl	80009a8 <__aeabi_dcmpeq>
 800c720:	4682      	mov	sl, r0
 800c722:	b160      	cbz	r0, 800c73e <_dtoa_r+0xce>
 800c724:	2301      	movs	r3, #1
 800c726:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c728:	6013      	str	r3, [r2, #0]
 800c72a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 8520 	beq.w	800d172 <_dtoa_r+0xb02>
 800c732:	4b98      	ldr	r3, [pc, #608]	; (800c994 <_dtoa_r+0x324>)
 800c734:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	3b01      	subs	r3, #1
 800c73a:	9306      	str	r3, [sp, #24]
 800c73c:	e7e0      	b.n	800c700 <_dtoa_r+0x90>
 800c73e:	ab12      	add	r3, sp, #72	; 0x48
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	ab13      	add	r3, sp, #76	; 0x4c
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	4632      	mov	r2, r6
 800c748:	463b      	mov	r3, r7
 800c74a:	4620      	mov	r0, r4
 800c74c:	f001 fc02 	bl	800df54 <__d2b>
 800c750:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c754:	4683      	mov	fp, r0
 800c756:	2d00      	cmp	r5, #0
 800c758:	d07d      	beq.n	800c856 <_dtoa_r+0x1e6>
 800c75a:	46b0      	mov	r8, r6
 800c75c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c760:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c764:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c768:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c76c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c770:	2200      	movs	r2, #0
 800c772:	4b89      	ldr	r3, [pc, #548]	; (800c998 <_dtoa_r+0x328>)
 800c774:	4640      	mov	r0, r8
 800c776:	4649      	mov	r1, r9
 800c778:	f7f3 fcf6 	bl	8000168 <__aeabi_dsub>
 800c77c:	a37c      	add	r3, pc, #496	; (adr r3, 800c970 <_dtoa_r+0x300>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f7f3 fea9 	bl	80004d8 <__aeabi_dmul>
 800c786:	a37c      	add	r3, pc, #496	; (adr r3, 800c978 <_dtoa_r+0x308>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fcee 	bl	800016c <__adddf3>
 800c790:	4606      	mov	r6, r0
 800c792:	4628      	mov	r0, r5
 800c794:	460f      	mov	r7, r1
 800c796:	f7f3 fe35 	bl	8000404 <__aeabi_i2d>
 800c79a:	a379      	add	r3, pc, #484	; (adr r3, 800c980 <_dtoa_r+0x310>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	f7f3 fe9a 	bl	80004d8 <__aeabi_dmul>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f7f3 fcde 	bl	800016c <__adddf3>
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	f7f4 f940 	bl	8000a38 <__aeabi_d2iz>
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4682      	mov	sl, r0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4630      	mov	r0, r6
 800c7c0:	4639      	mov	r1, r7
 800c7c2:	f7f4 f8fb 	bl	80009bc <__aeabi_dcmplt>
 800c7c6:	b148      	cbz	r0, 800c7dc <_dtoa_r+0x16c>
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	f7f3 fe1b 	bl	8000404 <__aeabi_i2d>
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	f7f4 f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 800c7d6:	b908      	cbnz	r0, 800c7dc <_dtoa_r+0x16c>
 800c7d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7dc:	f1ba 0f16 	cmp.w	sl, #22
 800c7e0:	d85a      	bhi.n	800c898 <_dtoa_r+0x228>
 800c7e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7e6:	496d      	ldr	r1, [pc, #436]	; (800c99c <_dtoa_r+0x32c>)
 800c7e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c7ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f0:	f7f4 f902 	bl	80009f8 <__aeabi_dcmpgt>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d051      	beq.n	800c89c <_dtoa_r+0x22c>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7fe:	930d      	str	r3, [sp, #52]	; 0x34
 800c800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c802:	1b5d      	subs	r5, r3, r5
 800c804:	1e6b      	subs	r3, r5, #1
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	bf43      	ittte	mi
 800c80a:	2300      	movmi	r3, #0
 800c80c:	f1c5 0901 	rsbmi	r9, r5, #1
 800c810:	9307      	strmi	r3, [sp, #28]
 800c812:	f04f 0900 	movpl.w	r9, #0
 800c816:	f1ba 0f00 	cmp.w	sl, #0
 800c81a:	db41      	blt.n	800c8a0 <_dtoa_r+0x230>
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c822:	4453      	add	r3, sl
 800c824:	9307      	str	r3, [sp, #28]
 800c826:	2300      	movs	r3, #0
 800c828:	9308      	str	r3, [sp, #32]
 800c82a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c82c:	2b09      	cmp	r3, #9
 800c82e:	f200 808f 	bhi.w	800c950 <_dtoa_r+0x2e0>
 800c832:	2b05      	cmp	r3, #5
 800c834:	bfc4      	itt	gt
 800c836:	3b04      	subgt	r3, #4
 800c838:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c83a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c83c:	bfc8      	it	gt
 800c83e:	2500      	movgt	r5, #0
 800c840:	f1a3 0302 	sub.w	r3, r3, #2
 800c844:	bfd8      	it	le
 800c846:	2501      	movle	r5, #1
 800c848:	2b03      	cmp	r3, #3
 800c84a:	f200 808d 	bhi.w	800c968 <_dtoa_r+0x2f8>
 800c84e:	e8df f003 	tbb	[pc, r3]
 800c852:	7d7b      	.short	0x7d7b
 800c854:	6f2f      	.short	0x6f2f
 800c856:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c85a:	441d      	add	r5, r3
 800c85c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c860:	2820      	cmp	r0, #32
 800c862:	dd13      	ble.n	800c88c <_dtoa_r+0x21c>
 800c864:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c868:	9b02      	ldr	r3, [sp, #8]
 800c86a:	fa08 f800 	lsl.w	r8, r8, r0
 800c86e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c872:	fa23 f000 	lsr.w	r0, r3, r0
 800c876:	ea48 0000 	orr.w	r0, r8, r0
 800c87a:	f7f3 fdb3 	bl	80003e4 <__aeabi_ui2d>
 800c87e:	2301      	movs	r3, #1
 800c880:	4680      	mov	r8, r0
 800c882:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c886:	3d01      	subs	r5, #1
 800c888:	9310      	str	r3, [sp, #64]	; 0x40
 800c88a:	e771      	b.n	800c770 <_dtoa_r+0x100>
 800c88c:	9b02      	ldr	r3, [sp, #8]
 800c88e:	f1c0 0020 	rsb	r0, r0, #32
 800c892:	fa03 f000 	lsl.w	r0, r3, r0
 800c896:	e7f0      	b.n	800c87a <_dtoa_r+0x20a>
 800c898:	2301      	movs	r3, #1
 800c89a:	e7b0      	b.n	800c7fe <_dtoa_r+0x18e>
 800c89c:	900d      	str	r0, [sp, #52]	; 0x34
 800c89e:	e7af      	b.n	800c800 <_dtoa_r+0x190>
 800c8a0:	f1ca 0300 	rsb	r3, sl, #0
 800c8a4:	9308      	str	r3, [sp, #32]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	eba9 090a 	sub.w	r9, r9, sl
 800c8ac:	930c      	str	r3, [sp, #48]	; 0x30
 800c8ae:	e7bc      	b.n	800c82a <_dtoa_r+0x1ba>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dd74      	ble.n	800c9a4 <_dtoa_r+0x334>
 800c8ba:	4698      	mov	r8, r3
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8c2:	6072      	str	r2, [r6, #4]
 800c8c4:	2204      	movs	r2, #4
 800c8c6:	f102 0014 	add.w	r0, r2, #20
 800c8ca:	4298      	cmp	r0, r3
 800c8cc:	6871      	ldr	r1, [r6, #4]
 800c8ce:	d96e      	bls.n	800c9ae <_dtoa_r+0x33e>
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fffe 	bl	800d8d2 <_Balloc>
 800c8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d8:	6030      	str	r0, [r6, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f1b8 0f0e 	cmp.w	r8, #14
 800c8e0:	9306      	str	r3, [sp, #24]
 800c8e2:	f200 80ed 	bhi.w	800cac0 <_dtoa_r+0x450>
 800c8e6:	2d00      	cmp	r5, #0
 800c8e8:	f000 80ea 	beq.w	800cac0 <_dtoa_r+0x450>
 800c8ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8f0:	f1ba 0f00 	cmp.w	sl, #0
 800c8f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c8f8:	dd77      	ble.n	800c9ea <_dtoa_r+0x37a>
 800c8fa:	4a28      	ldr	r2, [pc, #160]	; (800c99c <_dtoa_r+0x32c>)
 800c8fc:	f00a 030f 	and.w	r3, sl, #15
 800c900:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c904:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c908:	06f0      	lsls	r0, r6, #27
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c912:	d568      	bpl.n	800c9e6 <_dtoa_r+0x376>
 800c914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c918:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <_dtoa_r+0x330>)
 800c91a:	2503      	movs	r5, #3
 800c91c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c920:	f7f3 ff04 	bl	800072c <__aeabi_ddiv>
 800c924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c928:	f006 060f 	and.w	r6, r6, #15
 800c92c:	4f1c      	ldr	r7, [pc, #112]	; (800c9a0 <_dtoa_r+0x330>)
 800c92e:	e04f      	b.n	800c9d0 <_dtoa_r+0x360>
 800c930:	2301      	movs	r3, #1
 800c932:	9309      	str	r3, [sp, #36]	; 0x24
 800c934:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c936:	4453      	add	r3, sl
 800c938:	f103 0801 	add.w	r8, r3, #1
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	4643      	mov	r3, r8
 800c940:	2b01      	cmp	r3, #1
 800c942:	bfb8      	it	lt
 800c944:	2301      	movlt	r3, #1
 800c946:	e7ba      	b.n	800c8be <_dtoa_r+0x24e>
 800c948:	2300      	movs	r3, #0
 800c94a:	e7b2      	b.n	800c8b2 <_dtoa_r+0x242>
 800c94c:	2300      	movs	r3, #0
 800c94e:	e7f0      	b.n	800c932 <_dtoa_r+0x2c2>
 800c950:	2501      	movs	r5, #1
 800c952:	2300      	movs	r3, #0
 800c954:	9509      	str	r5, [sp, #36]	; 0x24
 800c956:	931e      	str	r3, [sp, #120]	; 0x78
 800c958:	f04f 33ff 	mov.w	r3, #4294967295
 800c95c:	2200      	movs	r2, #0
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	4698      	mov	r8, r3
 800c962:	2312      	movs	r3, #18
 800c964:	921f      	str	r2, [sp, #124]	; 0x7c
 800c966:	e7aa      	b.n	800c8be <_dtoa_r+0x24e>
 800c968:	2301      	movs	r3, #1
 800c96a:	9309      	str	r3, [sp, #36]	; 0x24
 800c96c:	e7f4      	b.n	800c958 <_dtoa_r+0x2e8>
 800c96e:	bf00      	nop
 800c970:	636f4361 	.word	0x636f4361
 800c974:	3fd287a7 	.word	0x3fd287a7
 800c978:	8b60c8b3 	.word	0x8b60c8b3
 800c97c:	3fc68a28 	.word	0x3fc68a28
 800c980:	509f79fb 	.word	0x509f79fb
 800c984:	3fd34413 	.word	0x3fd34413
 800c988:	7ff00000 	.word	0x7ff00000
 800c98c:	0800f399 	.word	0x0800f399
 800c990:	0800f390 	.word	0x0800f390
 800c994:	0800f4cc 	.word	0x0800f4cc
 800c998:	3ff80000 	.word	0x3ff80000
 800c99c:	0800f3d0 	.word	0x0800f3d0
 800c9a0:	0800f3a8 	.word	0x0800f3a8
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	9304      	str	r3, [sp, #16]
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	e7da      	b.n	800c964 <_dtoa_r+0x2f4>
 800c9ae:	3101      	adds	r1, #1
 800c9b0:	6071      	str	r1, [r6, #4]
 800c9b2:	0052      	lsls	r2, r2, #1
 800c9b4:	e787      	b.n	800c8c6 <_dtoa_r+0x256>
 800c9b6:	07f1      	lsls	r1, r6, #31
 800c9b8:	d508      	bpl.n	800c9cc <_dtoa_r+0x35c>
 800c9ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9c2:	f7f3 fd89 	bl	80004d8 <__aeabi_dmul>
 800c9c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c9ca:	3501      	adds	r5, #1
 800c9cc:	1076      	asrs	r6, r6, #1
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	d1f0      	bne.n	800c9b6 <_dtoa_r+0x346>
 800c9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9dc:	f7f3 fea6 	bl	800072c <__aeabi_ddiv>
 800c9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e4:	e01b      	b.n	800ca1e <_dtoa_r+0x3ae>
 800c9e6:	2502      	movs	r5, #2
 800c9e8:	e7a0      	b.n	800c92c <_dtoa_r+0x2bc>
 800c9ea:	f000 80a4 	beq.w	800cb36 <_dtoa_r+0x4c6>
 800c9ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9f2:	f1ca 0600 	rsb	r6, sl, #0
 800c9f6:	4ba0      	ldr	r3, [pc, #640]	; (800cc78 <_dtoa_r+0x608>)
 800c9f8:	f006 020f 	and.w	r2, r6, #15
 800c9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f7f3 fd68 	bl	80004d8 <__aeabi_dmul>
 800ca08:	2502      	movs	r5, #2
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca10:	4f9a      	ldr	r7, [pc, #616]	; (800cc7c <_dtoa_r+0x60c>)
 800ca12:	1136      	asrs	r6, r6, #4
 800ca14:	2e00      	cmp	r6, #0
 800ca16:	f040 8083 	bne.w	800cb20 <_dtoa_r+0x4b0>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e0      	bne.n	800c9e0 <_dtoa_r+0x370>
 800ca1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 808a 	beq.w	800cb3a <_dtoa_r+0x4ca>
 800ca26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ca2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca32:	2200      	movs	r2, #0
 800ca34:	4b92      	ldr	r3, [pc, #584]	; (800cc80 <_dtoa_r+0x610>)
 800ca36:	f7f3 ffc1 	bl	80009bc <__aeabi_dcmplt>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d07d      	beq.n	800cb3a <_dtoa_r+0x4ca>
 800ca3e:	f1b8 0f00 	cmp.w	r8, #0
 800ca42:	d07a      	beq.n	800cb3a <_dtoa_r+0x4ca>
 800ca44:	9b04      	ldr	r3, [sp, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dd36      	ble.n	800cab8 <_dtoa_r+0x448>
 800ca4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4b8c      	ldr	r3, [pc, #560]	; (800cc84 <_dtoa_r+0x614>)
 800ca52:	f7f3 fd41 	bl	80004d8 <__aeabi_dmul>
 800ca56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca5a:	9e04      	ldr	r6, [sp, #16]
 800ca5c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ca60:	3501      	adds	r5, #1
 800ca62:	4628      	mov	r0, r5
 800ca64:	f7f3 fcce 	bl	8000404 <__aeabi_i2d>
 800ca68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca6c:	f7f3 fd34 	bl	80004d8 <__aeabi_dmul>
 800ca70:	2200      	movs	r2, #0
 800ca72:	4b85      	ldr	r3, [pc, #532]	; (800cc88 <_dtoa_r+0x618>)
 800ca74:	f7f3 fb7a 	bl	800016c <__adddf3>
 800ca78:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ca7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca80:	950b      	str	r5, [sp, #44]	; 0x2c
 800ca82:	2e00      	cmp	r6, #0
 800ca84:	d15c      	bne.n	800cb40 <_dtoa_r+0x4d0>
 800ca86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4b7f      	ldr	r3, [pc, #508]	; (800cc8c <_dtoa_r+0x61c>)
 800ca8e:	f7f3 fb6b 	bl	8000168 <__aeabi_dsub>
 800ca92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca94:	462b      	mov	r3, r5
 800ca96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca9a:	f7f3 ffad 	bl	80009f8 <__aeabi_dcmpgt>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f040 8281 	bne.w	800cfa6 <_dtoa_r+0x936>
 800caa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caaa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800caae:	f7f3 ff85 	bl	80009bc <__aeabi_dcmplt>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	f040 8275 	bne.w	800cfa2 <_dtoa_r+0x932>
 800cab8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cabc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f2c0 814b 	blt.w	800cd5e <_dtoa_r+0x6ee>
 800cac8:	f1ba 0f0e 	cmp.w	sl, #14
 800cacc:	f300 8147 	bgt.w	800cd5e <_dtoa_r+0x6ee>
 800cad0:	4b69      	ldr	r3, [pc, #420]	; (800cc78 <_dtoa_r+0x608>)
 800cad2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cade:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f280 80d7 	bge.w	800cc94 <_dtoa_r+0x624>
 800cae6:	f1b8 0f00 	cmp.w	r8, #0
 800caea:	f300 80d3 	bgt.w	800cc94 <_dtoa_r+0x624>
 800caee:	f040 8257 	bne.w	800cfa0 <_dtoa_r+0x930>
 800caf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caf6:	2200      	movs	r2, #0
 800caf8:	4b64      	ldr	r3, [pc, #400]	; (800cc8c <_dtoa_r+0x61c>)
 800cafa:	f7f3 fced 	bl	80004d8 <__aeabi_dmul>
 800cafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb02:	f7f3 ff6f 	bl	80009e4 <__aeabi_dcmpge>
 800cb06:	4646      	mov	r6, r8
 800cb08:	4647      	mov	r7, r8
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	f040 822d 	bne.w	800cf6a <_dtoa_r+0x8fa>
 800cb10:	9b06      	ldr	r3, [sp, #24]
 800cb12:	9a06      	ldr	r2, [sp, #24]
 800cb14:	1c5d      	adds	r5, r3, #1
 800cb16:	2331      	movs	r3, #49	; 0x31
 800cb18:	f10a 0a01 	add.w	sl, sl, #1
 800cb1c:	7013      	strb	r3, [r2, #0]
 800cb1e:	e228      	b.n	800cf72 <_dtoa_r+0x902>
 800cb20:	07f2      	lsls	r2, r6, #31
 800cb22:	d505      	bpl.n	800cb30 <_dtoa_r+0x4c0>
 800cb24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb28:	f7f3 fcd6 	bl	80004d8 <__aeabi_dmul>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	3501      	adds	r5, #1
 800cb30:	1076      	asrs	r6, r6, #1
 800cb32:	3708      	adds	r7, #8
 800cb34:	e76e      	b.n	800ca14 <_dtoa_r+0x3a4>
 800cb36:	2502      	movs	r5, #2
 800cb38:	e771      	b.n	800ca1e <_dtoa_r+0x3ae>
 800cb3a:	4657      	mov	r7, sl
 800cb3c:	4646      	mov	r6, r8
 800cb3e:	e790      	b.n	800ca62 <_dtoa_r+0x3f2>
 800cb40:	4b4d      	ldr	r3, [pc, #308]	; (800cc78 <_dtoa_r+0x608>)
 800cb42:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb46:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d048      	beq.n	800cbe2 <_dtoa_r+0x572>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	2000      	movs	r0, #0
 800cb56:	494e      	ldr	r1, [pc, #312]	; (800cc90 <_dtoa_r+0x620>)
 800cb58:	f7f3 fde8 	bl	800072c <__aeabi_ddiv>
 800cb5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb60:	f7f3 fb02 	bl	8000168 <__aeabi_dsub>
 800cb64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cb68:	9d06      	ldr	r5, [sp, #24]
 800cb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb6e:	f7f3 ff63 	bl	8000a38 <__aeabi_d2iz>
 800cb72:	9011      	str	r0, [sp, #68]	; 0x44
 800cb74:	f7f3 fc46 	bl	8000404 <__aeabi_i2d>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb80:	f7f3 faf2 	bl	8000168 <__aeabi_dsub>
 800cb84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb8a:	3330      	adds	r3, #48	; 0x30
 800cb8c:	f805 3b01 	strb.w	r3, [r5], #1
 800cb90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb94:	f7f3 ff12 	bl	80009bc <__aeabi_dcmplt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d163      	bne.n	800cc64 <_dtoa_r+0x5f4>
 800cb9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cba0:	2000      	movs	r0, #0
 800cba2:	4937      	ldr	r1, [pc, #220]	; (800cc80 <_dtoa_r+0x610>)
 800cba4:	f7f3 fae0 	bl	8000168 <__aeabi_dsub>
 800cba8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cbac:	f7f3 ff06 	bl	80009bc <__aeabi_dcmplt>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	f040 80b5 	bne.w	800cd20 <_dtoa_r+0x6b0>
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	1aeb      	subs	r3, r5, r3
 800cbba:	429e      	cmp	r6, r3
 800cbbc:	f77f af7c 	ble.w	800cab8 <_dtoa_r+0x448>
 800cbc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4b2f      	ldr	r3, [pc, #188]	; (800cc84 <_dtoa_r+0x614>)
 800cbc8:	f7f3 fc86 	bl	80004d8 <__aeabi_dmul>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbd6:	4b2b      	ldr	r3, [pc, #172]	; (800cc84 <_dtoa_r+0x614>)
 800cbd8:	f7f3 fc7e 	bl	80004d8 <__aeabi_dmul>
 800cbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbe0:	e7c3      	b.n	800cb6a <_dtoa_r+0x4fa>
 800cbe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cbe6:	f7f3 fc77 	bl	80004d8 <__aeabi_dmul>
 800cbea:	9b06      	ldr	r3, [sp, #24]
 800cbec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cbf0:	199d      	adds	r5, r3, r6
 800cbf2:	461e      	mov	r6, r3
 800cbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf8:	f7f3 ff1e 	bl	8000a38 <__aeabi_d2iz>
 800cbfc:	9011      	str	r0, [sp, #68]	; 0x44
 800cbfe:	f7f3 fc01 	bl	8000404 <__aeabi_i2d>
 800cc02:	4602      	mov	r2, r0
 800cc04:	460b      	mov	r3, r1
 800cc06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc0a:	f7f3 faad 	bl	8000168 <__aeabi_dsub>
 800cc0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc14:	3330      	adds	r3, #48	; 0x30
 800cc16:	f806 3b01 	strb.w	r3, [r6], #1
 800cc1a:	42ae      	cmp	r6, r5
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	d124      	bne.n	800cc6c <_dtoa_r+0x5fc>
 800cc22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc26:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <_dtoa_r+0x620>)
 800cc28:	f7f3 faa0 	bl	800016c <__adddf3>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc34:	f7f3 fee0 	bl	80009f8 <__aeabi_dcmpgt>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d171      	bne.n	800cd20 <_dtoa_r+0x6b0>
 800cc3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc40:	2000      	movs	r0, #0
 800cc42:	4913      	ldr	r1, [pc, #76]	; (800cc90 <_dtoa_r+0x620>)
 800cc44:	f7f3 fa90 	bl	8000168 <__aeabi_dsub>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc50:	f7f3 feb4 	bl	80009bc <__aeabi_dcmplt>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f43f af2f 	beq.w	800cab8 <_dtoa_r+0x448>
 800cc5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc5e:	1e6a      	subs	r2, r5, #1
 800cc60:	2b30      	cmp	r3, #48	; 0x30
 800cc62:	d001      	beq.n	800cc68 <_dtoa_r+0x5f8>
 800cc64:	46ba      	mov	sl, r7
 800cc66:	e04a      	b.n	800ccfe <_dtoa_r+0x68e>
 800cc68:	4615      	mov	r5, r2
 800cc6a:	e7f6      	b.n	800cc5a <_dtoa_r+0x5ea>
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <_dtoa_r+0x614>)
 800cc6e:	f7f3 fc33 	bl	80004d8 <__aeabi_dmul>
 800cc72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc76:	e7bd      	b.n	800cbf4 <_dtoa_r+0x584>
 800cc78:	0800f3d0 	.word	0x0800f3d0
 800cc7c:	0800f3a8 	.word	0x0800f3a8
 800cc80:	3ff00000 	.word	0x3ff00000
 800cc84:	40240000 	.word	0x40240000
 800cc88:	401c0000 	.word	0x401c0000
 800cc8c:	40140000 	.word	0x40140000
 800cc90:	3fe00000 	.word	0x3fe00000
 800cc94:	9d06      	ldr	r5, [sp, #24]
 800cc96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc9e:	4630      	mov	r0, r6
 800cca0:	4639      	mov	r1, r7
 800cca2:	f7f3 fd43 	bl	800072c <__aeabi_ddiv>
 800cca6:	f7f3 fec7 	bl	8000a38 <__aeabi_d2iz>
 800ccaa:	4681      	mov	r9, r0
 800ccac:	f7f3 fbaa 	bl	8000404 <__aeabi_i2d>
 800ccb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb4:	f7f3 fc10 	bl	80004d8 <__aeabi_dmul>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 fa52 	bl	8000168 <__aeabi_dsub>
 800ccc4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ccc8:	f805 6b01 	strb.w	r6, [r5], #1
 800cccc:	9e06      	ldr	r6, [sp, #24]
 800ccce:	4602      	mov	r2, r0
 800ccd0:	1bae      	subs	r6, r5, r6
 800ccd2:	45b0      	cmp	r8, r6
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	d135      	bne.n	800cd44 <_dtoa_r+0x6d4>
 800ccd8:	f7f3 fa48 	bl	800016c <__adddf3>
 800ccdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce0:	4606      	mov	r6, r0
 800cce2:	460f      	mov	r7, r1
 800cce4:	f7f3 fe88 	bl	80009f8 <__aeabi_dcmpgt>
 800cce8:	b9c8      	cbnz	r0, 800cd1e <_dtoa_r+0x6ae>
 800ccea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	f7f3 fe59 	bl	80009a8 <__aeabi_dcmpeq>
 800ccf6:	b110      	cbz	r0, 800ccfe <_dtoa_r+0x68e>
 800ccf8:	f019 0f01 	tst.w	r9, #1
 800ccfc:	d10f      	bne.n	800cd1e <_dtoa_r+0x6ae>
 800ccfe:	4659      	mov	r1, fp
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 fe1a 	bl	800d93a <_Bfree>
 800cd06:	2300      	movs	r3, #0
 800cd08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd0a:	702b      	strb	r3, [r5, #0]
 800cd0c:	f10a 0301 	add.w	r3, sl, #1
 800cd10:	6013      	str	r3, [r2, #0]
 800cd12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f43f acf3 	beq.w	800c700 <_dtoa_r+0x90>
 800cd1a:	601d      	str	r5, [r3, #0]
 800cd1c:	e4f0      	b.n	800c700 <_dtoa_r+0x90>
 800cd1e:	4657      	mov	r7, sl
 800cd20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd24:	1e6b      	subs	r3, r5, #1
 800cd26:	2a39      	cmp	r2, #57	; 0x39
 800cd28:	d106      	bne.n	800cd38 <_dtoa_r+0x6c8>
 800cd2a:	9a06      	ldr	r2, [sp, #24]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d107      	bne.n	800cd40 <_dtoa_r+0x6d0>
 800cd30:	2330      	movs	r3, #48	; 0x30
 800cd32:	7013      	strb	r3, [r2, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	3701      	adds	r7, #1
 800cd38:	781a      	ldrb	r2, [r3, #0]
 800cd3a:	3201      	adds	r2, #1
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	e791      	b.n	800cc64 <_dtoa_r+0x5f4>
 800cd40:	461d      	mov	r5, r3
 800cd42:	e7ed      	b.n	800cd20 <_dtoa_r+0x6b0>
 800cd44:	2200      	movs	r2, #0
 800cd46:	4b99      	ldr	r3, [pc, #612]	; (800cfac <_dtoa_r+0x93c>)
 800cd48:	f7f3 fbc6 	bl	80004d8 <__aeabi_dmul>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	4606      	mov	r6, r0
 800cd52:	460f      	mov	r7, r1
 800cd54:	f7f3 fe28 	bl	80009a8 <__aeabi_dcmpeq>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d09e      	beq.n	800cc9a <_dtoa_r+0x62a>
 800cd5c:	e7cf      	b.n	800ccfe <_dtoa_r+0x68e>
 800cd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd60:	2a00      	cmp	r2, #0
 800cd62:	f000 8088 	beq.w	800ce76 <_dtoa_r+0x806>
 800cd66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cd68:	2a01      	cmp	r2, #1
 800cd6a:	dc6d      	bgt.n	800ce48 <_dtoa_r+0x7d8>
 800cd6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	d066      	beq.n	800ce40 <_dtoa_r+0x7d0>
 800cd72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd76:	464d      	mov	r5, r9
 800cd78:	9e08      	ldr	r6, [sp, #32]
 800cd7a:	9a07      	ldr	r2, [sp, #28]
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	441a      	add	r2, r3
 800cd80:	4620      	mov	r0, r4
 800cd82:	4499      	add	r9, r3
 800cd84:	9207      	str	r2, [sp, #28]
 800cd86:	f000 feb6 	bl	800daf6 <__i2b>
 800cd8a:	4607      	mov	r7, r0
 800cd8c:	2d00      	cmp	r5, #0
 800cd8e:	dd0b      	ble.n	800cda8 <_dtoa_r+0x738>
 800cd90:	9b07      	ldr	r3, [sp, #28]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	dd08      	ble.n	800cda8 <_dtoa_r+0x738>
 800cd96:	42ab      	cmp	r3, r5
 800cd98:	bfa8      	it	ge
 800cd9a:	462b      	movge	r3, r5
 800cd9c:	9a07      	ldr	r2, [sp, #28]
 800cd9e:	eba9 0903 	sub.w	r9, r9, r3
 800cda2:	1aed      	subs	r5, r5, r3
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	9307      	str	r3, [sp, #28]
 800cda8:	9b08      	ldr	r3, [sp, #32]
 800cdaa:	b1eb      	cbz	r3, 800cde8 <_dtoa_r+0x778>
 800cdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d065      	beq.n	800ce7e <_dtoa_r+0x80e>
 800cdb2:	b18e      	cbz	r6, 800cdd8 <_dtoa_r+0x768>
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 ff3b 	bl	800dc34 <__pow5mult>
 800cdbe:	465a      	mov	r2, fp
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 fe9f 	bl	800db08 <__multiply>
 800cdca:	4659      	mov	r1, fp
 800cdcc:	900a      	str	r0, [sp, #40]	; 0x28
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 fdb3 	bl	800d93a <_Bfree>
 800cdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd6:	469b      	mov	fp, r3
 800cdd8:	9b08      	ldr	r3, [sp, #32]
 800cdda:	1b9a      	subs	r2, r3, r6
 800cddc:	d004      	beq.n	800cde8 <_dtoa_r+0x778>
 800cdde:	4659      	mov	r1, fp
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 ff27 	bl	800dc34 <__pow5mult>
 800cde6:	4683      	mov	fp, r0
 800cde8:	2101      	movs	r1, #1
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 fe83 	bl	800daf6 <__i2b>
 800cdf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f000 81c6 	beq.w	800d186 <_dtoa_r+0xb16>
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4601      	mov	r1, r0
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f000 ff18 	bl	800dc34 <__pow5mult>
 800ce04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce06:	4606      	mov	r6, r0
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	dc3e      	bgt.n	800ce8a <_dtoa_r+0x81a>
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d137      	bne.n	800ce82 <_dtoa_r+0x812>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d134      	bne.n	800ce86 <_dtoa_r+0x816>
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce22:	0d1b      	lsrs	r3, r3, #20
 800ce24:	051b      	lsls	r3, r3, #20
 800ce26:	b12b      	cbz	r3, 800ce34 <_dtoa_r+0x7c4>
 800ce28:	9b07      	ldr	r3, [sp, #28]
 800ce2a:	f109 0901 	add.w	r9, r9, #1
 800ce2e:	3301      	adds	r3, #1
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	2301      	movs	r3, #1
 800ce34:	9308      	str	r3, [sp, #32]
 800ce36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d128      	bne.n	800ce8e <_dtoa_r+0x81e>
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	e02e      	b.n	800ce9e <_dtoa_r+0x82e>
 800ce40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce46:	e796      	b.n	800cd76 <_dtoa_r+0x706>
 800ce48:	9b08      	ldr	r3, [sp, #32]
 800ce4a:	f108 36ff 	add.w	r6, r8, #4294967295
 800ce4e:	42b3      	cmp	r3, r6
 800ce50:	bfb7      	itett	lt
 800ce52:	9b08      	ldrlt	r3, [sp, #32]
 800ce54:	1b9e      	subge	r6, r3, r6
 800ce56:	1af2      	sublt	r2, r6, r3
 800ce58:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ce5a:	bfbf      	itttt	lt
 800ce5c:	9608      	strlt	r6, [sp, #32]
 800ce5e:	189b      	addlt	r3, r3, r2
 800ce60:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ce62:	2600      	movlt	r6, #0
 800ce64:	f1b8 0f00 	cmp.w	r8, #0
 800ce68:	bfb9      	ittee	lt
 800ce6a:	eba9 0508 	sublt.w	r5, r9, r8
 800ce6e:	2300      	movlt	r3, #0
 800ce70:	464d      	movge	r5, r9
 800ce72:	4643      	movge	r3, r8
 800ce74:	e781      	b.n	800cd7a <_dtoa_r+0x70a>
 800ce76:	9e08      	ldr	r6, [sp, #32]
 800ce78:	464d      	mov	r5, r9
 800ce7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce7c:	e786      	b.n	800cd8c <_dtoa_r+0x71c>
 800ce7e:	9a08      	ldr	r2, [sp, #32]
 800ce80:	e7ad      	b.n	800cdde <_dtoa_r+0x76e>
 800ce82:	2300      	movs	r3, #0
 800ce84:	e7d6      	b.n	800ce34 <_dtoa_r+0x7c4>
 800ce86:	9b02      	ldr	r3, [sp, #8]
 800ce88:	e7d4      	b.n	800ce34 <_dtoa_r+0x7c4>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9308      	str	r3, [sp, #32]
 800ce8e:	6933      	ldr	r3, [r6, #16]
 800ce90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce94:	6918      	ldr	r0, [r3, #16]
 800ce96:	f000 fde0 	bl	800da5a <__hi0bits>
 800ce9a:	f1c0 0020 	rsb	r0, r0, #32
 800ce9e:	9b07      	ldr	r3, [sp, #28]
 800cea0:	4418      	add	r0, r3
 800cea2:	f010 001f 	ands.w	r0, r0, #31
 800cea6:	d047      	beq.n	800cf38 <_dtoa_r+0x8c8>
 800cea8:	f1c0 0320 	rsb	r3, r0, #32
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	dd3b      	ble.n	800cf28 <_dtoa_r+0x8b8>
 800ceb0:	9b07      	ldr	r3, [sp, #28]
 800ceb2:	f1c0 001c 	rsb	r0, r0, #28
 800ceb6:	4481      	add	r9, r0
 800ceb8:	4405      	add	r5, r0
 800ceba:	4403      	add	r3, r0
 800cebc:	9307      	str	r3, [sp, #28]
 800cebe:	f1b9 0f00 	cmp.w	r9, #0
 800cec2:	dd05      	ble.n	800ced0 <_dtoa_r+0x860>
 800cec4:	4659      	mov	r1, fp
 800cec6:	464a      	mov	r2, r9
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 ff01 	bl	800dcd0 <__lshift>
 800cece:	4683      	mov	fp, r0
 800ced0:	9b07      	ldr	r3, [sp, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd05      	ble.n	800cee2 <_dtoa_r+0x872>
 800ced6:	4631      	mov	r1, r6
 800ced8:	461a      	mov	r2, r3
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 fef8 	bl	800dcd0 <__lshift>
 800cee0:	4606      	mov	r6, r0
 800cee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee4:	b353      	cbz	r3, 800cf3c <_dtoa_r+0x8cc>
 800cee6:	4631      	mov	r1, r6
 800cee8:	4658      	mov	r0, fp
 800ceea:	f000 ff45 	bl	800dd78 <__mcmp>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	da24      	bge.n	800cf3c <_dtoa_r+0x8cc>
 800cef2:	2300      	movs	r3, #0
 800cef4:	4659      	mov	r1, fp
 800cef6:	220a      	movs	r2, #10
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fd35 	bl	800d968 <__multadd>
 800cefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf04:	4683      	mov	fp, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f000 8144 	beq.w	800d194 <_dtoa_r+0xb24>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4639      	mov	r1, r7
 800cf10:	220a      	movs	r2, #10
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 fd28 	bl	800d968 <__multadd>
 800cf18:	9b04      	ldr	r3, [sp, #16]
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	dc4d      	bgt.n	800cfbc <_dtoa_r+0x94c>
 800cf20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	dd4a      	ble.n	800cfbc <_dtoa_r+0x94c>
 800cf26:	e011      	b.n	800cf4c <_dtoa_r+0x8dc>
 800cf28:	d0c9      	beq.n	800cebe <_dtoa_r+0x84e>
 800cf2a:	9a07      	ldr	r2, [sp, #28]
 800cf2c:	331c      	adds	r3, #28
 800cf2e:	441a      	add	r2, r3
 800cf30:	4499      	add	r9, r3
 800cf32:	441d      	add	r5, r3
 800cf34:	4613      	mov	r3, r2
 800cf36:	e7c1      	b.n	800cebc <_dtoa_r+0x84c>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	e7f6      	b.n	800cf2a <_dtoa_r+0x8ba>
 800cf3c:	f1b8 0f00 	cmp.w	r8, #0
 800cf40:	dc36      	bgt.n	800cfb0 <_dtoa_r+0x940>
 800cf42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	dd33      	ble.n	800cfb0 <_dtoa_r+0x940>
 800cf48:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	b963      	cbnz	r3, 800cf6a <_dtoa_r+0x8fa>
 800cf50:	4631      	mov	r1, r6
 800cf52:	2205      	movs	r2, #5
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fd07 	bl	800d968 <__multadd>
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	4658      	mov	r0, fp
 800cf60:	f000 ff0a 	bl	800dd78 <__mcmp>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f73f add3 	bgt.w	800cb10 <_dtoa_r+0x4a0>
 800cf6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf6c:	9d06      	ldr	r5, [sp, #24]
 800cf6e:	ea6f 0a03 	mvn.w	sl, r3
 800cf72:	f04f 0900 	mov.w	r9, #0
 800cf76:	4631      	mov	r1, r6
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 fcde 	bl	800d93a <_Bfree>
 800cf7e:	2f00      	cmp	r7, #0
 800cf80:	f43f aebd 	beq.w	800ccfe <_dtoa_r+0x68e>
 800cf84:	f1b9 0f00 	cmp.w	r9, #0
 800cf88:	d005      	beq.n	800cf96 <_dtoa_r+0x926>
 800cf8a:	45b9      	cmp	r9, r7
 800cf8c:	d003      	beq.n	800cf96 <_dtoa_r+0x926>
 800cf8e:	4649      	mov	r1, r9
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fcd2 	bl	800d93a <_Bfree>
 800cf96:	4639      	mov	r1, r7
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 fcce 	bl	800d93a <_Bfree>
 800cf9e:	e6ae      	b.n	800ccfe <_dtoa_r+0x68e>
 800cfa0:	2600      	movs	r6, #0
 800cfa2:	4637      	mov	r7, r6
 800cfa4:	e7e1      	b.n	800cf6a <_dtoa_r+0x8fa>
 800cfa6:	46ba      	mov	sl, r7
 800cfa8:	4637      	mov	r7, r6
 800cfaa:	e5b1      	b.n	800cb10 <_dtoa_r+0x4a0>
 800cfac:	40240000 	.word	0x40240000
 800cfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb2:	f8cd 8010 	str.w	r8, [sp, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f000 80f3 	beq.w	800d1a2 <_dtoa_r+0xb32>
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	dd05      	ble.n	800cfcc <_dtoa_r+0x95c>
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fe83 	bl	800dcd0 <__lshift>
 800cfca:	4607      	mov	r7, r0
 800cfcc:	9b08      	ldr	r3, [sp, #32]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d04c      	beq.n	800d06c <_dtoa_r+0x9fc>
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 fc7c 	bl	800d8d2 <_Balloc>
 800cfda:	4605      	mov	r5, r0
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	f107 010c 	add.w	r1, r7, #12
 800cfe2:	3202      	adds	r2, #2
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	300c      	adds	r0, #12
 800cfe8:	f000 fc68 	bl	800d8bc <memcpy>
 800cfec:	2201      	movs	r2, #1
 800cfee:	4629      	mov	r1, r5
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 fe6d 	bl	800dcd0 <__lshift>
 800cff6:	46b9      	mov	r9, r7
 800cff8:	4607      	mov	r7, r0
 800cffa:	9b06      	ldr	r3, [sp, #24]
 800cffc:	9307      	str	r3, [sp, #28]
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	9308      	str	r3, [sp, #32]
 800d006:	4631      	mov	r1, r6
 800d008:	4658      	mov	r0, fp
 800d00a:	f7ff faa3 	bl	800c554 <quorem>
 800d00e:	4649      	mov	r1, r9
 800d010:	4605      	mov	r5, r0
 800d012:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d016:	4658      	mov	r0, fp
 800d018:	f000 feae 	bl	800dd78 <__mcmp>
 800d01c:	463a      	mov	r2, r7
 800d01e:	9002      	str	r0, [sp, #8]
 800d020:	4631      	mov	r1, r6
 800d022:	4620      	mov	r0, r4
 800d024:	f000 fec2 	bl	800ddac <__mdiff>
 800d028:	68c3      	ldr	r3, [r0, #12]
 800d02a:	4602      	mov	r2, r0
 800d02c:	bb03      	cbnz	r3, 800d070 <_dtoa_r+0xa00>
 800d02e:	4601      	mov	r1, r0
 800d030:	9009      	str	r0, [sp, #36]	; 0x24
 800d032:	4658      	mov	r0, fp
 800d034:	f000 fea0 	bl	800dd78 <__mcmp>
 800d038:	4603      	mov	r3, r0
 800d03a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d03c:	4611      	mov	r1, r2
 800d03e:	4620      	mov	r0, r4
 800d040:	9309      	str	r3, [sp, #36]	; 0x24
 800d042:	f000 fc7a 	bl	800d93a <_Bfree>
 800d046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d048:	b9a3      	cbnz	r3, 800d074 <_dtoa_r+0xa04>
 800d04a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d04c:	b992      	cbnz	r2, 800d074 <_dtoa_r+0xa04>
 800d04e:	9a08      	ldr	r2, [sp, #32]
 800d050:	b982      	cbnz	r2, 800d074 <_dtoa_r+0xa04>
 800d052:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d056:	d029      	beq.n	800d0ac <_dtoa_r+0xa3c>
 800d058:	9b02      	ldr	r3, [sp, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dd01      	ble.n	800d062 <_dtoa_r+0x9f2>
 800d05e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d062:	9b07      	ldr	r3, [sp, #28]
 800d064:	1c5d      	adds	r5, r3, #1
 800d066:	f883 8000 	strb.w	r8, [r3]
 800d06a:	e784      	b.n	800cf76 <_dtoa_r+0x906>
 800d06c:	4638      	mov	r0, r7
 800d06e:	e7c2      	b.n	800cff6 <_dtoa_r+0x986>
 800d070:	2301      	movs	r3, #1
 800d072:	e7e3      	b.n	800d03c <_dtoa_r+0x9cc>
 800d074:	9a02      	ldr	r2, [sp, #8]
 800d076:	2a00      	cmp	r2, #0
 800d078:	db04      	blt.n	800d084 <_dtoa_r+0xa14>
 800d07a:	d123      	bne.n	800d0c4 <_dtoa_r+0xa54>
 800d07c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d07e:	bb0a      	cbnz	r2, 800d0c4 <_dtoa_r+0xa54>
 800d080:	9a08      	ldr	r2, [sp, #32]
 800d082:	b9fa      	cbnz	r2, 800d0c4 <_dtoa_r+0xa54>
 800d084:	2b00      	cmp	r3, #0
 800d086:	ddec      	ble.n	800d062 <_dtoa_r+0x9f2>
 800d088:	4659      	mov	r1, fp
 800d08a:	2201      	movs	r2, #1
 800d08c:	4620      	mov	r0, r4
 800d08e:	f000 fe1f 	bl	800dcd0 <__lshift>
 800d092:	4631      	mov	r1, r6
 800d094:	4683      	mov	fp, r0
 800d096:	f000 fe6f 	bl	800dd78 <__mcmp>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	dc03      	bgt.n	800d0a6 <_dtoa_r+0xa36>
 800d09e:	d1e0      	bne.n	800d062 <_dtoa_r+0x9f2>
 800d0a0:	f018 0f01 	tst.w	r8, #1
 800d0a4:	d0dd      	beq.n	800d062 <_dtoa_r+0x9f2>
 800d0a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0aa:	d1d8      	bne.n	800d05e <_dtoa_r+0x9ee>
 800d0ac:	9b07      	ldr	r3, [sp, #28]
 800d0ae:	9a07      	ldr	r2, [sp, #28]
 800d0b0:	1c5d      	adds	r5, r3, #1
 800d0b2:	2339      	movs	r3, #57	; 0x39
 800d0b4:	7013      	strb	r3, [r2, #0]
 800d0b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0ba:	1e6a      	subs	r2, r5, #1
 800d0bc:	2b39      	cmp	r3, #57	; 0x39
 800d0be:	d04d      	beq.n	800d15c <_dtoa_r+0xaec>
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	e052      	b.n	800d16a <_dtoa_r+0xafa>
 800d0c4:	9a07      	ldr	r2, [sp, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f102 0501 	add.w	r5, r2, #1
 800d0cc:	dd06      	ble.n	800d0dc <_dtoa_r+0xa6c>
 800d0ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0d2:	d0eb      	beq.n	800d0ac <_dtoa_r+0xa3c>
 800d0d4:	f108 0801 	add.w	r8, r8, #1
 800d0d8:	9b07      	ldr	r3, [sp, #28]
 800d0da:	e7c4      	b.n	800d066 <_dtoa_r+0x9f6>
 800d0dc:	9b06      	ldr	r3, [sp, #24]
 800d0de:	9a04      	ldr	r2, [sp, #16]
 800d0e0:	1aeb      	subs	r3, r5, r3
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d0e8:	d021      	beq.n	800d12e <_dtoa_r+0xabe>
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	220a      	movs	r2, #10
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f000 fc39 	bl	800d968 <__multadd>
 800d0f6:	45b9      	cmp	r9, r7
 800d0f8:	4683      	mov	fp, r0
 800d0fa:	f04f 0300 	mov.w	r3, #0
 800d0fe:	f04f 020a 	mov.w	r2, #10
 800d102:	4649      	mov	r1, r9
 800d104:	4620      	mov	r0, r4
 800d106:	d105      	bne.n	800d114 <_dtoa_r+0xaa4>
 800d108:	f000 fc2e 	bl	800d968 <__multadd>
 800d10c:	4681      	mov	r9, r0
 800d10e:	4607      	mov	r7, r0
 800d110:	9507      	str	r5, [sp, #28]
 800d112:	e778      	b.n	800d006 <_dtoa_r+0x996>
 800d114:	f000 fc28 	bl	800d968 <__multadd>
 800d118:	4639      	mov	r1, r7
 800d11a:	4681      	mov	r9, r0
 800d11c:	2300      	movs	r3, #0
 800d11e:	220a      	movs	r2, #10
 800d120:	4620      	mov	r0, r4
 800d122:	f000 fc21 	bl	800d968 <__multadd>
 800d126:	4607      	mov	r7, r0
 800d128:	e7f2      	b.n	800d110 <_dtoa_r+0xaa0>
 800d12a:	f04f 0900 	mov.w	r9, #0
 800d12e:	4659      	mov	r1, fp
 800d130:	2201      	movs	r2, #1
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fdcc 	bl	800dcd0 <__lshift>
 800d138:	4631      	mov	r1, r6
 800d13a:	4683      	mov	fp, r0
 800d13c:	f000 fe1c 	bl	800dd78 <__mcmp>
 800d140:	2800      	cmp	r0, #0
 800d142:	dcb8      	bgt.n	800d0b6 <_dtoa_r+0xa46>
 800d144:	d102      	bne.n	800d14c <_dtoa_r+0xadc>
 800d146:	f018 0f01 	tst.w	r8, #1
 800d14a:	d1b4      	bne.n	800d0b6 <_dtoa_r+0xa46>
 800d14c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d150:	1e6a      	subs	r2, r5, #1
 800d152:	2b30      	cmp	r3, #48	; 0x30
 800d154:	f47f af0f 	bne.w	800cf76 <_dtoa_r+0x906>
 800d158:	4615      	mov	r5, r2
 800d15a:	e7f7      	b.n	800d14c <_dtoa_r+0xadc>
 800d15c:	9b06      	ldr	r3, [sp, #24]
 800d15e:	4293      	cmp	r3, r2
 800d160:	d105      	bne.n	800d16e <_dtoa_r+0xafe>
 800d162:	2331      	movs	r3, #49	; 0x31
 800d164:	9a06      	ldr	r2, [sp, #24]
 800d166:	f10a 0a01 	add.w	sl, sl, #1
 800d16a:	7013      	strb	r3, [r2, #0]
 800d16c:	e703      	b.n	800cf76 <_dtoa_r+0x906>
 800d16e:	4615      	mov	r5, r2
 800d170:	e7a1      	b.n	800d0b6 <_dtoa_r+0xa46>
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <_dtoa_r+0xb60>)
 800d174:	f7ff bae1 	b.w	800c73a <_dtoa_r+0xca>
 800d178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f47f aabb 	bne.w	800c6f6 <_dtoa_r+0x86>
 800d180:	4b14      	ldr	r3, [pc, #80]	; (800d1d4 <_dtoa_r+0xb64>)
 800d182:	f7ff bada 	b.w	800c73a <_dtoa_r+0xca>
 800d186:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d188:	2b01      	cmp	r3, #1
 800d18a:	f77f ae3f 	ble.w	800ce0c <_dtoa_r+0x79c>
 800d18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d190:	9308      	str	r3, [sp, #32]
 800d192:	e653      	b.n	800ce3c <_dtoa_r+0x7cc>
 800d194:	9b04      	ldr	r3, [sp, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	dc03      	bgt.n	800d1a2 <_dtoa_r+0xb32>
 800d19a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	f73f aed5 	bgt.w	800cf4c <_dtoa_r+0x8dc>
 800d1a2:	9d06      	ldr	r5, [sp, #24]
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4658      	mov	r0, fp
 800d1a8:	f7ff f9d4 	bl	800c554 <quorem>
 800d1ac:	9b06      	ldr	r3, [sp, #24]
 800d1ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d1b2:	f805 8b01 	strb.w	r8, [r5], #1
 800d1b6:	9a04      	ldr	r2, [sp, #16]
 800d1b8:	1aeb      	subs	r3, r5, r3
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	ddb5      	ble.n	800d12a <_dtoa_r+0xaba>
 800d1be:	4659      	mov	r1, fp
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	220a      	movs	r2, #10
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fbcf 	bl	800d968 <__multadd>
 800d1ca:	4683      	mov	fp, r0
 800d1cc:	e7ea      	b.n	800d1a4 <_dtoa_r+0xb34>
 800d1ce:	bf00      	nop
 800d1d0:	0800f4cb 	.word	0x0800f4cb
 800d1d4:	0800f390 	.word	0x0800f390

0800d1d8 <rshift>:
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	6906      	ldr	r6, [r0, #16]
 800d1dc:	114b      	asrs	r3, r1, #5
 800d1de:	429e      	cmp	r6, r3
 800d1e0:	f100 0414 	add.w	r4, r0, #20
 800d1e4:	dd31      	ble.n	800d24a <rshift+0x72>
 800d1e6:	f011 011f 	ands.w	r1, r1, #31
 800d1ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d1ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d1f2:	d108      	bne.n	800d206 <rshift+0x2e>
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	42b2      	cmp	r2, r6
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	d211      	bcs.n	800d220 <rshift+0x48>
 800d1fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800d200:	f841 3b04 	str.w	r3, [r1], #4
 800d204:	e7f7      	b.n	800d1f6 <rshift+0x1e>
 800d206:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d20a:	4623      	mov	r3, r4
 800d20c:	f1c1 0c20 	rsb	ip, r1, #32
 800d210:	40cd      	lsrs	r5, r1
 800d212:	3204      	adds	r2, #4
 800d214:	42b2      	cmp	r2, r6
 800d216:	4617      	mov	r7, r2
 800d218:	d30d      	bcc.n	800d236 <rshift+0x5e>
 800d21a:	601d      	str	r5, [r3, #0]
 800d21c:	b105      	cbz	r5, 800d220 <rshift+0x48>
 800d21e:	3304      	adds	r3, #4
 800d220:	42a3      	cmp	r3, r4
 800d222:	eba3 0204 	sub.w	r2, r3, r4
 800d226:	bf08      	it	eq
 800d228:	2300      	moveq	r3, #0
 800d22a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d22e:	6102      	str	r2, [r0, #16]
 800d230:	bf08      	it	eq
 800d232:	6143      	streq	r3, [r0, #20]
 800d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d236:	683f      	ldr	r7, [r7, #0]
 800d238:	fa07 f70c 	lsl.w	r7, r7, ip
 800d23c:	433d      	orrs	r5, r7
 800d23e:	f843 5b04 	str.w	r5, [r3], #4
 800d242:	f852 5b04 	ldr.w	r5, [r2], #4
 800d246:	40cd      	lsrs	r5, r1
 800d248:	e7e4      	b.n	800d214 <rshift+0x3c>
 800d24a:	4623      	mov	r3, r4
 800d24c:	e7e8      	b.n	800d220 <rshift+0x48>

0800d24e <__hexdig_fun>:
 800d24e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d252:	2b09      	cmp	r3, #9
 800d254:	d802      	bhi.n	800d25c <__hexdig_fun+0xe>
 800d256:	3820      	subs	r0, #32
 800d258:	b2c0      	uxtb	r0, r0
 800d25a:	4770      	bx	lr
 800d25c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d260:	2b05      	cmp	r3, #5
 800d262:	d801      	bhi.n	800d268 <__hexdig_fun+0x1a>
 800d264:	3847      	subs	r0, #71	; 0x47
 800d266:	e7f7      	b.n	800d258 <__hexdig_fun+0xa>
 800d268:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d26c:	2b05      	cmp	r3, #5
 800d26e:	d801      	bhi.n	800d274 <__hexdig_fun+0x26>
 800d270:	3827      	subs	r0, #39	; 0x27
 800d272:	e7f1      	b.n	800d258 <__hexdig_fun+0xa>
 800d274:	2000      	movs	r0, #0
 800d276:	4770      	bx	lr

0800d278 <__gethex>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	b08b      	sub	sp, #44	; 0x2c
 800d27e:	9002      	str	r0, [sp, #8]
 800d280:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d282:	468a      	mov	sl, r1
 800d284:	4690      	mov	r8, r2
 800d286:	9306      	str	r3, [sp, #24]
 800d288:	f000 fae0 	bl	800d84c <__localeconv_l>
 800d28c:	6803      	ldr	r3, [r0, #0]
 800d28e:	f04f 0b00 	mov.w	fp, #0
 800d292:	4618      	mov	r0, r3
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	f7f2 ff5b 	bl	8000150 <strlen>
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	9001      	str	r0, [sp, #4]
 800d29e:	4403      	add	r3, r0
 800d2a0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d2a4:	9307      	str	r3, [sp, #28]
 800d2a6:	f8da 3000 	ldr.w	r3, [sl]
 800d2aa:	3302      	adds	r3, #2
 800d2ac:	461f      	mov	r7, r3
 800d2ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d2b2:	2830      	cmp	r0, #48	; 0x30
 800d2b4:	d06c      	beq.n	800d390 <__gethex+0x118>
 800d2b6:	f7ff ffca 	bl	800d24e <__hexdig_fun>
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d16a      	bne.n	800d396 <__gethex+0x11e>
 800d2c0:	9a01      	ldr	r2, [sp, #4]
 800d2c2:	9903      	ldr	r1, [sp, #12]
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	f001 fc46 	bl	800eb56 <strncmp>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d166      	bne.n	800d39c <__gethex+0x124>
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	5cf8      	ldrb	r0, [r7, r3]
 800d2d2:	18fe      	adds	r6, r7, r3
 800d2d4:	f7ff ffbb 	bl	800d24e <__hexdig_fun>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d062      	beq.n	800d3a2 <__gethex+0x12a>
 800d2dc:	4633      	mov	r3, r6
 800d2de:	7818      	ldrb	r0, [r3, #0]
 800d2e0:	461f      	mov	r7, r3
 800d2e2:	2830      	cmp	r0, #48	; 0x30
 800d2e4:	f103 0301 	add.w	r3, r3, #1
 800d2e8:	d0f9      	beq.n	800d2de <__gethex+0x66>
 800d2ea:	f7ff ffb0 	bl	800d24e <__hexdig_fun>
 800d2ee:	fab0 f580 	clz	r5, r0
 800d2f2:	4634      	mov	r4, r6
 800d2f4:	f04f 0b01 	mov.w	fp, #1
 800d2f8:	096d      	lsrs	r5, r5, #5
 800d2fa:	463a      	mov	r2, r7
 800d2fc:	4616      	mov	r6, r2
 800d2fe:	7830      	ldrb	r0, [r6, #0]
 800d300:	3201      	adds	r2, #1
 800d302:	f7ff ffa4 	bl	800d24e <__hexdig_fun>
 800d306:	2800      	cmp	r0, #0
 800d308:	d1f8      	bne.n	800d2fc <__gethex+0x84>
 800d30a:	9a01      	ldr	r2, [sp, #4]
 800d30c:	9903      	ldr	r1, [sp, #12]
 800d30e:	4630      	mov	r0, r6
 800d310:	f001 fc21 	bl	800eb56 <strncmp>
 800d314:	b950      	cbnz	r0, 800d32c <__gethex+0xb4>
 800d316:	b954      	cbnz	r4, 800d32e <__gethex+0xb6>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	18f4      	adds	r4, r6, r3
 800d31c:	4622      	mov	r2, r4
 800d31e:	4616      	mov	r6, r2
 800d320:	7830      	ldrb	r0, [r6, #0]
 800d322:	3201      	adds	r2, #1
 800d324:	f7ff ff93 	bl	800d24e <__hexdig_fun>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1f8      	bne.n	800d31e <__gethex+0xa6>
 800d32c:	b10c      	cbz	r4, 800d332 <__gethex+0xba>
 800d32e:	1ba4      	subs	r4, r4, r6
 800d330:	00a4      	lsls	r4, r4, #2
 800d332:	7833      	ldrb	r3, [r6, #0]
 800d334:	2b50      	cmp	r3, #80	; 0x50
 800d336:	d001      	beq.n	800d33c <__gethex+0xc4>
 800d338:	2b70      	cmp	r3, #112	; 0x70
 800d33a:	d140      	bne.n	800d3be <__gethex+0x146>
 800d33c:	7873      	ldrb	r3, [r6, #1]
 800d33e:	2b2b      	cmp	r3, #43	; 0x2b
 800d340:	d031      	beq.n	800d3a6 <__gethex+0x12e>
 800d342:	2b2d      	cmp	r3, #45	; 0x2d
 800d344:	d033      	beq.n	800d3ae <__gethex+0x136>
 800d346:	f04f 0900 	mov.w	r9, #0
 800d34a:	1c71      	adds	r1, r6, #1
 800d34c:	7808      	ldrb	r0, [r1, #0]
 800d34e:	f7ff ff7e 	bl	800d24e <__hexdig_fun>
 800d352:	1e43      	subs	r3, r0, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b18      	cmp	r3, #24
 800d358:	d831      	bhi.n	800d3be <__gethex+0x146>
 800d35a:	f1a0 0210 	sub.w	r2, r0, #16
 800d35e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d362:	f7ff ff74 	bl	800d24e <__hexdig_fun>
 800d366:	1e43      	subs	r3, r0, #1
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b18      	cmp	r3, #24
 800d36c:	d922      	bls.n	800d3b4 <__gethex+0x13c>
 800d36e:	f1b9 0f00 	cmp.w	r9, #0
 800d372:	d000      	beq.n	800d376 <__gethex+0xfe>
 800d374:	4252      	negs	r2, r2
 800d376:	4414      	add	r4, r2
 800d378:	f8ca 1000 	str.w	r1, [sl]
 800d37c:	b30d      	cbz	r5, 800d3c2 <__gethex+0x14a>
 800d37e:	f1bb 0f00 	cmp.w	fp, #0
 800d382:	bf0c      	ite	eq
 800d384:	2706      	moveq	r7, #6
 800d386:	2700      	movne	r7, #0
 800d388:	4638      	mov	r0, r7
 800d38a:	b00b      	add	sp, #44	; 0x2c
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	f10b 0b01 	add.w	fp, fp, #1
 800d394:	e78a      	b.n	800d2ac <__gethex+0x34>
 800d396:	2500      	movs	r5, #0
 800d398:	462c      	mov	r4, r5
 800d39a:	e7ae      	b.n	800d2fa <__gethex+0x82>
 800d39c:	463e      	mov	r6, r7
 800d39e:	2501      	movs	r5, #1
 800d3a0:	e7c7      	b.n	800d332 <__gethex+0xba>
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	e7fb      	b.n	800d39e <__gethex+0x126>
 800d3a6:	f04f 0900 	mov.w	r9, #0
 800d3aa:	1cb1      	adds	r1, r6, #2
 800d3ac:	e7ce      	b.n	800d34c <__gethex+0xd4>
 800d3ae:	f04f 0901 	mov.w	r9, #1
 800d3b2:	e7fa      	b.n	800d3aa <__gethex+0x132>
 800d3b4:	230a      	movs	r3, #10
 800d3b6:	fb03 0202 	mla	r2, r3, r2, r0
 800d3ba:	3a10      	subs	r2, #16
 800d3bc:	e7cf      	b.n	800d35e <__gethex+0xe6>
 800d3be:	4631      	mov	r1, r6
 800d3c0:	e7da      	b.n	800d378 <__gethex+0x100>
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	1bf3      	subs	r3, r6, r7
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	2b07      	cmp	r3, #7
 800d3ca:	dc49      	bgt.n	800d460 <__gethex+0x1e8>
 800d3cc:	9802      	ldr	r0, [sp, #8]
 800d3ce:	f000 fa80 	bl	800d8d2 <_Balloc>
 800d3d2:	f04f 0b00 	mov.w	fp, #0
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	46da      	mov	sl, fp
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	f100 0914 	add.w	r9, r0, #20
 800d3e0:	f1c3 0301 	rsb	r3, r3, #1
 800d3e4:	f8cd 9010 	str.w	r9, [sp, #16]
 800d3e8:	9308      	str	r3, [sp, #32]
 800d3ea:	42b7      	cmp	r7, r6
 800d3ec:	d33b      	bcc.n	800d466 <__gethex+0x1ee>
 800d3ee:	9804      	ldr	r0, [sp, #16]
 800d3f0:	f840 ab04 	str.w	sl, [r0], #4
 800d3f4:	eba0 0009 	sub.w	r0, r0, r9
 800d3f8:	1080      	asrs	r0, r0, #2
 800d3fa:	6128      	str	r0, [r5, #16]
 800d3fc:	0147      	lsls	r7, r0, #5
 800d3fe:	4650      	mov	r0, sl
 800d400:	f000 fb2b 	bl	800da5a <__hi0bits>
 800d404:	f8d8 6000 	ldr.w	r6, [r8]
 800d408:	1a3f      	subs	r7, r7, r0
 800d40a:	42b7      	cmp	r7, r6
 800d40c:	dd64      	ble.n	800d4d8 <__gethex+0x260>
 800d40e:	1bbf      	subs	r7, r7, r6
 800d410:	4639      	mov	r1, r7
 800d412:	4628      	mov	r0, r5
 800d414:	f000 fe35 	bl	800e082 <__any_on>
 800d418:	4682      	mov	sl, r0
 800d41a:	b178      	cbz	r0, 800d43c <__gethex+0x1c4>
 800d41c:	f04f 0a01 	mov.w	sl, #1
 800d420:	1e7b      	subs	r3, r7, #1
 800d422:	1159      	asrs	r1, r3, #5
 800d424:	f003 021f 	and.w	r2, r3, #31
 800d428:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d42c:	fa0a f202 	lsl.w	r2, sl, r2
 800d430:	420a      	tst	r2, r1
 800d432:	d003      	beq.n	800d43c <__gethex+0x1c4>
 800d434:	4553      	cmp	r3, sl
 800d436:	dc46      	bgt.n	800d4c6 <__gethex+0x24e>
 800d438:	f04f 0a02 	mov.w	sl, #2
 800d43c:	4639      	mov	r1, r7
 800d43e:	4628      	mov	r0, r5
 800d440:	f7ff feca 	bl	800d1d8 <rshift>
 800d444:	443c      	add	r4, r7
 800d446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d44a:	42a3      	cmp	r3, r4
 800d44c:	da52      	bge.n	800d4f4 <__gethex+0x27c>
 800d44e:	4629      	mov	r1, r5
 800d450:	9802      	ldr	r0, [sp, #8]
 800d452:	f000 fa72 	bl	800d93a <_Bfree>
 800d456:	2300      	movs	r3, #0
 800d458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d45a:	27a3      	movs	r7, #163	; 0xa3
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	e793      	b.n	800d388 <__gethex+0x110>
 800d460:	3101      	adds	r1, #1
 800d462:	105b      	asrs	r3, r3, #1
 800d464:	e7b0      	b.n	800d3c8 <__gethex+0x150>
 800d466:	1e73      	subs	r3, r6, #1
 800d468:	9305      	str	r3, [sp, #20]
 800d46a:	9a07      	ldr	r2, [sp, #28]
 800d46c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d470:	4293      	cmp	r3, r2
 800d472:	d018      	beq.n	800d4a6 <__gethex+0x22e>
 800d474:	f1bb 0f20 	cmp.w	fp, #32
 800d478:	d107      	bne.n	800d48a <__gethex+0x212>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	f8c3 a000 	str.w	sl, [r3]
 800d480:	f04f 0a00 	mov.w	sl, #0
 800d484:	46d3      	mov	fp, sl
 800d486:	3304      	adds	r3, #4
 800d488:	9304      	str	r3, [sp, #16]
 800d48a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d48e:	f7ff fede 	bl	800d24e <__hexdig_fun>
 800d492:	f000 000f 	and.w	r0, r0, #15
 800d496:	fa00 f00b 	lsl.w	r0, r0, fp
 800d49a:	ea4a 0a00 	orr.w	sl, sl, r0
 800d49e:	f10b 0b04 	add.w	fp, fp, #4
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	e00d      	b.n	800d4c2 <__gethex+0x24a>
 800d4a6:	9b05      	ldr	r3, [sp, #20]
 800d4a8:	9a08      	ldr	r2, [sp, #32]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	42bb      	cmp	r3, r7
 800d4ae:	d3e1      	bcc.n	800d474 <__gethex+0x1fc>
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	9a01      	ldr	r2, [sp, #4]
 800d4b4:	9903      	ldr	r1, [sp, #12]
 800d4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b8:	f001 fb4d 	bl	800eb56 <strncmp>
 800d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1d8      	bne.n	800d474 <__gethex+0x1fc>
 800d4c2:	461e      	mov	r6, r3
 800d4c4:	e791      	b.n	800d3ea <__gethex+0x172>
 800d4c6:	1eb9      	subs	r1, r7, #2
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f000 fdda 	bl	800e082 <__any_on>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d0b2      	beq.n	800d438 <__gethex+0x1c0>
 800d4d2:	f04f 0a03 	mov.w	sl, #3
 800d4d6:	e7b1      	b.n	800d43c <__gethex+0x1c4>
 800d4d8:	da09      	bge.n	800d4ee <__gethex+0x276>
 800d4da:	1bf7      	subs	r7, r6, r7
 800d4dc:	4629      	mov	r1, r5
 800d4de:	463a      	mov	r2, r7
 800d4e0:	9802      	ldr	r0, [sp, #8]
 800d4e2:	f000 fbf5 	bl	800dcd0 <__lshift>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	1be4      	subs	r4, r4, r7
 800d4ea:	f100 0914 	add.w	r9, r0, #20
 800d4ee:	f04f 0a00 	mov.w	sl, #0
 800d4f2:	e7a8      	b.n	800d446 <__gethex+0x1ce>
 800d4f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d4f8:	42a0      	cmp	r0, r4
 800d4fa:	dd6b      	ble.n	800d5d4 <__gethex+0x35c>
 800d4fc:	1b04      	subs	r4, r0, r4
 800d4fe:	42a6      	cmp	r6, r4
 800d500:	dc2e      	bgt.n	800d560 <__gethex+0x2e8>
 800d502:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d022      	beq.n	800d550 <__gethex+0x2d8>
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	d024      	beq.n	800d558 <__gethex+0x2e0>
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d115      	bne.n	800d53e <__gethex+0x2c6>
 800d512:	42a6      	cmp	r6, r4
 800d514:	d113      	bne.n	800d53e <__gethex+0x2c6>
 800d516:	2e01      	cmp	r6, #1
 800d518:	dc0b      	bgt.n	800d532 <__gethex+0x2ba>
 800d51a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d51e:	9a06      	ldr	r2, [sp, #24]
 800d520:	2762      	movs	r7, #98	; 0x62
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	2301      	movs	r3, #1
 800d526:	612b      	str	r3, [r5, #16]
 800d528:	f8c9 3000 	str.w	r3, [r9]
 800d52c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d52e:	601d      	str	r5, [r3, #0]
 800d530:	e72a      	b.n	800d388 <__gethex+0x110>
 800d532:	1e71      	subs	r1, r6, #1
 800d534:	4628      	mov	r0, r5
 800d536:	f000 fda4 	bl	800e082 <__any_on>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d1ed      	bne.n	800d51a <__gethex+0x2a2>
 800d53e:	4629      	mov	r1, r5
 800d540:	9802      	ldr	r0, [sp, #8]
 800d542:	f000 f9fa 	bl	800d93a <_Bfree>
 800d546:	2300      	movs	r3, #0
 800d548:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d54a:	2750      	movs	r7, #80	; 0x50
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	e71b      	b.n	800d388 <__gethex+0x110>
 800d550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d552:	2b00      	cmp	r3, #0
 800d554:	d0e1      	beq.n	800d51a <__gethex+0x2a2>
 800d556:	e7f2      	b.n	800d53e <__gethex+0x2c6>
 800d558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1dd      	bne.n	800d51a <__gethex+0x2a2>
 800d55e:	e7ee      	b.n	800d53e <__gethex+0x2c6>
 800d560:	1e67      	subs	r7, r4, #1
 800d562:	f1ba 0f00 	cmp.w	sl, #0
 800d566:	d132      	bne.n	800d5ce <__gethex+0x356>
 800d568:	b127      	cbz	r7, 800d574 <__gethex+0x2fc>
 800d56a:	4639      	mov	r1, r7
 800d56c:	4628      	mov	r0, r5
 800d56e:	f000 fd88 	bl	800e082 <__any_on>
 800d572:	4682      	mov	sl, r0
 800d574:	2301      	movs	r3, #1
 800d576:	117a      	asrs	r2, r7, #5
 800d578:	f007 071f 	and.w	r7, r7, #31
 800d57c:	fa03 f707 	lsl.w	r7, r3, r7
 800d580:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d584:	4621      	mov	r1, r4
 800d586:	421f      	tst	r7, r3
 800d588:	f04f 0702 	mov.w	r7, #2
 800d58c:	4628      	mov	r0, r5
 800d58e:	bf18      	it	ne
 800d590:	f04a 0a02 	orrne.w	sl, sl, #2
 800d594:	1b36      	subs	r6, r6, r4
 800d596:	f7ff fe1f 	bl	800d1d8 <rshift>
 800d59a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d59e:	f1ba 0f00 	cmp.w	sl, #0
 800d5a2:	d048      	beq.n	800d636 <__gethex+0x3be>
 800d5a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d015      	beq.n	800d5d8 <__gethex+0x360>
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d017      	beq.n	800d5e0 <__gethex+0x368>
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d109      	bne.n	800d5c8 <__gethex+0x350>
 800d5b4:	f01a 0f02 	tst.w	sl, #2
 800d5b8:	d006      	beq.n	800d5c8 <__gethex+0x350>
 800d5ba:	f8d9 3000 	ldr.w	r3, [r9]
 800d5be:	ea4a 0a03 	orr.w	sl, sl, r3
 800d5c2:	f01a 0f01 	tst.w	sl, #1
 800d5c6:	d10e      	bne.n	800d5e6 <__gethex+0x36e>
 800d5c8:	f047 0710 	orr.w	r7, r7, #16
 800d5cc:	e033      	b.n	800d636 <__gethex+0x3be>
 800d5ce:	f04f 0a01 	mov.w	sl, #1
 800d5d2:	e7cf      	b.n	800d574 <__gethex+0x2fc>
 800d5d4:	2701      	movs	r7, #1
 800d5d6:	e7e2      	b.n	800d59e <__gethex+0x326>
 800d5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5da:	f1c3 0301 	rsb	r3, r3, #1
 800d5de:	9315      	str	r3, [sp, #84]	; 0x54
 800d5e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f0      	beq.n	800d5c8 <__gethex+0x350>
 800d5e6:	f04f 0c00 	mov.w	ip, #0
 800d5ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d5ee:	f105 0314 	add.w	r3, r5, #20
 800d5f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d5f6:	eb03 010a 	add.w	r1, r3, sl
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d600:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d604:	d01c      	beq.n	800d640 <__gethex+0x3c8>
 800d606:	3201      	adds	r2, #1
 800d608:	6002      	str	r2, [r0, #0]
 800d60a:	2f02      	cmp	r7, #2
 800d60c:	f105 0314 	add.w	r3, r5, #20
 800d610:	d138      	bne.n	800d684 <__gethex+0x40c>
 800d612:	f8d8 2000 	ldr.w	r2, [r8]
 800d616:	3a01      	subs	r2, #1
 800d618:	42b2      	cmp	r2, r6
 800d61a:	d10a      	bne.n	800d632 <__gethex+0x3ba>
 800d61c:	2201      	movs	r2, #1
 800d61e:	1171      	asrs	r1, r6, #5
 800d620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d624:	f006 061f 	and.w	r6, r6, #31
 800d628:	fa02 f606 	lsl.w	r6, r2, r6
 800d62c:	421e      	tst	r6, r3
 800d62e:	bf18      	it	ne
 800d630:	4617      	movne	r7, r2
 800d632:	f047 0720 	orr.w	r7, r7, #32
 800d636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d638:	601d      	str	r5, [r3, #0]
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	601c      	str	r4, [r3, #0]
 800d63e:	e6a3      	b.n	800d388 <__gethex+0x110>
 800d640:	4299      	cmp	r1, r3
 800d642:	f843 cc04 	str.w	ip, [r3, #-4]
 800d646:	d8d8      	bhi.n	800d5fa <__gethex+0x382>
 800d648:	68ab      	ldr	r3, [r5, #8]
 800d64a:	4599      	cmp	r9, r3
 800d64c:	db12      	blt.n	800d674 <__gethex+0x3fc>
 800d64e:	6869      	ldr	r1, [r5, #4]
 800d650:	9802      	ldr	r0, [sp, #8]
 800d652:	3101      	adds	r1, #1
 800d654:	f000 f93d 	bl	800d8d2 <_Balloc>
 800d658:	4683      	mov	fp, r0
 800d65a:	692a      	ldr	r2, [r5, #16]
 800d65c:	f105 010c 	add.w	r1, r5, #12
 800d660:	3202      	adds	r2, #2
 800d662:	0092      	lsls	r2, r2, #2
 800d664:	300c      	adds	r0, #12
 800d666:	f000 f929 	bl	800d8bc <memcpy>
 800d66a:	4629      	mov	r1, r5
 800d66c:	9802      	ldr	r0, [sp, #8]
 800d66e:	f000 f964 	bl	800d93a <_Bfree>
 800d672:	465d      	mov	r5, fp
 800d674:	692b      	ldr	r3, [r5, #16]
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	612a      	str	r2, [r5, #16]
 800d67a:	2201      	movs	r2, #1
 800d67c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d680:	615a      	str	r2, [r3, #20]
 800d682:	e7c2      	b.n	800d60a <__gethex+0x392>
 800d684:	692a      	ldr	r2, [r5, #16]
 800d686:	454a      	cmp	r2, r9
 800d688:	dd0b      	ble.n	800d6a2 <__gethex+0x42a>
 800d68a:	2101      	movs	r1, #1
 800d68c:	4628      	mov	r0, r5
 800d68e:	f7ff fda3 	bl	800d1d8 <rshift>
 800d692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d696:	3401      	adds	r4, #1
 800d698:	42a3      	cmp	r3, r4
 800d69a:	f6ff aed8 	blt.w	800d44e <__gethex+0x1d6>
 800d69e:	2701      	movs	r7, #1
 800d6a0:	e7c7      	b.n	800d632 <__gethex+0x3ba>
 800d6a2:	f016 061f 	ands.w	r6, r6, #31
 800d6a6:	d0fa      	beq.n	800d69e <__gethex+0x426>
 800d6a8:	449a      	add	sl, r3
 800d6aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d6ae:	f000 f9d4 	bl	800da5a <__hi0bits>
 800d6b2:	f1c6 0620 	rsb	r6, r6, #32
 800d6b6:	42b0      	cmp	r0, r6
 800d6b8:	dbe7      	blt.n	800d68a <__gethex+0x412>
 800d6ba:	e7f0      	b.n	800d69e <__gethex+0x426>

0800d6bc <L_shift>:
 800d6bc:	f1c2 0208 	rsb	r2, r2, #8
 800d6c0:	0092      	lsls	r2, r2, #2
 800d6c2:	b570      	push	{r4, r5, r6, lr}
 800d6c4:	f1c2 0620 	rsb	r6, r2, #32
 800d6c8:	6843      	ldr	r3, [r0, #4]
 800d6ca:	6804      	ldr	r4, [r0, #0]
 800d6cc:	fa03 f506 	lsl.w	r5, r3, r6
 800d6d0:	432c      	orrs	r4, r5
 800d6d2:	40d3      	lsrs	r3, r2
 800d6d4:	6004      	str	r4, [r0, #0]
 800d6d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6da:	4288      	cmp	r0, r1
 800d6dc:	d3f4      	bcc.n	800d6c8 <L_shift+0xc>
 800d6de:	bd70      	pop	{r4, r5, r6, pc}

0800d6e0 <__match>:
 800d6e0:	b530      	push	{r4, r5, lr}
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ea:	b914      	cbnz	r4, 800d6f2 <__match+0x12>
 800d6ec:	6003      	str	r3, [r0, #0]
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	bd30      	pop	{r4, r5, pc}
 800d6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d6fa:	2d19      	cmp	r5, #25
 800d6fc:	bf98      	it	ls
 800d6fe:	3220      	addls	r2, #32
 800d700:	42a2      	cmp	r2, r4
 800d702:	d0f0      	beq.n	800d6e6 <__match+0x6>
 800d704:	2000      	movs	r0, #0
 800d706:	e7f3      	b.n	800d6f0 <__match+0x10>

0800d708 <__hexnan>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	2500      	movs	r5, #0
 800d70e:	680b      	ldr	r3, [r1, #0]
 800d710:	4682      	mov	sl, r0
 800d712:	115f      	asrs	r7, r3, #5
 800d714:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d718:	f013 031f 	ands.w	r3, r3, #31
 800d71c:	bf18      	it	ne
 800d71e:	3704      	addne	r7, #4
 800d720:	1f3e      	subs	r6, r7, #4
 800d722:	4690      	mov	r8, r2
 800d724:	46b1      	mov	r9, r6
 800d726:	4634      	mov	r4, r6
 800d728:	46ab      	mov	fp, r5
 800d72a:	b087      	sub	sp, #28
 800d72c:	6801      	ldr	r1, [r0, #0]
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	f847 5c04 	str.w	r5, [r7, #-4]
 800d734:	9502      	str	r5, [sp, #8]
 800d736:	784a      	ldrb	r2, [r1, #1]
 800d738:	1c4b      	adds	r3, r1, #1
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	b342      	cbz	r2, 800d790 <__hexnan+0x88>
 800d73e:	4610      	mov	r0, r2
 800d740:	9105      	str	r1, [sp, #20]
 800d742:	9204      	str	r2, [sp, #16]
 800d744:	f7ff fd83 	bl	800d24e <__hexdig_fun>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d143      	bne.n	800d7d4 <__hexnan+0xcc>
 800d74c:	9a04      	ldr	r2, [sp, #16]
 800d74e:	9905      	ldr	r1, [sp, #20]
 800d750:	2a20      	cmp	r2, #32
 800d752:	d818      	bhi.n	800d786 <__hexnan+0x7e>
 800d754:	9b02      	ldr	r3, [sp, #8]
 800d756:	459b      	cmp	fp, r3
 800d758:	dd13      	ble.n	800d782 <__hexnan+0x7a>
 800d75a:	454c      	cmp	r4, r9
 800d75c:	d206      	bcs.n	800d76c <__hexnan+0x64>
 800d75e:	2d07      	cmp	r5, #7
 800d760:	dc04      	bgt.n	800d76c <__hexnan+0x64>
 800d762:	462a      	mov	r2, r5
 800d764:	4649      	mov	r1, r9
 800d766:	4620      	mov	r0, r4
 800d768:	f7ff ffa8 	bl	800d6bc <L_shift>
 800d76c:	4544      	cmp	r4, r8
 800d76e:	d944      	bls.n	800d7fa <__hexnan+0xf2>
 800d770:	2300      	movs	r3, #0
 800d772:	f1a4 0904 	sub.w	r9, r4, #4
 800d776:	f844 3c04 	str.w	r3, [r4, #-4]
 800d77a:	461d      	mov	r5, r3
 800d77c:	464c      	mov	r4, r9
 800d77e:	f8cd b008 	str.w	fp, [sp, #8]
 800d782:	9903      	ldr	r1, [sp, #12]
 800d784:	e7d7      	b.n	800d736 <__hexnan+0x2e>
 800d786:	2a29      	cmp	r2, #41	; 0x29
 800d788:	d14a      	bne.n	800d820 <__hexnan+0x118>
 800d78a:	3102      	adds	r1, #2
 800d78c:	f8ca 1000 	str.w	r1, [sl]
 800d790:	f1bb 0f00 	cmp.w	fp, #0
 800d794:	d044      	beq.n	800d820 <__hexnan+0x118>
 800d796:	454c      	cmp	r4, r9
 800d798:	d206      	bcs.n	800d7a8 <__hexnan+0xa0>
 800d79a:	2d07      	cmp	r5, #7
 800d79c:	dc04      	bgt.n	800d7a8 <__hexnan+0xa0>
 800d79e:	462a      	mov	r2, r5
 800d7a0:	4649      	mov	r1, r9
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f7ff ff8a 	bl	800d6bc <L_shift>
 800d7a8:	4544      	cmp	r4, r8
 800d7aa:	d928      	bls.n	800d7fe <__hexnan+0xf6>
 800d7ac:	4643      	mov	r3, r8
 800d7ae:	f854 2b04 	ldr.w	r2, [r4], #4
 800d7b2:	42a6      	cmp	r6, r4
 800d7b4:	f843 2b04 	str.w	r2, [r3], #4
 800d7b8:	d2f9      	bcs.n	800d7ae <__hexnan+0xa6>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f843 2b04 	str.w	r2, [r3], #4
 800d7c0:	429e      	cmp	r6, r3
 800d7c2:	d2fb      	bcs.n	800d7bc <__hexnan+0xb4>
 800d7c4:	6833      	ldr	r3, [r6, #0]
 800d7c6:	b91b      	cbnz	r3, 800d7d0 <__hexnan+0xc8>
 800d7c8:	4546      	cmp	r6, r8
 800d7ca:	d127      	bne.n	800d81c <__hexnan+0x114>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	6033      	str	r3, [r6, #0]
 800d7d0:	2005      	movs	r0, #5
 800d7d2:	e026      	b.n	800d822 <__hexnan+0x11a>
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	2d08      	cmp	r5, #8
 800d7d8:	f10b 0b01 	add.w	fp, fp, #1
 800d7dc:	dd06      	ble.n	800d7ec <__hexnan+0xe4>
 800d7de:	4544      	cmp	r4, r8
 800d7e0:	d9cf      	bls.n	800d782 <__hexnan+0x7a>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	2501      	movs	r5, #1
 800d7e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7ea:	3c04      	subs	r4, #4
 800d7ec:	6822      	ldr	r2, [r4, #0]
 800d7ee:	f000 000f 	and.w	r0, r0, #15
 800d7f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7f6:	6020      	str	r0, [r4, #0]
 800d7f8:	e7c3      	b.n	800d782 <__hexnan+0x7a>
 800d7fa:	2508      	movs	r5, #8
 800d7fc:	e7c1      	b.n	800d782 <__hexnan+0x7a>
 800d7fe:	9b01      	ldr	r3, [sp, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d0df      	beq.n	800d7c4 <__hexnan+0xbc>
 800d804:	f04f 32ff 	mov.w	r2, #4294967295
 800d808:	f1c3 0320 	rsb	r3, r3, #32
 800d80c:	fa22 f303 	lsr.w	r3, r2, r3
 800d810:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d814:	401a      	ands	r2, r3
 800d816:	f847 2c04 	str.w	r2, [r7, #-4]
 800d81a:	e7d3      	b.n	800d7c4 <__hexnan+0xbc>
 800d81c:	3e04      	subs	r6, #4
 800d81e:	e7d1      	b.n	800d7c4 <__hexnan+0xbc>
 800d820:	2004      	movs	r0, #4
 800d822:	b007      	add	sp, #28
 800d824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d828 <__locale_ctype_ptr_l>:
 800d828:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d82c:	4770      	bx	lr
	...

0800d830 <__locale_ctype_ptr>:
 800d830:	4b04      	ldr	r3, [pc, #16]	; (800d844 <__locale_ctype_ptr+0x14>)
 800d832:	4a05      	ldr	r2, [pc, #20]	; (800d848 <__locale_ctype_ptr+0x18>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6a1b      	ldr	r3, [r3, #32]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	bf08      	it	eq
 800d83c:	4613      	moveq	r3, r2
 800d83e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800d842:	4770      	bx	lr
 800d844:	2000019c 	.word	0x2000019c
 800d848:	20000200 	.word	0x20000200

0800d84c <__localeconv_l>:
 800d84c:	30f0      	adds	r0, #240	; 0xf0
 800d84e:	4770      	bx	lr

0800d850 <_localeconv_r>:
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <_localeconv_r+0x14>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6a18      	ldr	r0, [r3, #32]
 800d856:	4b04      	ldr	r3, [pc, #16]	; (800d868 <_localeconv_r+0x18>)
 800d858:	2800      	cmp	r0, #0
 800d85a:	bf08      	it	eq
 800d85c:	4618      	moveq	r0, r3
 800d85e:	30f0      	adds	r0, #240	; 0xf0
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	2000019c 	.word	0x2000019c
 800d868:	20000200 	.word	0x20000200

0800d86c <malloc>:
 800d86c:	4b02      	ldr	r3, [pc, #8]	; (800d878 <malloc+0xc>)
 800d86e:	4601      	mov	r1, r0
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	f000 bc81 	b.w	800e178 <_malloc_r>
 800d876:	bf00      	nop
 800d878:	2000019c 	.word	0x2000019c

0800d87c <__ascii_mbtowc>:
 800d87c:	b082      	sub	sp, #8
 800d87e:	b901      	cbnz	r1, 800d882 <__ascii_mbtowc+0x6>
 800d880:	a901      	add	r1, sp, #4
 800d882:	b142      	cbz	r2, 800d896 <__ascii_mbtowc+0x1a>
 800d884:	b14b      	cbz	r3, 800d89a <__ascii_mbtowc+0x1e>
 800d886:	7813      	ldrb	r3, [r2, #0]
 800d888:	600b      	str	r3, [r1, #0]
 800d88a:	7812      	ldrb	r2, [r2, #0]
 800d88c:	1c10      	adds	r0, r2, #0
 800d88e:	bf18      	it	ne
 800d890:	2001      	movne	r0, #1
 800d892:	b002      	add	sp, #8
 800d894:	4770      	bx	lr
 800d896:	4610      	mov	r0, r2
 800d898:	e7fb      	b.n	800d892 <__ascii_mbtowc+0x16>
 800d89a:	f06f 0001 	mvn.w	r0, #1
 800d89e:	e7f8      	b.n	800d892 <__ascii_mbtowc+0x16>

0800d8a0 <memchr>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	b2c9      	uxtb	r1, r1
 800d8a4:	4402      	add	r2, r0
 800d8a6:	4290      	cmp	r0, r2
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	d101      	bne.n	800d8b0 <memchr+0x10>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e003      	b.n	800d8b8 <memchr+0x18>
 800d8b0:	781c      	ldrb	r4, [r3, #0]
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	428c      	cmp	r4, r1
 800d8b6:	d1f6      	bne.n	800d8a6 <memchr+0x6>
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <memcpy>:
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	1e43      	subs	r3, r0, #1
 800d8c0:	440a      	add	r2, r1
 800d8c2:	4291      	cmp	r1, r2
 800d8c4:	d100      	bne.n	800d8c8 <memcpy+0xc>
 800d8c6:	bd10      	pop	{r4, pc}
 800d8c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8d0:	e7f7      	b.n	800d8c2 <memcpy+0x6>

0800d8d2 <_Balloc>:
 800d8d2:	b570      	push	{r4, r5, r6, lr}
 800d8d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	460e      	mov	r6, r1
 800d8da:	b93d      	cbnz	r5, 800d8ec <_Balloc+0x1a>
 800d8dc:	2010      	movs	r0, #16
 800d8de:	f7ff ffc5 	bl	800d86c <malloc>
 800d8e2:	6260      	str	r0, [r4, #36]	; 0x24
 800d8e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8e8:	6005      	str	r5, [r0, #0]
 800d8ea:	60c5      	str	r5, [r0, #12]
 800d8ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8ee:	68eb      	ldr	r3, [r5, #12]
 800d8f0:	b183      	cbz	r3, 800d914 <_Balloc+0x42>
 800d8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d8fa:	b9b8      	cbnz	r0, 800d92c <_Balloc+0x5a>
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	fa01 f506 	lsl.w	r5, r1, r6
 800d902:	1d6a      	adds	r2, r5, #5
 800d904:	0092      	lsls	r2, r2, #2
 800d906:	4620      	mov	r0, r4
 800d908:	f000 fbdc 	bl	800e0c4 <_calloc_r>
 800d90c:	b160      	cbz	r0, 800d928 <_Balloc+0x56>
 800d90e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d912:	e00e      	b.n	800d932 <_Balloc+0x60>
 800d914:	2221      	movs	r2, #33	; 0x21
 800d916:	2104      	movs	r1, #4
 800d918:	4620      	mov	r0, r4
 800d91a:	f000 fbd3 	bl	800e0c4 <_calloc_r>
 800d91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d920:	60e8      	str	r0, [r5, #12]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e4      	bne.n	800d8f2 <_Balloc+0x20>
 800d928:	2000      	movs	r0, #0
 800d92a:	bd70      	pop	{r4, r5, r6, pc}
 800d92c:	6802      	ldr	r2, [r0, #0]
 800d92e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d932:	2300      	movs	r3, #0
 800d934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d938:	e7f7      	b.n	800d92a <_Balloc+0x58>

0800d93a <_Bfree>:
 800d93a:	b570      	push	{r4, r5, r6, lr}
 800d93c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d93e:	4606      	mov	r6, r0
 800d940:	460d      	mov	r5, r1
 800d942:	b93c      	cbnz	r4, 800d954 <_Bfree+0x1a>
 800d944:	2010      	movs	r0, #16
 800d946:	f7ff ff91 	bl	800d86c <malloc>
 800d94a:	6270      	str	r0, [r6, #36]	; 0x24
 800d94c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d950:	6004      	str	r4, [r0, #0]
 800d952:	60c4      	str	r4, [r0, #12]
 800d954:	b13d      	cbz	r5, 800d966 <_Bfree+0x2c>
 800d956:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d958:	686a      	ldr	r2, [r5, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d960:	6029      	str	r1, [r5, #0]
 800d962:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d966:	bd70      	pop	{r4, r5, r6, pc}

0800d968 <__multadd>:
 800d968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96c:	461f      	mov	r7, r3
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	2300      	movs	r3, #0
 800d974:	690d      	ldr	r5, [r1, #16]
 800d976:	f101 0c14 	add.w	ip, r1, #20
 800d97a:	f8dc 0000 	ldr.w	r0, [ip]
 800d97e:	3301      	adds	r3, #1
 800d980:	b281      	uxth	r1, r0
 800d982:	fb02 7101 	mla	r1, r2, r1, r7
 800d986:	0c00      	lsrs	r0, r0, #16
 800d988:	0c0f      	lsrs	r7, r1, #16
 800d98a:	fb02 7000 	mla	r0, r2, r0, r7
 800d98e:	b289      	uxth	r1, r1
 800d990:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d994:	429d      	cmp	r5, r3
 800d996:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d99a:	f84c 1b04 	str.w	r1, [ip], #4
 800d99e:	dcec      	bgt.n	800d97a <__multadd+0x12>
 800d9a0:	b1d7      	cbz	r7, 800d9d8 <__multadd+0x70>
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	42ab      	cmp	r3, r5
 800d9a6:	dc12      	bgt.n	800d9ce <__multadd+0x66>
 800d9a8:	6861      	ldr	r1, [r4, #4]
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	3101      	adds	r1, #1
 800d9ae:	f7ff ff90 	bl	800d8d2 <_Balloc>
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	6922      	ldr	r2, [r4, #16]
 800d9b6:	f104 010c 	add.w	r1, r4, #12
 800d9ba:	3202      	adds	r2, #2
 800d9bc:	0092      	lsls	r2, r2, #2
 800d9be:	300c      	adds	r0, #12
 800d9c0:	f7ff ff7c 	bl	800d8bc <memcpy>
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f7ff ffb7 	bl	800d93a <_Bfree>
 800d9cc:	4644      	mov	r4, r8
 800d9ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9d2:	3501      	adds	r5, #1
 800d9d4:	615f      	str	r7, [r3, #20]
 800d9d6:	6125      	str	r5, [r4, #16]
 800d9d8:	4620      	mov	r0, r4
 800d9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9de <__s2b>:
 800d9de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e2:	4615      	mov	r5, r2
 800d9e4:	2209      	movs	r2, #9
 800d9e6:	461f      	mov	r7, r3
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	db20      	blt.n	800da3c <__s2b+0x5e>
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f7ff ff69 	bl	800d8d2 <_Balloc>
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	2d09      	cmp	r5, #9
 800da04:	6143      	str	r3, [r0, #20]
 800da06:	f04f 0301 	mov.w	r3, #1
 800da0a:	6103      	str	r3, [r0, #16]
 800da0c:	dd19      	ble.n	800da42 <__s2b+0x64>
 800da0e:	f104 0809 	add.w	r8, r4, #9
 800da12:	46c1      	mov	r9, r8
 800da14:	442c      	add	r4, r5
 800da16:	f819 3b01 	ldrb.w	r3, [r9], #1
 800da1a:	4601      	mov	r1, r0
 800da1c:	3b30      	subs	r3, #48	; 0x30
 800da1e:	220a      	movs	r2, #10
 800da20:	4630      	mov	r0, r6
 800da22:	f7ff ffa1 	bl	800d968 <__multadd>
 800da26:	45a1      	cmp	r9, r4
 800da28:	d1f5      	bne.n	800da16 <__s2b+0x38>
 800da2a:	eb08 0405 	add.w	r4, r8, r5
 800da2e:	3c08      	subs	r4, #8
 800da30:	1b2d      	subs	r5, r5, r4
 800da32:	1963      	adds	r3, r4, r5
 800da34:	42bb      	cmp	r3, r7
 800da36:	db07      	blt.n	800da48 <__s2b+0x6a>
 800da38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3c:	0052      	lsls	r2, r2, #1
 800da3e:	3101      	adds	r1, #1
 800da40:	e7d9      	b.n	800d9f6 <__s2b+0x18>
 800da42:	340a      	adds	r4, #10
 800da44:	2509      	movs	r5, #9
 800da46:	e7f3      	b.n	800da30 <__s2b+0x52>
 800da48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da4c:	4601      	mov	r1, r0
 800da4e:	3b30      	subs	r3, #48	; 0x30
 800da50:	220a      	movs	r2, #10
 800da52:	4630      	mov	r0, r6
 800da54:	f7ff ff88 	bl	800d968 <__multadd>
 800da58:	e7eb      	b.n	800da32 <__s2b+0x54>

0800da5a <__hi0bits>:
 800da5a:	0c02      	lsrs	r2, r0, #16
 800da5c:	0412      	lsls	r2, r2, #16
 800da5e:	4603      	mov	r3, r0
 800da60:	b9b2      	cbnz	r2, 800da90 <__hi0bits+0x36>
 800da62:	0403      	lsls	r3, r0, #16
 800da64:	2010      	movs	r0, #16
 800da66:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800da6a:	bf04      	itt	eq
 800da6c:	021b      	lsleq	r3, r3, #8
 800da6e:	3008      	addeq	r0, #8
 800da70:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800da74:	bf04      	itt	eq
 800da76:	011b      	lsleq	r3, r3, #4
 800da78:	3004      	addeq	r0, #4
 800da7a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800da7e:	bf04      	itt	eq
 800da80:	009b      	lsleq	r3, r3, #2
 800da82:	3002      	addeq	r0, #2
 800da84:	2b00      	cmp	r3, #0
 800da86:	db06      	blt.n	800da96 <__hi0bits+0x3c>
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	d503      	bpl.n	800da94 <__hi0bits+0x3a>
 800da8c:	3001      	adds	r0, #1
 800da8e:	4770      	bx	lr
 800da90:	2000      	movs	r0, #0
 800da92:	e7e8      	b.n	800da66 <__hi0bits+0xc>
 800da94:	2020      	movs	r0, #32
 800da96:	4770      	bx	lr

0800da98 <__lo0bits>:
 800da98:	6803      	ldr	r3, [r0, #0]
 800da9a:	4601      	mov	r1, r0
 800da9c:	f013 0207 	ands.w	r2, r3, #7
 800daa0:	d00b      	beq.n	800daba <__lo0bits+0x22>
 800daa2:	07da      	lsls	r2, r3, #31
 800daa4:	d423      	bmi.n	800daee <__lo0bits+0x56>
 800daa6:	0798      	lsls	r0, r3, #30
 800daa8:	bf49      	itett	mi
 800daaa:	085b      	lsrmi	r3, r3, #1
 800daac:	089b      	lsrpl	r3, r3, #2
 800daae:	2001      	movmi	r0, #1
 800dab0:	600b      	strmi	r3, [r1, #0]
 800dab2:	bf5c      	itt	pl
 800dab4:	600b      	strpl	r3, [r1, #0]
 800dab6:	2002      	movpl	r0, #2
 800dab8:	4770      	bx	lr
 800daba:	b298      	uxth	r0, r3
 800dabc:	b9a8      	cbnz	r0, 800daea <__lo0bits+0x52>
 800dabe:	2010      	movs	r0, #16
 800dac0:	0c1b      	lsrs	r3, r3, #16
 800dac2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dac6:	bf04      	itt	eq
 800dac8:	0a1b      	lsreq	r3, r3, #8
 800daca:	3008      	addeq	r0, #8
 800dacc:	071a      	lsls	r2, r3, #28
 800dace:	bf04      	itt	eq
 800dad0:	091b      	lsreq	r3, r3, #4
 800dad2:	3004      	addeq	r0, #4
 800dad4:	079a      	lsls	r2, r3, #30
 800dad6:	bf04      	itt	eq
 800dad8:	089b      	lsreq	r3, r3, #2
 800dada:	3002      	addeq	r0, #2
 800dadc:	07da      	lsls	r2, r3, #31
 800dade:	d402      	bmi.n	800dae6 <__lo0bits+0x4e>
 800dae0:	085b      	lsrs	r3, r3, #1
 800dae2:	d006      	beq.n	800daf2 <__lo0bits+0x5a>
 800dae4:	3001      	adds	r0, #1
 800dae6:	600b      	str	r3, [r1, #0]
 800dae8:	4770      	bx	lr
 800daea:	4610      	mov	r0, r2
 800daec:	e7e9      	b.n	800dac2 <__lo0bits+0x2a>
 800daee:	2000      	movs	r0, #0
 800daf0:	4770      	bx	lr
 800daf2:	2020      	movs	r0, #32
 800daf4:	4770      	bx	lr

0800daf6 <__i2b>:
 800daf6:	b510      	push	{r4, lr}
 800daf8:	460c      	mov	r4, r1
 800dafa:	2101      	movs	r1, #1
 800dafc:	f7ff fee9 	bl	800d8d2 <_Balloc>
 800db00:	2201      	movs	r2, #1
 800db02:	6144      	str	r4, [r0, #20]
 800db04:	6102      	str	r2, [r0, #16]
 800db06:	bd10      	pop	{r4, pc}

0800db08 <__multiply>:
 800db08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	4614      	mov	r4, r2
 800db0e:	690a      	ldr	r2, [r1, #16]
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	4688      	mov	r8, r1
 800db14:	429a      	cmp	r2, r3
 800db16:	bfbe      	ittt	lt
 800db18:	460b      	movlt	r3, r1
 800db1a:	46a0      	movlt	r8, r4
 800db1c:	461c      	movlt	r4, r3
 800db1e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800db26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db2a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db2e:	eb07 0609 	add.w	r6, r7, r9
 800db32:	42b3      	cmp	r3, r6
 800db34:	bfb8      	it	lt
 800db36:	3101      	addlt	r1, #1
 800db38:	f7ff fecb 	bl	800d8d2 <_Balloc>
 800db3c:	f100 0514 	add.w	r5, r0, #20
 800db40:	462b      	mov	r3, r5
 800db42:	2200      	movs	r2, #0
 800db44:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800db48:	4573      	cmp	r3, lr
 800db4a:	d316      	bcc.n	800db7a <__multiply+0x72>
 800db4c:	f104 0214 	add.w	r2, r4, #20
 800db50:	f108 0114 	add.w	r1, r8, #20
 800db54:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800db58:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	9b00      	ldr	r3, [sp, #0]
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	4293      	cmp	r3, r2
 800db64:	d80c      	bhi.n	800db80 <__multiply+0x78>
 800db66:	2e00      	cmp	r6, #0
 800db68:	dd03      	ble.n	800db72 <__multiply+0x6a>
 800db6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d05d      	beq.n	800dc2e <__multiply+0x126>
 800db72:	6106      	str	r6, [r0, #16]
 800db74:	b003      	add	sp, #12
 800db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7a:	f843 2b04 	str.w	r2, [r3], #4
 800db7e:	e7e3      	b.n	800db48 <__multiply+0x40>
 800db80:	f8b2 b000 	ldrh.w	fp, [r2]
 800db84:	f1bb 0f00 	cmp.w	fp, #0
 800db88:	d023      	beq.n	800dbd2 <__multiply+0xca>
 800db8a:	4689      	mov	r9, r1
 800db8c:	46ac      	mov	ip, r5
 800db8e:	f04f 0800 	mov.w	r8, #0
 800db92:	f859 4b04 	ldr.w	r4, [r9], #4
 800db96:	f8dc a000 	ldr.w	sl, [ip]
 800db9a:	b2a3      	uxth	r3, r4
 800db9c:	fa1f fa8a 	uxth.w	sl, sl
 800dba0:	fb0b a303 	mla	r3, fp, r3, sl
 800dba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dba8:	f8dc 4000 	ldr.w	r4, [ip]
 800dbac:	4443      	add	r3, r8
 800dbae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dbb2:	fb0b 840a 	mla	r4, fp, sl, r8
 800dbb6:	46e2      	mov	sl, ip
 800dbb8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dbc2:	454f      	cmp	r7, r9
 800dbc4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dbc8:	f84a 3b04 	str.w	r3, [sl], #4
 800dbcc:	d82b      	bhi.n	800dc26 <__multiply+0x11e>
 800dbce:	f8cc 8004 	str.w	r8, [ip, #4]
 800dbd2:	9b01      	ldr	r3, [sp, #4]
 800dbd4:	3204      	adds	r2, #4
 800dbd6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dbda:	f1ba 0f00 	cmp.w	sl, #0
 800dbde:	d020      	beq.n	800dc22 <__multiply+0x11a>
 800dbe0:	4689      	mov	r9, r1
 800dbe2:	46a8      	mov	r8, r5
 800dbe4:	f04f 0b00 	mov.w	fp, #0
 800dbe8:	682b      	ldr	r3, [r5, #0]
 800dbea:	f8b9 c000 	ldrh.w	ip, [r9]
 800dbee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	fb0a 440c 	mla	r4, sl, ip, r4
 800dbf8:	46c4      	mov	ip, r8
 800dbfa:	445c      	add	r4, fp
 800dbfc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dc00:	f84c 3b04 	str.w	r3, [ip], #4
 800dc04:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc08:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dc0c:	0c1b      	lsrs	r3, r3, #16
 800dc0e:	fb0a b303 	mla	r3, sl, r3, fp
 800dc12:	454f      	cmp	r7, r9
 800dc14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dc18:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dc1c:	d805      	bhi.n	800dc2a <__multiply+0x122>
 800dc1e:	f8c8 3004 	str.w	r3, [r8, #4]
 800dc22:	3504      	adds	r5, #4
 800dc24:	e79b      	b.n	800db5e <__multiply+0x56>
 800dc26:	46d4      	mov	ip, sl
 800dc28:	e7b3      	b.n	800db92 <__multiply+0x8a>
 800dc2a:	46e0      	mov	r8, ip
 800dc2c:	e7dd      	b.n	800dbea <__multiply+0xe2>
 800dc2e:	3e01      	subs	r6, #1
 800dc30:	e799      	b.n	800db66 <__multiply+0x5e>
	...

0800dc34 <__pow5mult>:
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	4615      	mov	r5, r2
 800dc3a:	f012 0203 	ands.w	r2, r2, #3
 800dc3e:	4606      	mov	r6, r0
 800dc40:	460f      	mov	r7, r1
 800dc42:	d007      	beq.n	800dc54 <__pow5mult+0x20>
 800dc44:	4c21      	ldr	r4, [pc, #132]	; (800dccc <__pow5mult+0x98>)
 800dc46:	3a01      	subs	r2, #1
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc4e:	f7ff fe8b 	bl	800d968 <__multadd>
 800dc52:	4607      	mov	r7, r0
 800dc54:	10ad      	asrs	r5, r5, #2
 800dc56:	d035      	beq.n	800dcc4 <__pow5mult+0x90>
 800dc58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dc5a:	b93c      	cbnz	r4, 800dc6c <__pow5mult+0x38>
 800dc5c:	2010      	movs	r0, #16
 800dc5e:	f7ff fe05 	bl	800d86c <malloc>
 800dc62:	6270      	str	r0, [r6, #36]	; 0x24
 800dc64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc68:	6004      	str	r4, [r0, #0]
 800dc6a:	60c4      	str	r4, [r0, #12]
 800dc6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc74:	b94c      	cbnz	r4, 800dc8a <__pow5mult+0x56>
 800dc76:	f240 2171 	movw	r1, #625	; 0x271
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7ff ff3b 	bl	800daf6 <__i2b>
 800dc80:	2300      	movs	r3, #0
 800dc82:	4604      	mov	r4, r0
 800dc84:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc88:	6003      	str	r3, [r0, #0]
 800dc8a:	f04f 0800 	mov.w	r8, #0
 800dc8e:	07eb      	lsls	r3, r5, #31
 800dc90:	d50a      	bpl.n	800dca8 <__pow5mult+0x74>
 800dc92:	4639      	mov	r1, r7
 800dc94:	4622      	mov	r2, r4
 800dc96:	4630      	mov	r0, r6
 800dc98:	f7ff ff36 	bl	800db08 <__multiply>
 800dc9c:	4681      	mov	r9, r0
 800dc9e:	4639      	mov	r1, r7
 800dca0:	4630      	mov	r0, r6
 800dca2:	f7ff fe4a 	bl	800d93a <_Bfree>
 800dca6:	464f      	mov	r7, r9
 800dca8:	106d      	asrs	r5, r5, #1
 800dcaa:	d00b      	beq.n	800dcc4 <__pow5mult+0x90>
 800dcac:	6820      	ldr	r0, [r4, #0]
 800dcae:	b938      	cbnz	r0, 800dcc0 <__pow5mult+0x8c>
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff ff27 	bl	800db08 <__multiply>
 800dcba:	6020      	str	r0, [r4, #0]
 800dcbc:	f8c0 8000 	str.w	r8, [r0]
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	e7e4      	b.n	800dc8e <__pow5mult+0x5a>
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcca:	bf00      	nop
 800dccc:	0800f498 	.word	0x0800f498

0800dcd0 <__lshift>:
 800dcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	4607      	mov	r7, r0
 800dcd8:	4616      	mov	r6, r2
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dce0:	eb0a 0903 	add.w	r9, sl, r3
 800dce4:	6849      	ldr	r1, [r1, #4]
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	f109 0501 	add.w	r5, r9, #1
 800dcec:	42ab      	cmp	r3, r5
 800dcee:	db32      	blt.n	800dd56 <__lshift+0x86>
 800dcf0:	4638      	mov	r0, r7
 800dcf2:	f7ff fdee 	bl	800d8d2 <_Balloc>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	4680      	mov	r8, r0
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f100 0114 	add.w	r1, r0, #20
 800dd00:	4553      	cmp	r3, sl
 800dd02:	db2b      	blt.n	800dd5c <__lshift+0x8c>
 800dd04:	6920      	ldr	r0, [r4, #16]
 800dd06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd0a:	f104 0314 	add.w	r3, r4, #20
 800dd0e:	f016 021f 	ands.w	r2, r6, #31
 800dd12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd1a:	d025      	beq.n	800dd68 <__lshift+0x98>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	f1c2 0e20 	rsb	lr, r2, #32
 800dd22:	468a      	mov	sl, r1
 800dd24:	681e      	ldr	r6, [r3, #0]
 800dd26:	4096      	lsls	r6, r2
 800dd28:	4330      	orrs	r0, r6
 800dd2a:	f84a 0b04 	str.w	r0, [sl], #4
 800dd2e:	f853 0b04 	ldr.w	r0, [r3], #4
 800dd32:	459c      	cmp	ip, r3
 800dd34:	fa20 f00e 	lsr.w	r0, r0, lr
 800dd38:	d814      	bhi.n	800dd64 <__lshift+0x94>
 800dd3a:	6048      	str	r0, [r1, #4]
 800dd3c:	b108      	cbz	r0, 800dd42 <__lshift+0x72>
 800dd3e:	f109 0502 	add.w	r5, r9, #2
 800dd42:	3d01      	subs	r5, #1
 800dd44:	4638      	mov	r0, r7
 800dd46:	f8c8 5010 	str.w	r5, [r8, #16]
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	f7ff fdf5 	bl	800d93a <_Bfree>
 800dd50:	4640      	mov	r0, r8
 800dd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd56:	3101      	adds	r1, #1
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	e7c7      	b.n	800dcec <__lshift+0x1c>
 800dd5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dd60:	3301      	adds	r3, #1
 800dd62:	e7cd      	b.n	800dd00 <__lshift+0x30>
 800dd64:	4651      	mov	r1, sl
 800dd66:	e7dc      	b.n	800dd22 <__lshift+0x52>
 800dd68:	3904      	subs	r1, #4
 800dd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd6e:	459c      	cmp	ip, r3
 800dd70:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd74:	d8f9      	bhi.n	800dd6a <__lshift+0x9a>
 800dd76:	e7e4      	b.n	800dd42 <__lshift+0x72>

0800dd78 <__mcmp>:
 800dd78:	6903      	ldr	r3, [r0, #16]
 800dd7a:	690a      	ldr	r2, [r1, #16]
 800dd7c:	b530      	push	{r4, r5, lr}
 800dd7e:	1a9b      	subs	r3, r3, r2
 800dd80:	d10c      	bne.n	800dd9c <__mcmp+0x24>
 800dd82:	0092      	lsls	r2, r2, #2
 800dd84:	3014      	adds	r0, #20
 800dd86:	3114      	adds	r1, #20
 800dd88:	1884      	adds	r4, r0, r2
 800dd8a:	4411      	add	r1, r2
 800dd8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dd94:	4295      	cmp	r5, r2
 800dd96:	d003      	beq.n	800dda0 <__mcmp+0x28>
 800dd98:	d305      	bcc.n	800dda6 <__mcmp+0x2e>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	bd30      	pop	{r4, r5, pc}
 800dda0:	42a0      	cmp	r0, r4
 800dda2:	d3f3      	bcc.n	800dd8c <__mcmp+0x14>
 800dda4:	e7fa      	b.n	800dd9c <__mcmp+0x24>
 800dda6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddaa:	e7f7      	b.n	800dd9c <__mcmp+0x24>

0800ddac <__mdiff>:
 800ddac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	4614      	mov	r4, r2
 800ddba:	f7ff ffdd 	bl	800dd78 <__mcmp>
 800ddbe:	1e06      	subs	r6, r0, #0
 800ddc0:	d108      	bne.n	800ddd4 <__mdiff+0x28>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	f7ff fd84 	bl	800d8d2 <_Balloc>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ddd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd4:	bfa4      	itt	ge
 800ddd6:	4623      	movge	r3, r4
 800ddd8:	462c      	movge	r4, r5
 800ddda:	4638      	mov	r0, r7
 800dddc:	6861      	ldr	r1, [r4, #4]
 800ddde:	bfa6      	itte	ge
 800dde0:	461d      	movge	r5, r3
 800dde2:	2600      	movge	r6, #0
 800dde4:	2601      	movlt	r6, #1
 800dde6:	f7ff fd74 	bl	800d8d2 <_Balloc>
 800ddea:	f04f 0e00 	mov.w	lr, #0
 800ddee:	60c6      	str	r6, [r0, #12]
 800ddf0:	692b      	ldr	r3, [r5, #16]
 800ddf2:	6926      	ldr	r6, [r4, #16]
 800ddf4:	f104 0214 	add.w	r2, r4, #20
 800ddf8:	f105 0914 	add.w	r9, r5, #20
 800ddfc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800de00:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800de04:	f100 0114 	add.w	r1, r0, #20
 800de08:	f852 ab04 	ldr.w	sl, [r2], #4
 800de0c:	f859 5b04 	ldr.w	r5, [r9], #4
 800de10:	fa1f f38a 	uxth.w	r3, sl
 800de14:	4473      	add	r3, lr
 800de16:	b2ac      	uxth	r4, r5
 800de18:	1b1b      	subs	r3, r3, r4
 800de1a:	0c2c      	lsrs	r4, r5, #16
 800de1c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800de20:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800de24:	b29b      	uxth	r3, r3
 800de26:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800de2a:	45c8      	cmp	r8, r9
 800de2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800de30:	4694      	mov	ip, r2
 800de32:	f841 4b04 	str.w	r4, [r1], #4
 800de36:	d8e7      	bhi.n	800de08 <__mdiff+0x5c>
 800de38:	45bc      	cmp	ip, r7
 800de3a:	d304      	bcc.n	800de46 <__mdiff+0x9a>
 800de3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800de40:	b183      	cbz	r3, 800de64 <__mdiff+0xb8>
 800de42:	6106      	str	r6, [r0, #16]
 800de44:	e7c4      	b.n	800ddd0 <__mdiff+0x24>
 800de46:	f85c 4b04 	ldr.w	r4, [ip], #4
 800de4a:	b2a2      	uxth	r2, r4
 800de4c:	4472      	add	r2, lr
 800de4e:	1413      	asrs	r3, r2, #16
 800de50:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800de54:	b292      	uxth	r2, r2
 800de56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de5a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800de5e:	f841 2b04 	str.w	r2, [r1], #4
 800de62:	e7e9      	b.n	800de38 <__mdiff+0x8c>
 800de64:	3e01      	subs	r6, #1
 800de66:	e7e9      	b.n	800de3c <__mdiff+0x90>

0800de68 <__ulp>:
 800de68:	4b10      	ldr	r3, [pc, #64]	; (800deac <__ulp+0x44>)
 800de6a:	400b      	ands	r3, r1
 800de6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800de70:	2b00      	cmp	r3, #0
 800de72:	dd02      	ble.n	800de7a <__ulp+0x12>
 800de74:	2000      	movs	r0, #0
 800de76:	4619      	mov	r1, r3
 800de78:	4770      	bx	lr
 800de7a:	425b      	negs	r3, r3
 800de7c:	151b      	asrs	r3, r3, #20
 800de7e:	2b13      	cmp	r3, #19
 800de80:	f04f 0000 	mov.w	r0, #0
 800de84:	f04f 0100 	mov.w	r1, #0
 800de88:	dc04      	bgt.n	800de94 <__ulp+0x2c>
 800de8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800de8e:	fa42 f103 	asr.w	r1, r2, r3
 800de92:	4770      	bx	lr
 800de94:	2201      	movs	r2, #1
 800de96:	3b14      	subs	r3, #20
 800de98:	2b1e      	cmp	r3, #30
 800de9a:	bfce      	itee	gt
 800de9c:	4613      	movgt	r3, r2
 800de9e:	f1c3 031f 	rsble	r3, r3, #31
 800dea2:	fa02 f303 	lslle.w	r3, r2, r3
 800dea6:	4618      	mov	r0, r3
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	7ff00000 	.word	0x7ff00000

0800deb0 <__b2d>:
 800deb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb4:	6907      	ldr	r7, [r0, #16]
 800deb6:	f100 0914 	add.w	r9, r0, #20
 800deba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800debe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800dec2:	f1a7 0804 	sub.w	r8, r7, #4
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7ff fdc7 	bl	800da5a <__hi0bits>
 800decc:	f1c0 0320 	rsb	r3, r0, #32
 800ded0:	280a      	cmp	r0, #10
 800ded2:	600b      	str	r3, [r1, #0]
 800ded4:	491e      	ldr	r1, [pc, #120]	; (800df50 <__b2d+0xa0>)
 800ded6:	dc17      	bgt.n	800df08 <__b2d+0x58>
 800ded8:	45c1      	cmp	r9, r8
 800deda:	bf28      	it	cs
 800dedc:	2200      	movcs	r2, #0
 800dede:	f1c0 0c0b 	rsb	ip, r0, #11
 800dee2:	fa26 f30c 	lsr.w	r3, r6, ip
 800dee6:	bf38      	it	cc
 800dee8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800deec:	ea43 0501 	orr.w	r5, r3, r1
 800def0:	f100 0315 	add.w	r3, r0, #21
 800def4:	fa06 f303 	lsl.w	r3, r6, r3
 800def8:	fa22 f20c 	lsr.w	r2, r2, ip
 800defc:	ea43 0402 	orr.w	r4, r3, r2
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df08:	45c1      	cmp	r9, r8
 800df0a:	bf3a      	itte	cc
 800df0c:	f1a7 0808 	subcc.w	r8, r7, #8
 800df10:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800df14:	2200      	movcs	r2, #0
 800df16:	f1b0 030b 	subs.w	r3, r0, #11
 800df1a:	d015      	beq.n	800df48 <__b2d+0x98>
 800df1c:	409e      	lsls	r6, r3
 800df1e:	f1c3 0720 	rsb	r7, r3, #32
 800df22:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800df26:	fa22 f107 	lsr.w	r1, r2, r7
 800df2a:	45c8      	cmp	r8, r9
 800df2c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800df30:	ea46 0501 	orr.w	r5, r6, r1
 800df34:	bf94      	ite	ls
 800df36:	2100      	movls	r1, #0
 800df38:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800df3c:	fa02 f003 	lsl.w	r0, r2, r3
 800df40:	40f9      	lsrs	r1, r7
 800df42:	ea40 0401 	orr.w	r4, r0, r1
 800df46:	e7db      	b.n	800df00 <__b2d+0x50>
 800df48:	ea46 0501 	orr.w	r5, r6, r1
 800df4c:	4614      	mov	r4, r2
 800df4e:	e7d7      	b.n	800df00 <__b2d+0x50>
 800df50:	3ff00000 	.word	0x3ff00000

0800df54 <__d2b>:
 800df54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800df58:	461c      	mov	r4, r3
 800df5a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800df5e:	2101      	movs	r1, #1
 800df60:	4690      	mov	r8, r2
 800df62:	f7ff fcb6 	bl	800d8d2 <_Balloc>
 800df66:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800df6a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800df6e:	4607      	mov	r7, r0
 800df70:	bb34      	cbnz	r4, 800dfc0 <__d2b+0x6c>
 800df72:	9201      	str	r2, [sp, #4]
 800df74:	f1b8 0200 	subs.w	r2, r8, #0
 800df78:	d027      	beq.n	800dfca <__d2b+0x76>
 800df7a:	a802      	add	r0, sp, #8
 800df7c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800df80:	f7ff fd8a 	bl	800da98 <__lo0bits>
 800df84:	9900      	ldr	r1, [sp, #0]
 800df86:	b1f0      	cbz	r0, 800dfc6 <__d2b+0x72>
 800df88:	9a01      	ldr	r2, [sp, #4]
 800df8a:	f1c0 0320 	rsb	r3, r0, #32
 800df8e:	fa02 f303 	lsl.w	r3, r2, r3
 800df92:	430b      	orrs	r3, r1
 800df94:	40c2      	lsrs	r2, r0
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	9201      	str	r2, [sp, #4]
 800df9a:	9b01      	ldr	r3, [sp, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bf14      	ite	ne
 800dfa0:	2102      	movne	r1, #2
 800dfa2:	2101      	moveq	r1, #1
 800dfa4:	61bb      	str	r3, [r7, #24]
 800dfa6:	6139      	str	r1, [r7, #16]
 800dfa8:	b1c4      	cbz	r4, 800dfdc <__d2b+0x88>
 800dfaa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dfae:	4404      	add	r4, r0
 800dfb0:	6034      	str	r4, [r6, #0]
 800dfb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dfb6:	6028      	str	r0, [r5, #0]
 800dfb8:	4638      	mov	r0, r7
 800dfba:	b002      	add	sp, #8
 800dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dfc4:	e7d5      	b.n	800df72 <__d2b+0x1e>
 800dfc6:	6179      	str	r1, [r7, #20]
 800dfc8:	e7e7      	b.n	800df9a <__d2b+0x46>
 800dfca:	a801      	add	r0, sp, #4
 800dfcc:	f7ff fd64 	bl	800da98 <__lo0bits>
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	9b01      	ldr	r3, [sp, #4]
 800dfd4:	6139      	str	r1, [r7, #16]
 800dfd6:	617b      	str	r3, [r7, #20]
 800dfd8:	3020      	adds	r0, #32
 800dfda:	e7e5      	b.n	800dfa8 <__d2b+0x54>
 800dfdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfe0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dfe4:	6030      	str	r0, [r6, #0]
 800dfe6:	6918      	ldr	r0, [r3, #16]
 800dfe8:	f7ff fd37 	bl	800da5a <__hi0bits>
 800dfec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dff0:	e7e1      	b.n	800dfb6 <__d2b+0x62>

0800dff2 <__ratio>:
 800dff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff6:	4688      	mov	r8, r1
 800dff8:	4669      	mov	r1, sp
 800dffa:	4681      	mov	r9, r0
 800dffc:	f7ff ff58 	bl	800deb0 <__b2d>
 800e000:	468b      	mov	fp, r1
 800e002:	4606      	mov	r6, r0
 800e004:	460f      	mov	r7, r1
 800e006:	4640      	mov	r0, r8
 800e008:	a901      	add	r1, sp, #4
 800e00a:	f7ff ff51 	bl	800deb0 <__b2d>
 800e00e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e012:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e016:	460d      	mov	r5, r1
 800e018:	eba3 0c02 	sub.w	ip, r3, r2
 800e01c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e020:	1a9b      	subs	r3, r3, r2
 800e022:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e026:	2b00      	cmp	r3, #0
 800e028:	bfd5      	itete	le
 800e02a:	460a      	movle	r2, r1
 800e02c:	463a      	movgt	r2, r7
 800e02e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e032:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e036:	bfd8      	it	le
 800e038:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800e03c:	462b      	mov	r3, r5
 800e03e:	4602      	mov	r2, r0
 800e040:	4659      	mov	r1, fp
 800e042:	4630      	mov	r0, r6
 800e044:	f7f2 fb72 	bl	800072c <__aeabi_ddiv>
 800e048:	b003      	add	sp, #12
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e04e <__copybits>:
 800e04e:	3901      	subs	r1, #1
 800e050:	b510      	push	{r4, lr}
 800e052:	1149      	asrs	r1, r1, #5
 800e054:	6914      	ldr	r4, [r2, #16]
 800e056:	3101      	adds	r1, #1
 800e058:	f102 0314 	add.w	r3, r2, #20
 800e05c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e064:	42a3      	cmp	r3, r4
 800e066:	4602      	mov	r2, r0
 800e068:	d303      	bcc.n	800e072 <__copybits+0x24>
 800e06a:	2300      	movs	r3, #0
 800e06c:	428a      	cmp	r2, r1
 800e06e:	d305      	bcc.n	800e07c <__copybits+0x2e>
 800e070:	bd10      	pop	{r4, pc}
 800e072:	f853 2b04 	ldr.w	r2, [r3], #4
 800e076:	f840 2b04 	str.w	r2, [r0], #4
 800e07a:	e7f3      	b.n	800e064 <__copybits+0x16>
 800e07c:	f842 3b04 	str.w	r3, [r2], #4
 800e080:	e7f4      	b.n	800e06c <__copybits+0x1e>

0800e082 <__any_on>:
 800e082:	f100 0214 	add.w	r2, r0, #20
 800e086:	6900      	ldr	r0, [r0, #16]
 800e088:	114b      	asrs	r3, r1, #5
 800e08a:	4298      	cmp	r0, r3
 800e08c:	b510      	push	{r4, lr}
 800e08e:	db11      	blt.n	800e0b4 <__any_on+0x32>
 800e090:	dd0a      	ble.n	800e0a8 <__any_on+0x26>
 800e092:	f011 011f 	ands.w	r1, r1, #31
 800e096:	d007      	beq.n	800e0a8 <__any_on+0x26>
 800e098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e09c:	fa24 f001 	lsr.w	r0, r4, r1
 800e0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800e0a4:	428c      	cmp	r4, r1
 800e0a6:	d10b      	bne.n	800e0c0 <__any_on+0x3e>
 800e0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d803      	bhi.n	800e0b8 <__any_on+0x36>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	bd10      	pop	{r4, pc}
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	e7f7      	b.n	800e0a8 <__any_on+0x26>
 800e0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	d0f5      	beq.n	800e0ac <__any_on+0x2a>
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	e7f6      	b.n	800e0b2 <__any_on+0x30>

0800e0c4 <_calloc_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	fb02 f401 	mul.w	r4, r2, r1
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	f000 f854 	bl	800e178 <_malloc_r>
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	b118      	cbz	r0, 800e0dc <_calloc_r+0x18>
 800e0d4:	4622      	mov	r2, r4
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	f7fc fcb0 	bl	800aa3c <memset>
 800e0dc:	4628      	mov	r0, r5
 800e0de:	bd38      	pop	{r3, r4, r5, pc}

0800e0e0 <_free_r>:
 800e0e0:	b538      	push	{r3, r4, r5, lr}
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	2900      	cmp	r1, #0
 800e0e6:	d043      	beq.n	800e170 <_free_r+0x90>
 800e0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ec:	1f0c      	subs	r4, r1, #4
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bfb8      	it	lt
 800e0f2:	18e4      	addlt	r4, r4, r3
 800e0f4:	f000 fe2c 	bl	800ed50 <__malloc_lock>
 800e0f8:	4a1e      	ldr	r2, [pc, #120]	; (800e174 <_free_r+0x94>)
 800e0fa:	6813      	ldr	r3, [r2, #0]
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	b933      	cbnz	r3, 800e10e <_free_r+0x2e>
 800e100:	6063      	str	r3, [r4, #4]
 800e102:	6014      	str	r4, [r2, #0]
 800e104:	4628      	mov	r0, r5
 800e106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e10a:	f000 be22 	b.w	800ed52 <__malloc_unlock>
 800e10e:	42a3      	cmp	r3, r4
 800e110:	d90b      	bls.n	800e12a <_free_r+0x4a>
 800e112:	6821      	ldr	r1, [r4, #0]
 800e114:	1862      	adds	r2, r4, r1
 800e116:	4293      	cmp	r3, r2
 800e118:	bf01      	itttt	eq
 800e11a:	681a      	ldreq	r2, [r3, #0]
 800e11c:	685b      	ldreq	r3, [r3, #4]
 800e11e:	1852      	addeq	r2, r2, r1
 800e120:	6022      	streq	r2, [r4, #0]
 800e122:	6063      	str	r3, [r4, #4]
 800e124:	6004      	str	r4, [r0, #0]
 800e126:	e7ed      	b.n	800e104 <_free_r+0x24>
 800e128:	4613      	mov	r3, r2
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	b10a      	cbz	r2, 800e132 <_free_r+0x52>
 800e12e:	42a2      	cmp	r2, r4
 800e130:	d9fa      	bls.n	800e128 <_free_r+0x48>
 800e132:	6819      	ldr	r1, [r3, #0]
 800e134:	1858      	adds	r0, r3, r1
 800e136:	42a0      	cmp	r0, r4
 800e138:	d10b      	bne.n	800e152 <_free_r+0x72>
 800e13a:	6820      	ldr	r0, [r4, #0]
 800e13c:	4401      	add	r1, r0
 800e13e:	1858      	adds	r0, r3, r1
 800e140:	4282      	cmp	r2, r0
 800e142:	6019      	str	r1, [r3, #0]
 800e144:	d1de      	bne.n	800e104 <_free_r+0x24>
 800e146:	6810      	ldr	r0, [r2, #0]
 800e148:	6852      	ldr	r2, [r2, #4]
 800e14a:	4401      	add	r1, r0
 800e14c:	6019      	str	r1, [r3, #0]
 800e14e:	605a      	str	r2, [r3, #4]
 800e150:	e7d8      	b.n	800e104 <_free_r+0x24>
 800e152:	d902      	bls.n	800e15a <_free_r+0x7a>
 800e154:	230c      	movs	r3, #12
 800e156:	602b      	str	r3, [r5, #0]
 800e158:	e7d4      	b.n	800e104 <_free_r+0x24>
 800e15a:	6820      	ldr	r0, [r4, #0]
 800e15c:	1821      	adds	r1, r4, r0
 800e15e:	428a      	cmp	r2, r1
 800e160:	bf01      	itttt	eq
 800e162:	6811      	ldreq	r1, [r2, #0]
 800e164:	6852      	ldreq	r2, [r2, #4]
 800e166:	1809      	addeq	r1, r1, r0
 800e168:	6021      	streq	r1, [r4, #0]
 800e16a:	6062      	str	r2, [r4, #4]
 800e16c:	605c      	str	r4, [r3, #4]
 800e16e:	e7c9      	b.n	800e104 <_free_r+0x24>
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	200005bc 	.word	0x200005bc

0800e178 <_malloc_r>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	1ccd      	adds	r5, r1, #3
 800e17c:	f025 0503 	bic.w	r5, r5, #3
 800e180:	3508      	adds	r5, #8
 800e182:	2d0c      	cmp	r5, #12
 800e184:	bf38      	it	cc
 800e186:	250c      	movcc	r5, #12
 800e188:	2d00      	cmp	r5, #0
 800e18a:	4606      	mov	r6, r0
 800e18c:	db01      	blt.n	800e192 <_malloc_r+0x1a>
 800e18e:	42a9      	cmp	r1, r5
 800e190:	d903      	bls.n	800e19a <_malloc_r+0x22>
 800e192:	230c      	movs	r3, #12
 800e194:	6033      	str	r3, [r6, #0]
 800e196:	2000      	movs	r0, #0
 800e198:	bd70      	pop	{r4, r5, r6, pc}
 800e19a:	f000 fdd9 	bl	800ed50 <__malloc_lock>
 800e19e:	4a21      	ldr	r2, [pc, #132]	; (800e224 <_malloc_r+0xac>)
 800e1a0:	6814      	ldr	r4, [r2, #0]
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	b991      	cbnz	r1, 800e1cc <_malloc_r+0x54>
 800e1a6:	4c20      	ldr	r4, [pc, #128]	; (800e228 <_malloc_r+0xb0>)
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	b91b      	cbnz	r3, 800e1b4 <_malloc_r+0x3c>
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f000 fc91 	bl	800ead4 <_sbrk_r>
 800e1b2:	6020      	str	r0, [r4, #0]
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f000 fc8c 	bl	800ead4 <_sbrk_r>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d124      	bne.n	800e20a <_malloc_r+0x92>
 800e1c0:	230c      	movs	r3, #12
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	f000 fdc4 	bl	800ed52 <__malloc_unlock>
 800e1ca:	e7e4      	b.n	800e196 <_malloc_r+0x1e>
 800e1cc:	680b      	ldr	r3, [r1, #0]
 800e1ce:	1b5b      	subs	r3, r3, r5
 800e1d0:	d418      	bmi.n	800e204 <_malloc_r+0x8c>
 800e1d2:	2b0b      	cmp	r3, #11
 800e1d4:	d90f      	bls.n	800e1f6 <_malloc_r+0x7e>
 800e1d6:	600b      	str	r3, [r1, #0]
 800e1d8:	18cc      	adds	r4, r1, r3
 800e1da:	50cd      	str	r5, [r1, r3]
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f000 fdb8 	bl	800ed52 <__malloc_unlock>
 800e1e2:	f104 000b 	add.w	r0, r4, #11
 800e1e6:	1d23      	adds	r3, r4, #4
 800e1e8:	f020 0007 	bic.w	r0, r0, #7
 800e1ec:	1ac3      	subs	r3, r0, r3
 800e1ee:	d0d3      	beq.n	800e198 <_malloc_r+0x20>
 800e1f0:	425a      	negs	r2, r3
 800e1f2:	50e2      	str	r2, [r4, r3]
 800e1f4:	e7d0      	b.n	800e198 <_malloc_r+0x20>
 800e1f6:	684b      	ldr	r3, [r1, #4]
 800e1f8:	428c      	cmp	r4, r1
 800e1fa:	bf16      	itet	ne
 800e1fc:	6063      	strne	r3, [r4, #4]
 800e1fe:	6013      	streq	r3, [r2, #0]
 800e200:	460c      	movne	r4, r1
 800e202:	e7eb      	b.n	800e1dc <_malloc_r+0x64>
 800e204:	460c      	mov	r4, r1
 800e206:	6849      	ldr	r1, [r1, #4]
 800e208:	e7cc      	b.n	800e1a4 <_malloc_r+0x2c>
 800e20a:	1cc4      	adds	r4, r0, #3
 800e20c:	f024 0403 	bic.w	r4, r4, #3
 800e210:	42a0      	cmp	r0, r4
 800e212:	d005      	beq.n	800e220 <_malloc_r+0xa8>
 800e214:	1a21      	subs	r1, r4, r0
 800e216:	4630      	mov	r0, r6
 800e218:	f000 fc5c 	bl	800ead4 <_sbrk_r>
 800e21c:	3001      	adds	r0, #1
 800e21e:	d0cf      	beq.n	800e1c0 <_malloc_r+0x48>
 800e220:	6025      	str	r5, [r4, #0]
 800e222:	e7db      	b.n	800e1dc <_malloc_r+0x64>
 800e224:	200005bc 	.word	0x200005bc
 800e228:	200005c0 	.word	0x200005c0

0800e22c <__ssputs_r>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	688e      	ldr	r6, [r1, #8]
 800e232:	4682      	mov	sl, r0
 800e234:	429e      	cmp	r6, r3
 800e236:	460c      	mov	r4, r1
 800e238:	4690      	mov	r8, r2
 800e23a:	4699      	mov	r9, r3
 800e23c:	d837      	bhi.n	800e2ae <__ssputs_r+0x82>
 800e23e:	898a      	ldrh	r2, [r1, #12]
 800e240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e244:	d031      	beq.n	800e2aa <__ssputs_r+0x7e>
 800e246:	2302      	movs	r3, #2
 800e248:	6825      	ldr	r5, [r4, #0]
 800e24a:	6909      	ldr	r1, [r1, #16]
 800e24c:	1a6f      	subs	r7, r5, r1
 800e24e:	6965      	ldr	r5, [r4, #20]
 800e250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e254:	fb95 f5f3 	sdiv	r5, r5, r3
 800e258:	f109 0301 	add.w	r3, r9, #1
 800e25c:	443b      	add	r3, r7
 800e25e:	429d      	cmp	r5, r3
 800e260:	bf38      	it	cc
 800e262:	461d      	movcc	r5, r3
 800e264:	0553      	lsls	r3, r2, #21
 800e266:	d530      	bpl.n	800e2ca <__ssputs_r+0x9e>
 800e268:	4629      	mov	r1, r5
 800e26a:	f7ff ff85 	bl	800e178 <_malloc_r>
 800e26e:	4606      	mov	r6, r0
 800e270:	b950      	cbnz	r0, 800e288 <__ssputs_r+0x5c>
 800e272:	230c      	movs	r3, #12
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
 800e278:	f8ca 3000 	str.w	r3, [sl]
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e288:	463a      	mov	r2, r7
 800e28a:	6921      	ldr	r1, [r4, #16]
 800e28c:	f7ff fb16 	bl	800d8bc <memcpy>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	6126      	str	r6, [r4, #16]
 800e29e:	443e      	add	r6, r7
 800e2a0:	6026      	str	r6, [r4, #0]
 800e2a2:	464e      	mov	r6, r9
 800e2a4:	6165      	str	r5, [r4, #20]
 800e2a6:	1bed      	subs	r5, r5, r7
 800e2a8:	60a5      	str	r5, [r4, #8]
 800e2aa:	454e      	cmp	r6, r9
 800e2ac:	d900      	bls.n	800e2b0 <__ssputs_r+0x84>
 800e2ae:	464e      	mov	r6, r9
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4641      	mov	r1, r8
 800e2b4:	6820      	ldr	r0, [r4, #0]
 800e2b6:	f000 fd32 	bl	800ed1e <memmove>
 800e2ba:	68a3      	ldr	r3, [r4, #8]
 800e2bc:	2000      	movs	r0, #0
 800e2be:	1b9b      	subs	r3, r3, r6
 800e2c0:	60a3      	str	r3, [r4, #8]
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	441e      	add	r6, r3
 800e2c6:	6026      	str	r6, [r4, #0]
 800e2c8:	e7dc      	b.n	800e284 <__ssputs_r+0x58>
 800e2ca:	462a      	mov	r2, r5
 800e2cc:	f000 fd42 	bl	800ed54 <_realloc_r>
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d1e2      	bne.n	800e29c <__ssputs_r+0x70>
 800e2d6:	6921      	ldr	r1, [r4, #16]
 800e2d8:	4650      	mov	r0, sl
 800e2da:	f7ff ff01 	bl	800e0e0 <_free_r>
 800e2de:	e7c8      	b.n	800e272 <__ssputs_r+0x46>

0800e2e0 <_svfiprintf_r>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	461d      	mov	r5, r3
 800e2e6:	898b      	ldrh	r3, [r1, #12]
 800e2e8:	b09d      	sub	sp, #116	; 0x74
 800e2ea:	061f      	lsls	r7, r3, #24
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	4616      	mov	r6, r2
 800e2f2:	d50f      	bpl.n	800e314 <_svfiprintf_r+0x34>
 800e2f4:	690b      	ldr	r3, [r1, #16]
 800e2f6:	b96b      	cbnz	r3, 800e314 <_svfiprintf_r+0x34>
 800e2f8:	2140      	movs	r1, #64	; 0x40
 800e2fa:	f7ff ff3d 	bl	800e178 <_malloc_r>
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	6120      	str	r0, [r4, #16]
 800e302:	b928      	cbnz	r0, 800e310 <_svfiprintf_r+0x30>
 800e304:	230c      	movs	r3, #12
 800e306:	f8c8 3000 	str.w	r3, [r8]
 800e30a:	f04f 30ff 	mov.w	r0, #4294967295
 800e30e:	e0c8      	b.n	800e4a2 <_svfiprintf_r+0x1c2>
 800e310:	2340      	movs	r3, #64	; 0x40
 800e312:	6163      	str	r3, [r4, #20]
 800e314:	2300      	movs	r3, #0
 800e316:	9309      	str	r3, [sp, #36]	; 0x24
 800e318:	2320      	movs	r3, #32
 800e31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e31e:	2330      	movs	r3, #48	; 0x30
 800e320:	f04f 0b01 	mov.w	fp, #1
 800e324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e328:	9503      	str	r5, [sp, #12]
 800e32a:	4637      	mov	r7, r6
 800e32c:	463d      	mov	r5, r7
 800e32e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e332:	b10b      	cbz	r3, 800e338 <_svfiprintf_r+0x58>
 800e334:	2b25      	cmp	r3, #37	; 0x25
 800e336:	d13e      	bne.n	800e3b6 <_svfiprintf_r+0xd6>
 800e338:	ebb7 0a06 	subs.w	sl, r7, r6
 800e33c:	d00b      	beq.n	800e356 <_svfiprintf_r+0x76>
 800e33e:	4653      	mov	r3, sl
 800e340:	4632      	mov	r2, r6
 800e342:	4621      	mov	r1, r4
 800e344:	4640      	mov	r0, r8
 800e346:	f7ff ff71 	bl	800e22c <__ssputs_r>
 800e34a:	3001      	adds	r0, #1
 800e34c:	f000 80a4 	beq.w	800e498 <_svfiprintf_r+0x1b8>
 800e350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e352:	4453      	add	r3, sl
 800e354:	9309      	str	r3, [sp, #36]	; 0x24
 800e356:	783b      	ldrb	r3, [r7, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f000 809d 	beq.w	800e498 <_svfiprintf_r+0x1b8>
 800e35e:	2300      	movs	r3, #0
 800e360:	f04f 32ff 	mov.w	r2, #4294967295
 800e364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e368:	9304      	str	r3, [sp, #16]
 800e36a:	9307      	str	r3, [sp, #28]
 800e36c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e370:	931a      	str	r3, [sp, #104]	; 0x68
 800e372:	462f      	mov	r7, r5
 800e374:	2205      	movs	r2, #5
 800e376:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e37a:	4850      	ldr	r0, [pc, #320]	; (800e4bc <_svfiprintf_r+0x1dc>)
 800e37c:	f7ff fa90 	bl	800d8a0 <memchr>
 800e380:	9b04      	ldr	r3, [sp, #16]
 800e382:	b9d0      	cbnz	r0, 800e3ba <_svfiprintf_r+0xda>
 800e384:	06d9      	lsls	r1, r3, #27
 800e386:	bf44      	itt	mi
 800e388:	2220      	movmi	r2, #32
 800e38a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e38e:	071a      	lsls	r2, r3, #28
 800e390:	bf44      	itt	mi
 800e392:	222b      	movmi	r2, #43	; 0x2b
 800e394:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e398:	782a      	ldrb	r2, [r5, #0]
 800e39a:	2a2a      	cmp	r2, #42	; 0x2a
 800e39c:	d015      	beq.n	800e3ca <_svfiprintf_r+0xea>
 800e39e:	462f      	mov	r7, r5
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	250a      	movs	r5, #10
 800e3a4:	9a07      	ldr	r2, [sp, #28]
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3ac:	3b30      	subs	r3, #48	; 0x30
 800e3ae:	2b09      	cmp	r3, #9
 800e3b0:	d94d      	bls.n	800e44e <_svfiprintf_r+0x16e>
 800e3b2:	b1b8      	cbz	r0, 800e3e4 <_svfiprintf_r+0x104>
 800e3b4:	e00f      	b.n	800e3d6 <_svfiprintf_r+0xf6>
 800e3b6:	462f      	mov	r7, r5
 800e3b8:	e7b8      	b.n	800e32c <_svfiprintf_r+0x4c>
 800e3ba:	4a40      	ldr	r2, [pc, #256]	; (800e4bc <_svfiprintf_r+0x1dc>)
 800e3bc:	463d      	mov	r5, r7
 800e3be:	1a80      	subs	r0, r0, r2
 800e3c0:	fa0b f000 	lsl.w	r0, fp, r0
 800e3c4:	4318      	orrs	r0, r3
 800e3c6:	9004      	str	r0, [sp, #16]
 800e3c8:	e7d3      	b.n	800e372 <_svfiprintf_r+0x92>
 800e3ca:	9a03      	ldr	r2, [sp, #12]
 800e3cc:	1d11      	adds	r1, r2, #4
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	9103      	str	r1, [sp, #12]
 800e3d2:	2a00      	cmp	r2, #0
 800e3d4:	db01      	blt.n	800e3da <_svfiprintf_r+0xfa>
 800e3d6:	9207      	str	r2, [sp, #28]
 800e3d8:	e004      	b.n	800e3e4 <_svfiprintf_r+0x104>
 800e3da:	4252      	negs	r2, r2
 800e3dc:	f043 0302 	orr.w	r3, r3, #2
 800e3e0:	9207      	str	r2, [sp, #28]
 800e3e2:	9304      	str	r3, [sp, #16]
 800e3e4:	783b      	ldrb	r3, [r7, #0]
 800e3e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e8:	d10c      	bne.n	800e404 <_svfiprintf_r+0x124>
 800e3ea:	787b      	ldrb	r3, [r7, #1]
 800e3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ee:	d133      	bne.n	800e458 <_svfiprintf_r+0x178>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	3702      	adds	r7, #2
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bfb8      	it	lt
 800e3fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e402:	9305      	str	r3, [sp, #20]
 800e404:	4d2e      	ldr	r5, [pc, #184]	; (800e4c0 <_svfiprintf_r+0x1e0>)
 800e406:	2203      	movs	r2, #3
 800e408:	7839      	ldrb	r1, [r7, #0]
 800e40a:	4628      	mov	r0, r5
 800e40c:	f7ff fa48 	bl	800d8a0 <memchr>
 800e410:	b138      	cbz	r0, 800e422 <_svfiprintf_r+0x142>
 800e412:	2340      	movs	r3, #64	; 0x40
 800e414:	1b40      	subs	r0, r0, r5
 800e416:	fa03 f000 	lsl.w	r0, r3, r0
 800e41a:	9b04      	ldr	r3, [sp, #16]
 800e41c:	3701      	adds	r7, #1
 800e41e:	4303      	orrs	r3, r0
 800e420:	9304      	str	r3, [sp, #16]
 800e422:	7839      	ldrb	r1, [r7, #0]
 800e424:	2206      	movs	r2, #6
 800e426:	4827      	ldr	r0, [pc, #156]	; (800e4c4 <_svfiprintf_r+0x1e4>)
 800e428:	1c7e      	adds	r6, r7, #1
 800e42a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e42e:	f7ff fa37 	bl	800d8a0 <memchr>
 800e432:	2800      	cmp	r0, #0
 800e434:	d038      	beq.n	800e4a8 <_svfiprintf_r+0x1c8>
 800e436:	4b24      	ldr	r3, [pc, #144]	; (800e4c8 <_svfiprintf_r+0x1e8>)
 800e438:	bb13      	cbnz	r3, 800e480 <_svfiprintf_r+0x1a0>
 800e43a:	9b03      	ldr	r3, [sp, #12]
 800e43c:	3307      	adds	r3, #7
 800e43e:	f023 0307 	bic.w	r3, r3, #7
 800e442:	3308      	adds	r3, #8
 800e444:	9303      	str	r3, [sp, #12]
 800e446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e448:	444b      	add	r3, r9
 800e44a:	9309      	str	r3, [sp, #36]	; 0x24
 800e44c:	e76d      	b.n	800e32a <_svfiprintf_r+0x4a>
 800e44e:	fb05 3202 	mla	r2, r5, r2, r3
 800e452:	2001      	movs	r0, #1
 800e454:	460f      	mov	r7, r1
 800e456:	e7a6      	b.n	800e3a6 <_svfiprintf_r+0xc6>
 800e458:	2300      	movs	r3, #0
 800e45a:	250a      	movs	r5, #10
 800e45c:	4619      	mov	r1, r3
 800e45e:	3701      	adds	r7, #1
 800e460:	9305      	str	r3, [sp, #20]
 800e462:	4638      	mov	r0, r7
 800e464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e468:	3a30      	subs	r2, #48	; 0x30
 800e46a:	2a09      	cmp	r2, #9
 800e46c:	d903      	bls.n	800e476 <_svfiprintf_r+0x196>
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0c8      	beq.n	800e404 <_svfiprintf_r+0x124>
 800e472:	9105      	str	r1, [sp, #20]
 800e474:	e7c6      	b.n	800e404 <_svfiprintf_r+0x124>
 800e476:	fb05 2101 	mla	r1, r5, r1, r2
 800e47a:	2301      	movs	r3, #1
 800e47c:	4607      	mov	r7, r0
 800e47e:	e7f0      	b.n	800e462 <_svfiprintf_r+0x182>
 800e480:	ab03      	add	r3, sp, #12
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	4622      	mov	r2, r4
 800e486:	4b11      	ldr	r3, [pc, #68]	; (800e4cc <_svfiprintf_r+0x1ec>)
 800e488:	a904      	add	r1, sp, #16
 800e48a:	4640      	mov	r0, r8
 800e48c:	f7fc fb70 	bl	800ab70 <_printf_float>
 800e490:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e494:	4681      	mov	r9, r0
 800e496:	d1d6      	bne.n	800e446 <_svfiprintf_r+0x166>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	065b      	lsls	r3, r3, #25
 800e49c:	f53f af35 	bmi.w	800e30a <_svfiprintf_r+0x2a>
 800e4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4a2:	b01d      	add	sp, #116	; 0x74
 800e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a8:	ab03      	add	r3, sp, #12
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4b07      	ldr	r3, [pc, #28]	; (800e4cc <_svfiprintf_r+0x1ec>)
 800e4b0:	a904      	add	r1, sp, #16
 800e4b2:	4640      	mov	r0, r8
 800e4b4:	f7fc fe08 	bl	800b0c8 <_printf_i>
 800e4b8:	e7ea      	b.n	800e490 <_svfiprintf_r+0x1b0>
 800e4ba:	bf00      	nop
 800e4bc:	0800f4a4 	.word	0x0800f4a4
 800e4c0:	0800f4aa 	.word	0x0800f4aa
 800e4c4:	0800f4ae 	.word	0x0800f4ae
 800e4c8:	0800ab71 	.word	0x0800ab71
 800e4cc:	0800e22d 	.word	0x0800e22d

0800e4d0 <_sungetc_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	1c4b      	adds	r3, r1, #1
 800e4d4:	4614      	mov	r4, r2
 800e4d6:	d103      	bne.n	800e4e0 <_sungetc_r+0x10>
 800e4d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e4dc:	4628      	mov	r0, r5
 800e4de:	bd38      	pop	{r3, r4, r5, pc}
 800e4e0:	8993      	ldrh	r3, [r2, #12]
 800e4e2:	b2cd      	uxtb	r5, r1
 800e4e4:	f023 0320 	bic.w	r3, r3, #32
 800e4e8:	8193      	strh	r3, [r2, #12]
 800e4ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4ec:	6852      	ldr	r2, [r2, #4]
 800e4ee:	b18b      	cbz	r3, 800e514 <_sungetc_r+0x44>
 800e4f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	dd08      	ble.n	800e508 <_sungetc_r+0x38>
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	1e5a      	subs	r2, r3, #1
 800e4fa:	6022      	str	r2, [r4, #0]
 800e4fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e500:	6863      	ldr	r3, [r4, #4]
 800e502:	3301      	adds	r3, #1
 800e504:	6063      	str	r3, [r4, #4]
 800e506:	e7e9      	b.n	800e4dc <_sungetc_r+0xc>
 800e508:	4621      	mov	r1, r4
 800e50a:	f000 fbc3 	bl	800ec94 <__submore>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0f1      	beq.n	800e4f6 <_sungetc_r+0x26>
 800e512:	e7e1      	b.n	800e4d8 <_sungetc_r+0x8>
 800e514:	6921      	ldr	r1, [r4, #16]
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	b151      	cbz	r1, 800e530 <_sungetc_r+0x60>
 800e51a:	4299      	cmp	r1, r3
 800e51c:	d208      	bcs.n	800e530 <_sungetc_r+0x60>
 800e51e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e522:	42a9      	cmp	r1, r5
 800e524:	d104      	bne.n	800e530 <_sungetc_r+0x60>
 800e526:	3b01      	subs	r3, #1
 800e528:	3201      	adds	r2, #1
 800e52a:	6023      	str	r3, [r4, #0]
 800e52c:	6062      	str	r2, [r4, #4]
 800e52e:	e7d5      	b.n	800e4dc <_sungetc_r+0xc>
 800e530:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e538:	6363      	str	r3, [r4, #52]	; 0x34
 800e53a:	2303      	movs	r3, #3
 800e53c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e53e:	4623      	mov	r3, r4
 800e540:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	2301      	movs	r3, #1
 800e548:	e7dc      	b.n	800e504 <_sungetc_r+0x34>

0800e54a <__ssrefill_r>:
 800e54a:	b510      	push	{r4, lr}
 800e54c:	460c      	mov	r4, r1
 800e54e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e550:	b169      	cbz	r1, 800e56e <__ssrefill_r+0x24>
 800e552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e556:	4299      	cmp	r1, r3
 800e558:	d001      	beq.n	800e55e <__ssrefill_r+0x14>
 800e55a:	f7ff fdc1 	bl	800e0e0 <_free_r>
 800e55e:	2000      	movs	r0, #0
 800e560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e562:	6360      	str	r0, [r4, #52]	; 0x34
 800e564:	6063      	str	r3, [r4, #4]
 800e566:	b113      	cbz	r3, 800e56e <__ssrefill_r+0x24>
 800e568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e56a:	6023      	str	r3, [r4, #0]
 800e56c:	bd10      	pop	{r4, pc}
 800e56e:	6923      	ldr	r3, [r4, #16]
 800e570:	f04f 30ff 	mov.w	r0, #4294967295
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	2300      	movs	r3, #0
 800e578:	6063      	str	r3, [r4, #4]
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	f043 0320 	orr.w	r3, r3, #32
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	e7f3      	b.n	800e56c <__ssrefill_r+0x22>

0800e584 <__ssvfiscanf_r>:
 800e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e588:	460c      	mov	r4, r1
 800e58a:	2100      	movs	r1, #0
 800e58c:	4606      	mov	r6, r0
 800e58e:	4692      	mov	sl, r2
 800e590:	270a      	movs	r7, #10
 800e592:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800e596:	9144      	str	r1, [sp, #272]	; 0x110
 800e598:	9145      	str	r1, [sp, #276]	; 0x114
 800e59a:	499e      	ldr	r1, [pc, #632]	; (800e814 <__ssvfiscanf_r+0x290>)
 800e59c:	f10d 0804 	add.w	r8, sp, #4
 800e5a0:	91a0      	str	r1, [sp, #640]	; 0x280
 800e5a2:	499d      	ldr	r1, [pc, #628]	; (800e818 <__ssvfiscanf_r+0x294>)
 800e5a4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800e81c <__ssvfiscanf_r+0x298>
 800e5a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e5ac:	91a1      	str	r1, [sp, #644]	; 0x284
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 812a 	beq.w	800e80e <__ssvfiscanf_r+0x28a>
 800e5ba:	4655      	mov	r5, sl
 800e5bc:	f7ff f938 	bl	800d830 <__locale_ctype_ptr>
 800e5c0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800e5c4:	4458      	add	r0, fp
 800e5c6:	7843      	ldrb	r3, [r0, #1]
 800e5c8:	f013 0308 	ands.w	r3, r3, #8
 800e5cc:	d01c      	beq.n	800e608 <__ssvfiscanf_r+0x84>
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	dd12      	ble.n	800e5fa <__ssvfiscanf_r+0x76>
 800e5d4:	f7ff f92c 	bl	800d830 <__locale_ctype_ptr>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	781a      	ldrb	r2, [r3, #0]
 800e5dc:	4410      	add	r0, r2
 800e5de:	7842      	ldrb	r2, [r0, #1]
 800e5e0:	0712      	lsls	r2, r2, #28
 800e5e2:	d401      	bmi.n	800e5e8 <__ssvfiscanf_r+0x64>
 800e5e4:	46aa      	mov	sl, r5
 800e5e6:	e7e3      	b.n	800e5b0 <__ssvfiscanf_r+0x2c>
 800e5e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	3201      	adds	r2, #1
 800e5ee:	9245      	str	r2, [sp, #276]	; 0x114
 800e5f0:	6862      	ldr	r2, [r4, #4]
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	3a01      	subs	r2, #1
 800e5f6:	6062      	str	r2, [r4, #4]
 800e5f8:	e7e9      	b.n	800e5ce <__ssvfiscanf_r+0x4a>
 800e5fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	4630      	mov	r0, r6
 800e600:	4798      	blx	r3
 800e602:	2800      	cmp	r0, #0
 800e604:	d0e6      	beq.n	800e5d4 <__ssvfiscanf_r+0x50>
 800e606:	e7ed      	b.n	800e5e4 <__ssvfiscanf_r+0x60>
 800e608:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800e60c:	f040 8082 	bne.w	800e714 <__ssvfiscanf_r+0x190>
 800e610:	9343      	str	r3, [sp, #268]	; 0x10c
 800e612:	9341      	str	r3, [sp, #260]	; 0x104
 800e614:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800e618:	2b2a      	cmp	r3, #42	; 0x2a
 800e61a:	d103      	bne.n	800e624 <__ssvfiscanf_r+0xa0>
 800e61c:	2310      	movs	r3, #16
 800e61e:	f10a 0502 	add.w	r5, sl, #2
 800e622:	9341      	str	r3, [sp, #260]	; 0x104
 800e624:	46aa      	mov	sl, r5
 800e626:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e62a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e62e:	2a09      	cmp	r2, #9
 800e630:	d922      	bls.n	800e678 <__ssvfiscanf_r+0xf4>
 800e632:	2203      	movs	r2, #3
 800e634:	4879      	ldr	r0, [pc, #484]	; (800e81c <__ssvfiscanf_r+0x298>)
 800e636:	f7ff f933 	bl	800d8a0 <memchr>
 800e63a:	b138      	cbz	r0, 800e64c <__ssvfiscanf_r+0xc8>
 800e63c:	eba0 0309 	sub.w	r3, r0, r9
 800e640:	2001      	movs	r0, #1
 800e642:	46aa      	mov	sl, r5
 800e644:	4098      	lsls	r0, r3
 800e646:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e648:	4318      	orrs	r0, r3
 800e64a:	9041      	str	r0, [sp, #260]	; 0x104
 800e64c:	f89a 3000 	ldrb.w	r3, [sl]
 800e650:	f10a 0501 	add.w	r5, sl, #1
 800e654:	2b67      	cmp	r3, #103	; 0x67
 800e656:	d82b      	bhi.n	800e6b0 <__ssvfiscanf_r+0x12c>
 800e658:	2b65      	cmp	r3, #101	; 0x65
 800e65a:	f080 809f 	bcs.w	800e79c <__ssvfiscanf_r+0x218>
 800e65e:	2b47      	cmp	r3, #71	; 0x47
 800e660:	d810      	bhi.n	800e684 <__ssvfiscanf_r+0x100>
 800e662:	2b45      	cmp	r3, #69	; 0x45
 800e664:	f080 809a 	bcs.w	800e79c <__ssvfiscanf_r+0x218>
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d06c      	beq.n	800e746 <__ssvfiscanf_r+0x1c2>
 800e66c:	2b25      	cmp	r3, #37	; 0x25
 800e66e:	d051      	beq.n	800e714 <__ssvfiscanf_r+0x190>
 800e670:	2303      	movs	r3, #3
 800e672:	9742      	str	r7, [sp, #264]	; 0x108
 800e674:	9347      	str	r3, [sp, #284]	; 0x11c
 800e676:	e027      	b.n	800e6c8 <__ssvfiscanf_r+0x144>
 800e678:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e67a:	fb07 1303 	mla	r3, r7, r3, r1
 800e67e:	3b30      	subs	r3, #48	; 0x30
 800e680:	9343      	str	r3, [sp, #268]	; 0x10c
 800e682:	e7cf      	b.n	800e624 <__ssvfiscanf_r+0xa0>
 800e684:	2b5b      	cmp	r3, #91	; 0x5b
 800e686:	d06a      	beq.n	800e75e <__ssvfiscanf_r+0x1da>
 800e688:	d80c      	bhi.n	800e6a4 <__ssvfiscanf_r+0x120>
 800e68a:	2b58      	cmp	r3, #88	; 0x58
 800e68c:	d1f0      	bne.n	800e670 <__ssvfiscanf_r+0xec>
 800e68e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e694:	9241      	str	r2, [sp, #260]	; 0x104
 800e696:	2210      	movs	r2, #16
 800e698:	9242      	str	r2, [sp, #264]	; 0x108
 800e69a:	2b6e      	cmp	r3, #110	; 0x6e
 800e69c:	bf8c      	ite	hi
 800e69e:	2304      	movhi	r3, #4
 800e6a0:	2303      	movls	r3, #3
 800e6a2:	e010      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e6a4:	2b63      	cmp	r3, #99	; 0x63
 800e6a6:	d065      	beq.n	800e774 <__ssvfiscanf_r+0x1f0>
 800e6a8:	2b64      	cmp	r3, #100	; 0x64
 800e6aa:	d1e1      	bne.n	800e670 <__ssvfiscanf_r+0xec>
 800e6ac:	9742      	str	r7, [sp, #264]	; 0x108
 800e6ae:	e7f4      	b.n	800e69a <__ssvfiscanf_r+0x116>
 800e6b0:	2b70      	cmp	r3, #112	; 0x70
 800e6b2:	d04b      	beq.n	800e74c <__ssvfiscanf_r+0x1c8>
 800e6b4:	d826      	bhi.n	800e704 <__ssvfiscanf_r+0x180>
 800e6b6:	2b6e      	cmp	r3, #110	; 0x6e
 800e6b8:	d062      	beq.n	800e780 <__ssvfiscanf_r+0x1fc>
 800e6ba:	d84c      	bhi.n	800e756 <__ssvfiscanf_r+0x1d2>
 800e6bc:	2b69      	cmp	r3, #105	; 0x69
 800e6be:	d1d7      	bne.n	800e670 <__ssvfiscanf_r+0xec>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	9342      	str	r3, [sp, #264]	; 0x108
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e6c8:	6863      	ldr	r3, [r4, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	dd68      	ble.n	800e7a0 <__ssvfiscanf_r+0x21c>
 800e6ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6d0:	0659      	lsls	r1, r3, #25
 800e6d2:	d407      	bmi.n	800e6e4 <__ssvfiscanf_r+0x160>
 800e6d4:	f7ff f8ac 	bl	800d830 <__locale_ctype_ptr>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	781a      	ldrb	r2, [r3, #0]
 800e6dc:	4410      	add	r0, r2
 800e6de:	7842      	ldrb	r2, [r0, #1]
 800e6e0:	0712      	lsls	r2, r2, #28
 800e6e2:	d464      	bmi.n	800e7ae <__ssvfiscanf_r+0x22a>
 800e6e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e6e6:	2b02      	cmp	r3, #2
 800e6e8:	dc73      	bgt.n	800e7d2 <__ssvfiscanf_r+0x24e>
 800e6ea:	466b      	mov	r3, sp
 800e6ec:	4622      	mov	r2, r4
 800e6ee:	a941      	add	r1, sp, #260	; 0x104
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f000 f897 	bl	800e824 <_scanf_chars>
 800e6f6:	2801      	cmp	r0, #1
 800e6f8:	f000 8089 	beq.w	800e80e <__ssvfiscanf_r+0x28a>
 800e6fc:	2802      	cmp	r0, #2
 800e6fe:	f47f af71 	bne.w	800e5e4 <__ssvfiscanf_r+0x60>
 800e702:	e01d      	b.n	800e740 <__ssvfiscanf_r+0x1bc>
 800e704:	2b75      	cmp	r3, #117	; 0x75
 800e706:	d0d1      	beq.n	800e6ac <__ssvfiscanf_r+0x128>
 800e708:	2b78      	cmp	r3, #120	; 0x78
 800e70a:	d0c0      	beq.n	800e68e <__ssvfiscanf_r+0x10a>
 800e70c:	2b73      	cmp	r3, #115	; 0x73
 800e70e:	d1af      	bne.n	800e670 <__ssvfiscanf_r+0xec>
 800e710:	2302      	movs	r3, #2
 800e712:	e7d8      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e714:	6863      	ldr	r3, [r4, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	dd0c      	ble.n	800e734 <__ssvfiscanf_r+0x1b0>
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	781a      	ldrb	r2, [r3, #0]
 800e71e:	455a      	cmp	r2, fp
 800e720:	d175      	bne.n	800e80e <__ssvfiscanf_r+0x28a>
 800e722:	3301      	adds	r3, #1
 800e724:	6862      	ldr	r2, [r4, #4]
 800e726:	6023      	str	r3, [r4, #0]
 800e728:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e72a:	3a01      	subs	r2, #1
 800e72c:	3301      	adds	r3, #1
 800e72e:	6062      	str	r2, [r4, #4]
 800e730:	9345      	str	r3, [sp, #276]	; 0x114
 800e732:	e757      	b.n	800e5e4 <__ssvfiscanf_r+0x60>
 800e734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e736:	4621      	mov	r1, r4
 800e738:	4630      	mov	r0, r6
 800e73a:	4798      	blx	r3
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d0ec      	beq.n	800e71a <__ssvfiscanf_r+0x196>
 800e740:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e742:	2800      	cmp	r0, #0
 800e744:	d159      	bne.n	800e7fa <__ssvfiscanf_r+0x276>
 800e746:	f04f 30ff 	mov.w	r0, #4294967295
 800e74a:	e05c      	b.n	800e806 <__ssvfiscanf_r+0x282>
 800e74c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e74e:	f042 0220 	orr.w	r2, r2, #32
 800e752:	9241      	str	r2, [sp, #260]	; 0x104
 800e754:	e79b      	b.n	800e68e <__ssvfiscanf_r+0x10a>
 800e756:	2308      	movs	r3, #8
 800e758:	9342      	str	r3, [sp, #264]	; 0x108
 800e75a:	2304      	movs	r3, #4
 800e75c:	e7b3      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e75e:	4629      	mov	r1, r5
 800e760:	4640      	mov	r0, r8
 800e762:	f000 f9c7 	bl	800eaf4 <__sccl>
 800e766:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e768:	4605      	mov	r5, r0
 800e76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e76e:	9341      	str	r3, [sp, #260]	; 0x104
 800e770:	2301      	movs	r3, #1
 800e772:	e7a8      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e774:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e77a:	9341      	str	r3, [sp, #260]	; 0x104
 800e77c:	2300      	movs	r3, #0
 800e77e:	e7a2      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e780:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e782:	06c3      	lsls	r3, r0, #27
 800e784:	f53f af2e 	bmi.w	800e5e4 <__ssvfiscanf_r+0x60>
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e78c:	1d19      	adds	r1, r3, #4
 800e78e:	9100      	str	r1, [sp, #0]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	07c0      	lsls	r0, r0, #31
 800e794:	bf4c      	ite	mi
 800e796:	801a      	strhmi	r2, [r3, #0]
 800e798:	601a      	strpl	r2, [r3, #0]
 800e79a:	e723      	b.n	800e5e4 <__ssvfiscanf_r+0x60>
 800e79c:	2305      	movs	r3, #5
 800e79e:	e792      	b.n	800e6c6 <__ssvfiscanf_r+0x142>
 800e7a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4798      	blx	r3
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d090      	beq.n	800e6ce <__ssvfiscanf_r+0x14a>
 800e7ac:	e7c8      	b.n	800e740 <__ssvfiscanf_r+0x1bc>
 800e7ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7b0:	3201      	adds	r2, #1
 800e7b2:	9245      	str	r2, [sp, #276]	; 0x114
 800e7b4:	6862      	ldr	r2, [r4, #4]
 800e7b6:	3a01      	subs	r2, #1
 800e7b8:	2a00      	cmp	r2, #0
 800e7ba:	6062      	str	r2, [r4, #4]
 800e7bc:	dd02      	ble.n	800e7c4 <__ssvfiscanf_r+0x240>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	e787      	b.n	800e6d4 <__ssvfiscanf_r+0x150>
 800e7c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	4798      	blx	r3
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d081      	beq.n	800e6d4 <__ssvfiscanf_r+0x150>
 800e7d0:	e7b6      	b.n	800e740 <__ssvfiscanf_r+0x1bc>
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	dc06      	bgt.n	800e7e4 <__ssvfiscanf_r+0x260>
 800e7d6:	466b      	mov	r3, sp
 800e7d8:	4622      	mov	r2, r4
 800e7da:	a941      	add	r1, sp, #260	; 0x104
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f000 f883 	bl	800e8e8 <_scanf_i>
 800e7e2:	e788      	b.n	800e6f6 <__ssvfiscanf_r+0x172>
 800e7e4:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <__ssvfiscanf_r+0x29c>)
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f43f aefc 	beq.w	800e5e4 <__ssvfiscanf_r+0x60>
 800e7ec:	466b      	mov	r3, sp
 800e7ee:	4622      	mov	r2, r4
 800e7f0:	a941      	add	r1, sp, #260	; 0x104
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f7fc fd7a 	bl	800b2ec <_scanf_float>
 800e7f8:	e77d      	b.n	800e6f6 <__ssvfiscanf_r+0x172>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e800:	bf18      	it	ne
 800e802:	f04f 30ff 	movne.w	r0, #4294967295
 800e806:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800e80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e810:	e7f9      	b.n	800e806 <__ssvfiscanf_r+0x282>
 800e812:	bf00      	nop
 800e814:	0800e4d1 	.word	0x0800e4d1
 800e818:	0800e54b 	.word	0x0800e54b
 800e81c:	0800f4aa 	.word	0x0800f4aa
 800e820:	0800b2ed 	.word	0x0800b2ed

0800e824 <_scanf_chars>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	4615      	mov	r5, r2
 800e82a:	688a      	ldr	r2, [r1, #8]
 800e82c:	4680      	mov	r8, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	b932      	cbnz	r2, 800e840 <_scanf_chars+0x1c>
 800e832:	698a      	ldr	r2, [r1, #24]
 800e834:	2a00      	cmp	r2, #0
 800e836:	bf14      	ite	ne
 800e838:	f04f 32ff 	movne.w	r2, #4294967295
 800e83c:	2201      	moveq	r2, #1
 800e83e:	608a      	str	r2, [r1, #8]
 800e840:	2600      	movs	r6, #0
 800e842:	6822      	ldr	r2, [r4, #0]
 800e844:	06d1      	lsls	r1, r2, #27
 800e846:	bf5f      	itttt	pl
 800e848:	681a      	ldrpl	r2, [r3, #0]
 800e84a:	1d11      	addpl	r1, r2, #4
 800e84c:	6019      	strpl	r1, [r3, #0]
 800e84e:	6817      	ldrpl	r7, [r2, #0]
 800e850:	69a3      	ldr	r3, [r4, #24]
 800e852:	b1db      	cbz	r3, 800e88c <_scanf_chars+0x68>
 800e854:	2b01      	cmp	r3, #1
 800e856:	d107      	bne.n	800e868 <_scanf_chars+0x44>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	6962      	ldr	r2, [r4, #20]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	5cd3      	ldrb	r3, [r2, r3]
 800e860:	b9a3      	cbnz	r3, 800e88c <_scanf_chars+0x68>
 800e862:	2e00      	cmp	r6, #0
 800e864:	d131      	bne.n	800e8ca <_scanf_chars+0xa6>
 800e866:	e006      	b.n	800e876 <_scanf_chars+0x52>
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d007      	beq.n	800e87c <_scanf_chars+0x58>
 800e86c:	2e00      	cmp	r6, #0
 800e86e:	d12c      	bne.n	800e8ca <_scanf_chars+0xa6>
 800e870:	69a3      	ldr	r3, [r4, #24]
 800e872:	2b01      	cmp	r3, #1
 800e874:	d129      	bne.n	800e8ca <_scanf_chars+0xa6>
 800e876:	2001      	movs	r0, #1
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87c:	f7fe ffd8 	bl	800d830 <__locale_ctype_ptr>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	4418      	add	r0, r3
 800e886:	7843      	ldrb	r3, [r0, #1]
 800e888:	071b      	lsls	r3, r3, #28
 800e88a:	d4ef      	bmi.n	800e86c <_scanf_chars+0x48>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	3601      	adds	r6, #1
 800e890:	06da      	lsls	r2, r3, #27
 800e892:	bf5e      	ittt	pl
 800e894:	682b      	ldrpl	r3, [r5, #0]
 800e896:	781b      	ldrbpl	r3, [r3, #0]
 800e898:	703b      	strbpl	r3, [r7, #0]
 800e89a:	682a      	ldr	r2, [r5, #0]
 800e89c:	686b      	ldr	r3, [r5, #4]
 800e89e:	f102 0201 	add.w	r2, r2, #1
 800e8a2:	602a      	str	r2, [r5, #0]
 800e8a4:	68a2      	ldr	r2, [r4, #8]
 800e8a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8aa:	f102 32ff 	add.w	r2, r2, #4294967295
 800e8ae:	606b      	str	r3, [r5, #4]
 800e8b0:	bf58      	it	pl
 800e8b2:	3701      	addpl	r7, #1
 800e8b4:	60a2      	str	r2, [r4, #8]
 800e8b6:	b142      	cbz	r2, 800e8ca <_scanf_chars+0xa6>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dcc9      	bgt.n	800e850 <_scanf_chars+0x2c>
 800e8bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	4798      	blx	r3
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d0c2      	beq.n	800e850 <_scanf_chars+0x2c>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	f013 0310 	ands.w	r3, r3, #16
 800e8d0:	d105      	bne.n	800e8de <_scanf_chars+0xba>
 800e8d2:	68e2      	ldr	r2, [r4, #12]
 800e8d4:	3201      	adds	r2, #1
 800e8d6:	60e2      	str	r2, [r4, #12]
 800e8d8:	69a2      	ldr	r2, [r4, #24]
 800e8da:	b102      	cbz	r2, 800e8de <_scanf_chars+0xba>
 800e8dc:	703b      	strb	r3, [r7, #0]
 800e8de:	6923      	ldr	r3, [r4, #16]
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	441e      	add	r6, r3
 800e8e4:	6126      	str	r6, [r4, #16]
 800e8e6:	e7c7      	b.n	800e878 <_scanf_chars+0x54>

0800e8e8 <_scanf_i>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	469a      	mov	sl, r3
 800e8f0:	4b74      	ldr	r3, [pc, #464]	; (800eac4 <_scanf_i+0x1dc>)
 800e8f2:	b087      	sub	sp, #28
 800e8f4:	4683      	mov	fp, r0
 800e8f6:	4616      	mov	r6, r2
 800e8f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e8fc:	ab03      	add	r3, sp, #12
 800e8fe:	68a7      	ldr	r7, [r4, #8]
 800e900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e904:	4b70      	ldr	r3, [pc, #448]	; (800eac8 <_scanf_i+0x1e0>)
 800e906:	69a1      	ldr	r1, [r4, #24]
 800e908:	4a70      	ldr	r2, [pc, #448]	; (800eacc <_scanf_i+0x1e4>)
 800e90a:	f104 091c 	add.w	r9, r4, #28
 800e90e:	2903      	cmp	r1, #3
 800e910:	bf08      	it	eq
 800e912:	461a      	moveq	r2, r3
 800e914:	1e7b      	subs	r3, r7, #1
 800e916:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800e91a:	bf84      	itt	hi
 800e91c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e920:	60a3      	strhi	r3, [r4, #8]
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	bf88      	it	hi
 800e926:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e92a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	bf98      	it	ls
 800e932:	2700      	movls	r7, #0
 800e934:	464b      	mov	r3, r9
 800e936:	f04f 0800 	mov.w	r8, #0
 800e93a:	9200      	str	r2, [sp, #0]
 800e93c:	bf88      	it	hi
 800e93e:	197f      	addhi	r7, r7, r5
 800e940:	6831      	ldr	r1, [r6, #0]
 800e942:	9301      	str	r3, [sp, #4]
 800e944:	ab03      	add	r3, sp, #12
 800e946:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e94a:	2202      	movs	r2, #2
 800e94c:	7809      	ldrb	r1, [r1, #0]
 800e94e:	f7fe ffa7 	bl	800d8a0 <memchr>
 800e952:	9b01      	ldr	r3, [sp, #4]
 800e954:	b330      	cbz	r0, 800e9a4 <_scanf_i+0xbc>
 800e956:	f1b8 0f01 	cmp.w	r8, #1
 800e95a:	d15a      	bne.n	800ea12 <_scanf_i+0x12a>
 800e95c:	6862      	ldr	r2, [r4, #4]
 800e95e:	b92a      	cbnz	r2, 800e96c <_scanf_i+0x84>
 800e960:	2108      	movs	r1, #8
 800e962:	6822      	ldr	r2, [r4, #0]
 800e964:	6061      	str	r1, [r4, #4]
 800e966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e96a:	6022      	str	r2, [r4, #0]
 800e96c:	6822      	ldr	r2, [r4, #0]
 800e96e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e972:	6022      	str	r2, [r4, #0]
 800e974:	68a2      	ldr	r2, [r4, #8]
 800e976:	1e51      	subs	r1, r2, #1
 800e978:	60a1      	str	r1, [r4, #8]
 800e97a:	b19a      	cbz	r2, 800e9a4 <_scanf_i+0xbc>
 800e97c:	6832      	ldr	r2, [r6, #0]
 800e97e:	1c5d      	adds	r5, r3, #1
 800e980:	1c51      	adds	r1, r2, #1
 800e982:	6031      	str	r1, [r6, #0]
 800e984:	7812      	ldrb	r2, [r2, #0]
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	6873      	ldr	r3, [r6, #4]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	6073      	str	r3, [r6, #4]
 800e990:	dc07      	bgt.n	800e9a2 <_scanf_i+0xba>
 800e992:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e996:	4631      	mov	r1, r6
 800e998:	4658      	mov	r0, fp
 800e99a:	4798      	blx	r3
 800e99c:	2800      	cmp	r0, #0
 800e99e:	f040 8087 	bne.w	800eab0 <_scanf_i+0x1c8>
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	f108 0801 	add.w	r8, r8, #1
 800e9a8:	f1b8 0f03 	cmp.w	r8, #3
 800e9ac:	d1c8      	bne.n	800e940 <_scanf_i+0x58>
 800e9ae:	6862      	ldr	r2, [r4, #4]
 800e9b0:	b90a      	cbnz	r2, 800e9b6 <_scanf_i+0xce>
 800e9b2:	220a      	movs	r2, #10
 800e9b4:	6062      	str	r2, [r4, #4]
 800e9b6:	6862      	ldr	r2, [r4, #4]
 800e9b8:	4945      	ldr	r1, [pc, #276]	; (800ead0 <_scanf_i+0x1e8>)
 800e9ba:	6960      	ldr	r0, [r4, #20]
 800e9bc:	1a89      	subs	r1, r1, r2
 800e9be:	9301      	str	r3, [sp, #4]
 800e9c0:	f000 f898 	bl	800eaf4 <__sccl>
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	f04f 0800 	mov.w	r8, #0
 800e9ca:	461d      	mov	r5, r3
 800e9cc:	68a3      	ldr	r3, [r4, #8]
 800e9ce:	6822      	ldr	r2, [r4, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d03b      	beq.n	800ea4c <_scanf_i+0x164>
 800e9d4:	6831      	ldr	r1, [r6, #0]
 800e9d6:	6960      	ldr	r0, [r4, #20]
 800e9d8:	f891 c000 	ldrb.w	ip, [r1]
 800e9dc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d033      	beq.n	800ea4c <_scanf_i+0x164>
 800e9e4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e9e8:	d121      	bne.n	800ea2e <_scanf_i+0x146>
 800e9ea:	0510      	lsls	r0, r2, #20
 800e9ec:	d51f      	bpl.n	800ea2e <_scanf_i+0x146>
 800e9ee:	f108 0801 	add.w	r8, r8, #1
 800e9f2:	b117      	cbz	r7, 800e9fa <_scanf_i+0x112>
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	3f01      	subs	r7, #1
 800e9f8:	60a3      	str	r3, [r4, #8]
 800e9fa:	6873      	ldr	r3, [r6, #4]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	6073      	str	r3, [r6, #4]
 800ea02:	dd1c      	ble.n	800ea3e <_scanf_i+0x156>
 800ea04:	6833      	ldr	r3, [r6, #0]
 800ea06:	3301      	adds	r3, #1
 800ea08:	6033      	str	r3, [r6, #0]
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	60a3      	str	r3, [r4, #8]
 800ea10:	e7dc      	b.n	800e9cc <_scanf_i+0xe4>
 800ea12:	f1b8 0f02 	cmp.w	r8, #2
 800ea16:	d1ad      	bne.n	800e974 <_scanf_i+0x8c>
 800ea18:	6822      	ldr	r2, [r4, #0]
 800ea1a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ea1e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ea22:	d1bf      	bne.n	800e9a4 <_scanf_i+0xbc>
 800ea24:	2110      	movs	r1, #16
 800ea26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea2a:	6061      	str	r1, [r4, #4]
 800ea2c:	e7a1      	b.n	800e972 <_scanf_i+0x8a>
 800ea2e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	780b      	ldrb	r3, [r1, #0]
 800ea36:	3501      	adds	r5, #1
 800ea38:	f805 3c01 	strb.w	r3, [r5, #-1]
 800ea3c:	e7dd      	b.n	800e9fa <_scanf_i+0x112>
 800ea3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea42:	4631      	mov	r1, r6
 800ea44:	4658      	mov	r0, fp
 800ea46:	4798      	blx	r3
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d0de      	beq.n	800ea0a <_scanf_i+0x122>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	05d9      	lsls	r1, r3, #23
 800ea50:	d50c      	bpl.n	800ea6c <_scanf_i+0x184>
 800ea52:	454d      	cmp	r5, r9
 800ea54:	d908      	bls.n	800ea68 <_scanf_i+0x180>
 800ea56:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea5a:	1e6f      	subs	r7, r5, #1
 800ea5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea60:	4632      	mov	r2, r6
 800ea62:	4658      	mov	r0, fp
 800ea64:	4798      	blx	r3
 800ea66:	463d      	mov	r5, r7
 800ea68:	454d      	cmp	r5, r9
 800ea6a:	d029      	beq.n	800eac0 <_scanf_i+0x1d8>
 800ea6c:	6822      	ldr	r2, [r4, #0]
 800ea6e:	f012 0210 	ands.w	r2, r2, #16
 800ea72:	d113      	bne.n	800ea9c <_scanf_i+0x1b4>
 800ea74:	702a      	strb	r2, [r5, #0]
 800ea76:	6863      	ldr	r3, [r4, #4]
 800ea78:	4649      	mov	r1, r9
 800ea7a:	4658      	mov	r0, fp
 800ea7c:	9e00      	ldr	r6, [sp, #0]
 800ea7e:	47b0      	blx	r6
 800ea80:	f8da 3000 	ldr.w	r3, [sl]
 800ea84:	6821      	ldr	r1, [r4, #0]
 800ea86:	1d1a      	adds	r2, r3, #4
 800ea88:	f8ca 2000 	str.w	r2, [sl]
 800ea8c:	f011 0f20 	tst.w	r1, #32
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	d010      	beq.n	800eab6 <_scanf_i+0x1ce>
 800ea94:	6018      	str	r0, [r3, #0]
 800ea96:	68e3      	ldr	r3, [r4, #12]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	60e3      	str	r3, [r4, #12]
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	eba5 0509 	sub.w	r5, r5, r9
 800eaa2:	44a8      	add	r8, r5
 800eaa4:	6925      	ldr	r5, [r4, #16]
 800eaa6:	4445      	add	r5, r8
 800eaa8:	6125      	str	r5, [r4, #16]
 800eaaa:	b007      	add	sp, #28
 800eaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab0:	f04f 0800 	mov.w	r8, #0
 800eab4:	e7ca      	b.n	800ea4c <_scanf_i+0x164>
 800eab6:	07ca      	lsls	r2, r1, #31
 800eab8:	bf4c      	ite	mi
 800eaba:	8018      	strhmi	r0, [r3, #0]
 800eabc:	6018      	strpl	r0, [r3, #0]
 800eabe:	e7ea      	b.n	800ea96 <_scanf_i+0x1ae>
 800eac0:	2001      	movs	r0, #1
 800eac2:	e7f2      	b.n	800eaaa <_scanf_i+0x1c2>
 800eac4:	0800f1bc 	.word	0x0800f1bc
 800eac8:	0800c505 	.word	0x0800c505
 800eacc:	0800ec71 	.word	0x0800ec71
 800ead0:	0800f4c5 	.word	0x0800f4c5

0800ead4 <_sbrk_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	2300      	movs	r3, #0
 800ead8:	4c05      	ldr	r4, [pc, #20]	; (800eaf0 <_sbrk_r+0x1c>)
 800eada:	4605      	mov	r5, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	f7f5 fb8c 	bl	80041fc <_sbrk>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_sbrk_r+0x1a>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_sbrk_r+0x1a>
 800eaec:	602b      	str	r3, [r5, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	200019c8 	.word	0x200019c8

0800eaf4 <__sccl>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	780b      	ldrb	r3, [r1, #0]
 800eaf8:	1e44      	subs	r4, r0, #1
 800eafa:	2b5e      	cmp	r3, #94	; 0x5e
 800eafc:	bf13      	iteet	ne
 800eafe:	1c4a      	addne	r2, r1, #1
 800eb00:	1c8a      	addeq	r2, r1, #2
 800eb02:	784b      	ldrbeq	r3, [r1, #1]
 800eb04:	2100      	movne	r1, #0
 800eb06:	bf08      	it	eq
 800eb08:	2101      	moveq	r1, #1
 800eb0a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800eb0e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800eb12:	42ac      	cmp	r4, r5
 800eb14:	d1fb      	bne.n	800eb0e <__sccl+0x1a>
 800eb16:	b913      	cbnz	r3, 800eb1e <__sccl+0x2a>
 800eb18:	3a01      	subs	r2, #1
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
 800eb1e:	f081 0401 	eor.w	r4, r1, #1
 800eb22:	54c4      	strb	r4, [r0, r3]
 800eb24:	1c51      	adds	r1, r2, #1
 800eb26:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800eb2a:	1e4e      	subs	r6, r1, #1
 800eb2c:	2d2d      	cmp	r5, #45	; 0x2d
 800eb2e:	460a      	mov	r2, r1
 800eb30:	d006      	beq.n	800eb40 <__sccl+0x4c>
 800eb32:	2d5d      	cmp	r5, #93	; 0x5d
 800eb34:	d0f1      	beq.n	800eb1a <__sccl+0x26>
 800eb36:	b90d      	cbnz	r5, 800eb3c <__sccl+0x48>
 800eb38:	4632      	mov	r2, r6
 800eb3a:	e7ee      	b.n	800eb1a <__sccl+0x26>
 800eb3c:	462b      	mov	r3, r5
 800eb3e:	e7f0      	b.n	800eb22 <__sccl+0x2e>
 800eb40:	780e      	ldrb	r6, [r1, #0]
 800eb42:	2e5d      	cmp	r6, #93	; 0x5d
 800eb44:	d0fa      	beq.n	800eb3c <__sccl+0x48>
 800eb46:	42b3      	cmp	r3, r6
 800eb48:	dcf8      	bgt.n	800eb3c <__sccl+0x48>
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	429e      	cmp	r6, r3
 800eb4e:	54c4      	strb	r4, [r0, r3]
 800eb50:	dcfb      	bgt.n	800eb4a <__sccl+0x56>
 800eb52:	3102      	adds	r1, #2
 800eb54:	e7e7      	b.n	800eb26 <__sccl+0x32>

0800eb56 <strncmp>:
 800eb56:	b510      	push	{r4, lr}
 800eb58:	b16a      	cbz	r2, 800eb76 <strncmp+0x20>
 800eb5a:	3901      	subs	r1, #1
 800eb5c:	1884      	adds	r4, r0, r2
 800eb5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800eb62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d103      	bne.n	800eb72 <strncmp+0x1c>
 800eb6a:	42a0      	cmp	r0, r4
 800eb6c:	d001      	beq.n	800eb72 <strncmp+0x1c>
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1f5      	bne.n	800eb5e <strncmp+0x8>
 800eb72:	1a98      	subs	r0, r3, r2
 800eb74:	bd10      	pop	{r4, pc}
 800eb76:	4610      	mov	r0, r2
 800eb78:	e7fc      	b.n	800eb74 <strncmp+0x1e>

0800eb7a <_strtoul_l.isra.0>:
 800eb7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb7e:	4680      	mov	r8, r0
 800eb80:	4689      	mov	r9, r1
 800eb82:	4692      	mov	sl, r2
 800eb84:	461e      	mov	r6, r3
 800eb86:	460f      	mov	r7, r1
 800eb88:	463d      	mov	r5, r7
 800eb8a:	9808      	ldr	r0, [sp, #32]
 800eb8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb90:	f7fe fe4a 	bl	800d828 <__locale_ctype_ptr_l>
 800eb94:	4420      	add	r0, r4
 800eb96:	7843      	ldrb	r3, [r0, #1]
 800eb98:	f013 0308 	ands.w	r3, r3, #8
 800eb9c:	d130      	bne.n	800ec00 <_strtoul_l.isra.0+0x86>
 800eb9e:	2c2d      	cmp	r4, #45	; 0x2d
 800eba0:	d130      	bne.n	800ec04 <_strtoul_l.isra.0+0x8a>
 800eba2:	2101      	movs	r1, #1
 800eba4:	787c      	ldrb	r4, [r7, #1]
 800eba6:	1cbd      	adds	r5, r7, #2
 800eba8:	2e00      	cmp	r6, #0
 800ebaa:	d05c      	beq.n	800ec66 <_strtoul_l.isra.0+0xec>
 800ebac:	2e10      	cmp	r6, #16
 800ebae:	d109      	bne.n	800ebc4 <_strtoul_l.isra.0+0x4a>
 800ebb0:	2c30      	cmp	r4, #48	; 0x30
 800ebb2:	d107      	bne.n	800ebc4 <_strtoul_l.isra.0+0x4a>
 800ebb4:	782b      	ldrb	r3, [r5, #0]
 800ebb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ebba:	2b58      	cmp	r3, #88	; 0x58
 800ebbc:	d14e      	bne.n	800ec5c <_strtoul_l.isra.0+0xe2>
 800ebbe:	2610      	movs	r6, #16
 800ebc0:	786c      	ldrb	r4, [r5, #1]
 800ebc2:	3502      	adds	r5, #2
 800ebc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc8:	fbb2 f2f6 	udiv	r2, r2, r6
 800ebcc:	2300      	movs	r3, #0
 800ebce:	fb06 fc02 	mul.w	ip, r6, r2
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	ea6f 0c0c 	mvn.w	ip, ip
 800ebd8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ebdc:	2f09      	cmp	r7, #9
 800ebde:	d817      	bhi.n	800ec10 <_strtoul_l.isra.0+0x96>
 800ebe0:	463c      	mov	r4, r7
 800ebe2:	42a6      	cmp	r6, r4
 800ebe4:	dd23      	ble.n	800ec2e <_strtoul_l.isra.0+0xb4>
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	db1e      	blt.n	800ec28 <_strtoul_l.isra.0+0xae>
 800ebea:	4282      	cmp	r2, r0
 800ebec:	d31c      	bcc.n	800ec28 <_strtoul_l.isra.0+0xae>
 800ebee:	d101      	bne.n	800ebf4 <_strtoul_l.isra.0+0x7a>
 800ebf0:	45a4      	cmp	ip, r4
 800ebf2:	db19      	blt.n	800ec28 <_strtoul_l.isra.0+0xae>
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	fb00 4006 	mla	r0, r0, r6, r4
 800ebfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebfe:	e7eb      	b.n	800ebd8 <_strtoul_l.isra.0+0x5e>
 800ec00:	462f      	mov	r7, r5
 800ec02:	e7c1      	b.n	800eb88 <_strtoul_l.isra.0+0xe>
 800ec04:	2c2b      	cmp	r4, #43	; 0x2b
 800ec06:	bf04      	itt	eq
 800ec08:	1cbd      	addeq	r5, r7, #2
 800ec0a:	787c      	ldrbeq	r4, [r7, #1]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	e7cb      	b.n	800eba8 <_strtoul_l.isra.0+0x2e>
 800ec10:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ec14:	2f19      	cmp	r7, #25
 800ec16:	d801      	bhi.n	800ec1c <_strtoul_l.isra.0+0xa2>
 800ec18:	3c37      	subs	r4, #55	; 0x37
 800ec1a:	e7e2      	b.n	800ebe2 <_strtoul_l.isra.0+0x68>
 800ec1c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ec20:	2f19      	cmp	r7, #25
 800ec22:	d804      	bhi.n	800ec2e <_strtoul_l.isra.0+0xb4>
 800ec24:	3c57      	subs	r4, #87	; 0x57
 800ec26:	e7dc      	b.n	800ebe2 <_strtoul_l.isra.0+0x68>
 800ec28:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2c:	e7e5      	b.n	800ebfa <_strtoul_l.isra.0+0x80>
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	da09      	bge.n	800ec46 <_strtoul_l.isra.0+0xcc>
 800ec32:	2322      	movs	r3, #34	; 0x22
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	f8c8 3000 	str.w	r3, [r8]
 800ec3c:	f1ba 0f00 	cmp.w	sl, #0
 800ec40:	d107      	bne.n	800ec52 <_strtoul_l.isra.0+0xd8>
 800ec42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec46:	b101      	cbz	r1, 800ec4a <_strtoul_l.isra.0+0xd0>
 800ec48:	4240      	negs	r0, r0
 800ec4a:	f1ba 0f00 	cmp.w	sl, #0
 800ec4e:	d0f8      	beq.n	800ec42 <_strtoul_l.isra.0+0xc8>
 800ec50:	b10b      	cbz	r3, 800ec56 <_strtoul_l.isra.0+0xdc>
 800ec52:	f105 39ff 	add.w	r9, r5, #4294967295
 800ec56:	f8ca 9000 	str.w	r9, [sl]
 800ec5a:	e7f2      	b.n	800ec42 <_strtoul_l.isra.0+0xc8>
 800ec5c:	2430      	movs	r4, #48	; 0x30
 800ec5e:	2e00      	cmp	r6, #0
 800ec60:	d1b0      	bne.n	800ebc4 <_strtoul_l.isra.0+0x4a>
 800ec62:	2608      	movs	r6, #8
 800ec64:	e7ae      	b.n	800ebc4 <_strtoul_l.isra.0+0x4a>
 800ec66:	2c30      	cmp	r4, #48	; 0x30
 800ec68:	d0a4      	beq.n	800ebb4 <_strtoul_l.isra.0+0x3a>
 800ec6a:	260a      	movs	r6, #10
 800ec6c:	e7aa      	b.n	800ebc4 <_strtoul_l.isra.0+0x4a>
	...

0800ec70 <_strtoul_r>:
 800ec70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec72:	4c06      	ldr	r4, [pc, #24]	; (800ec8c <_strtoul_r+0x1c>)
 800ec74:	4d06      	ldr	r5, [pc, #24]	; (800ec90 <_strtoul_r+0x20>)
 800ec76:	6824      	ldr	r4, [r4, #0]
 800ec78:	6a24      	ldr	r4, [r4, #32]
 800ec7a:	2c00      	cmp	r4, #0
 800ec7c:	bf08      	it	eq
 800ec7e:	462c      	moveq	r4, r5
 800ec80:	9400      	str	r4, [sp, #0]
 800ec82:	f7ff ff7a 	bl	800eb7a <_strtoul_l.isra.0>
 800ec86:	b003      	add	sp, #12
 800ec88:	bd30      	pop	{r4, r5, pc}
 800ec8a:	bf00      	nop
 800ec8c:	2000019c 	.word	0x2000019c
 800ec90:	20000200 	.word	0x20000200

0800ec94 <__submore>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	460c      	mov	r4, r1
 800ec9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eca0:	4299      	cmp	r1, r3
 800eca2:	d11b      	bne.n	800ecdc <__submore+0x48>
 800eca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eca8:	f7ff fa66 	bl	800e178 <_malloc_r>
 800ecac:	b918      	cbnz	r0, 800ecb6 <__submore+0x22>
 800ecae:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecba:	63a3      	str	r3, [r4, #56]	; 0x38
 800ecbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ecc0:	6360      	str	r0, [r4, #52]	; 0x34
 800ecc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ecc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ecca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ecce:	7043      	strb	r3, [r0, #1]
 800ecd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ecd4:	7003      	strb	r3, [r0, #0]
 800ecd6:	6020      	str	r0, [r4, #0]
 800ecd8:	2000      	movs	r0, #0
 800ecda:	e7ea      	b.n	800ecb2 <__submore+0x1e>
 800ecdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ecde:	0077      	lsls	r7, r6, #1
 800ece0:	463a      	mov	r2, r7
 800ece2:	f000 f837 	bl	800ed54 <_realloc_r>
 800ece6:	4605      	mov	r5, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d0e0      	beq.n	800ecae <__submore+0x1a>
 800ecec:	eb00 0806 	add.w	r8, r0, r6
 800ecf0:	4601      	mov	r1, r0
 800ecf2:	4632      	mov	r2, r6
 800ecf4:	4640      	mov	r0, r8
 800ecf6:	f7fe fde1 	bl	800d8bc <memcpy>
 800ecfa:	f8c4 8000 	str.w	r8, [r4]
 800ecfe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ed02:	e7e9      	b.n	800ecd8 <__submore+0x44>

0800ed04 <__ascii_wctomb>:
 800ed04:	b149      	cbz	r1, 800ed1a <__ascii_wctomb+0x16>
 800ed06:	2aff      	cmp	r2, #255	; 0xff
 800ed08:	bf8b      	itete	hi
 800ed0a:	238a      	movhi	r3, #138	; 0x8a
 800ed0c:	700a      	strbls	r2, [r1, #0]
 800ed0e:	6003      	strhi	r3, [r0, #0]
 800ed10:	2001      	movls	r0, #1
 800ed12:	bf88      	it	hi
 800ed14:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed18:	4770      	bx	lr
 800ed1a:	4608      	mov	r0, r1
 800ed1c:	4770      	bx	lr

0800ed1e <memmove>:
 800ed1e:	4288      	cmp	r0, r1
 800ed20:	b510      	push	{r4, lr}
 800ed22:	eb01 0302 	add.w	r3, r1, r2
 800ed26:	d807      	bhi.n	800ed38 <memmove+0x1a>
 800ed28:	1e42      	subs	r2, r0, #1
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	d00a      	beq.n	800ed44 <memmove+0x26>
 800ed2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed32:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ed36:	e7f8      	b.n	800ed2a <memmove+0xc>
 800ed38:	4283      	cmp	r3, r0
 800ed3a:	d9f5      	bls.n	800ed28 <memmove+0xa>
 800ed3c:	1881      	adds	r1, r0, r2
 800ed3e:	1ad2      	subs	r2, r2, r3
 800ed40:	42d3      	cmn	r3, r2
 800ed42:	d100      	bne.n	800ed46 <memmove+0x28>
 800ed44:	bd10      	pop	{r4, pc}
 800ed46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ed4e:	e7f7      	b.n	800ed40 <memmove+0x22>

0800ed50 <__malloc_lock>:
 800ed50:	4770      	bx	lr

0800ed52 <__malloc_unlock>:
 800ed52:	4770      	bx	lr

0800ed54 <_realloc_r>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	4607      	mov	r7, r0
 800ed58:	4614      	mov	r4, r2
 800ed5a:	460e      	mov	r6, r1
 800ed5c:	b921      	cbnz	r1, 800ed68 <_realloc_r+0x14>
 800ed5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed62:	4611      	mov	r1, r2
 800ed64:	f7ff ba08 	b.w	800e178 <_malloc_r>
 800ed68:	b922      	cbnz	r2, 800ed74 <_realloc_r+0x20>
 800ed6a:	f7ff f9b9 	bl	800e0e0 <_free_r>
 800ed6e:	4625      	mov	r5, r4
 800ed70:	4628      	mov	r0, r5
 800ed72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed74:	f000 f814 	bl	800eda0 <_malloc_usable_size_r>
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d20f      	bcs.n	800ed9c <_realloc_r+0x48>
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7ff f9fa 	bl	800e178 <_malloc_r>
 800ed84:	4605      	mov	r5, r0
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d0f2      	beq.n	800ed70 <_realloc_r+0x1c>
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4622      	mov	r2, r4
 800ed8e:	f7fe fd95 	bl	800d8bc <memcpy>
 800ed92:	4631      	mov	r1, r6
 800ed94:	4638      	mov	r0, r7
 800ed96:	f7ff f9a3 	bl	800e0e0 <_free_r>
 800ed9a:	e7e9      	b.n	800ed70 <_realloc_r+0x1c>
 800ed9c:	4635      	mov	r5, r6
 800ed9e:	e7e7      	b.n	800ed70 <_realloc_r+0x1c>

0800eda0 <_malloc_usable_size_r>:
 800eda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda4:	1f18      	subs	r0, r3, #4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	bfbc      	itt	lt
 800edaa:	580b      	ldrlt	r3, [r1, r0]
 800edac:	18c0      	addlt	r0, r0, r3
 800edae:	4770      	bx	lr

0800edb0 <_init>:
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb2:	bf00      	nop
 800edb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb6:	bc08      	pop	{r3}
 800edb8:	469e      	mov	lr, r3
 800edba:	4770      	bx	lr

0800edbc <_fini>:
 800edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbe:	bf00      	nop
 800edc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc2:	bc08      	pop	{r3}
 800edc4:	469e      	mov	lr, r3
 800edc6:	4770      	bx	lr
